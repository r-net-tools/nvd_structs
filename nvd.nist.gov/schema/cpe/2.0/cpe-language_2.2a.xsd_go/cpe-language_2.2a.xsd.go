//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		nvd.nist.gov/schema/cpe/2.0/cpe-language_2.2a.xsd
package go_CpeLanguage22A

//	This XML Schema defines the CPE Language. An individual
//	CPE Name addresses a single part of an actual system. To identify more complex
//	platform types, there needs to be a way to combine different CPE Names using
//	logical operators. For example, there may be a need to identify a platform with a
//	particular operating system AND a certain application. The CPE Language exists to
//	satisfy this need, enabling the CPE Name for the operating system to be combined
//	with the CPE Name for the application. For more information, consult the CPE
//	Specification document.

import (
	xsdt "github.com/metaleap/go-xsd/types"
	xml "github.com/shift/nvd_structs/www.w3.org/2001/xml.xsd_go"
)

//	This element is the root element of a CPE
//	Language XML documents and therefore acts as a container for child platform
//	definitions.
//	The platform element represents the description
//	or qualifications of a particular IT platform type. The platform is defined
//	by the logical-test child element.
//	The optional title element may appear as a child
//	to a platform element. It provides a human-readable title for it. To support
//	uses intended for multiple languages, this element supports the ‘xml:lang’
//	attribute. At most one title element can appear for each language.
//	This type allows the xml:lang attribute to
//	associate a specific language with an element's string
//	content.
type TextType struct {

	xml.XsdGoPkgHasAttr_Lang
}

//	If the WalkHandlers.TextType function is not nil (ie. was set by outside code), calls it with this TextType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TextType instance.
func (me *TextType) Walk() (err error) {
	if fn := WalkHandlers.TextType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TitlesequencePlatformBaseTypeschema_Title_TextType_ struct {
	//	The optional title element may appear as a child
	//	to a platform element. It provides a human-readable title for it. To support
	//	uses intended for multiple languages, this element supports the ‘xml:lang’
	//	attribute. At most one title element can appear for each language.
	Titles []*TextType `xml:"http://cpe.mitre.org/language/2.0 title"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TitlesequencePlatformBaseTypeschema_Title_TextType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TitlesequencePlatformBaseTypeschema_Title_TextType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TitlesequencePlatformBaseTypeschema_Title_TextType_ instance.
func (me *XsdGoPkgHasElems_TitlesequencePlatformBaseTypeschema_Title_TextType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TitlesequencePlatformBaseTypeschema_Title_TextType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Titles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The optional remark element may appear as a child
//	of a platform element. It provides some additional description. Zero or more
//	remark elements may appear. To support uses intended for multiple languages,
//	this element supports the ‘xml:lang’ attribute. There can be multiple
//	remarks for a single language.
type XsdGoPkgHasElems_RemarksequencePlatformBaseTypeschema_Remark_TextType_ struct {
	//	The optional remark element may appear as a child
	//	of a platform element. It provides some additional description. Zero or more
	//	remark elements may appear. To support uses intended for multiple languages,
	//	this element supports the ‘xml:lang’ attribute. There can be multiple
	//	remarks for a single language.
	Remarks []*TextType `xml:"http://cpe.mitre.org/language/2.0 remark"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RemarksequencePlatformBaseTypeschema_Remark_TextType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RemarksequencePlatformBaseTypeschema_Remark_TextType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RemarksequencePlatformBaseTypeschema_Remark_TextType_ instance.
func (me *XsdGoPkgHasElems_RemarksequencePlatformBaseTypeschema_Remark_TextType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RemarksequencePlatformBaseTypeschema_Remark_TextType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Remarks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The logical-test element appears as a child of a
//	platform element, and may also be nested to create more complex logical
//	tests. The content consists of one or more elements: fact-ref, and
//	logical-test children are permitted. The operator to be applied, and
//	optional negation of the test, are given as attributes.
type XsdGoPkgHasElems_LogicalTestsequenceLogicalTestTypeschema_LogicalTest_TLogicalTestType_ struct {
	LogicalTests []*TLogicalTestType `xml:"http://cpe.mitre.org/language/2.0 logical-test"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LogicalTestsequenceLogicalTestTypeschema_LogicalTest_TLogicalTestType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LogicalTestsequenceLogicalTestTypeschema_LogicalTest_TLogicalTestType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LogicalTestsequenceLogicalTestTypeschema_LogicalTest_TLogicalTestType_ instance.
func (me *XsdGoPkgHasElems_LogicalTestsequenceLogicalTestTypeschema_LogicalTest_TLogicalTestType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LogicalTestsequenceLogicalTestTypeschema_LogicalTest_TLogicalTestType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The fact-ref element appears as a
//	child of a logical-test element. It is simply a reference to a CPE Name that
//	always evaluates to a Boolean result.
//	Define the format for acceptable CPE Names. A URN
//	format is used with the id starting with the word cpe followed by :/ and
//	then some number of individual components separated by
//	colons.
type TnamePattern xsdt.AnyURI

//	Since TnamePattern is just a simple String type, this merely sets the current value from the specified string.
func (me *TnamePattern) Set(s string) { (*xsdt.AnyURI)(me).Set(s) }

//	Since TnamePattern is just a simple String type, this merely returns the current string value.
func (me TnamePattern) String() string { return xsdt.AnyURI(me).String() }

//	This convenience method just performs a simple type conversion to TnamePattern's alias type xsdt.AnyURI.
func (me TnamePattern) ToXsdtAnyURI() xsdt.AnyURI { return xsdt.AnyURI(me) }

type XsdGoPkgHasAttr_Name_TnamePattern_ struct {
	Name TnamePattern `xml:"http://cpe.mitre.org/language/2.0 name,attr"`
}

type TFactRefType struct {
	XsdGoPkgHasAttr_Name_TnamePattern_
}

//	If the WalkHandlers.TFactRefType function is not nil (ie. was set by outside code), calls it with this TFactRefType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TFactRefType instance.
func (me *TFactRefType) Walk() (err error) {
	if fn := WalkHandlers.TFactRefType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FactRef struct {
	FactRefs []*TFactRefType `xml:"http://cpe.mitre.org/language/2.0 fact-ref"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FactRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FactRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FactRef instance.
func (me *XsdGoPkgHasElems_FactRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FactRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FactRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The OperatorEnumeration simple type defines
//	acceptable operators. Each operator defines how to evaluate multiple
//	arguments.
type ToperatorEnumeration xsdt.String

//	Since ToperatorEnumeration is just a simple String type, this merely returns the current string value.
func (me ToperatorEnumeration) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to ToperatorEnumeration's alias type xsdt.String.
func (me ToperatorEnumeration) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated ToperatorEnumeration is "AND".
func (me ToperatorEnumeration) IsAnd() bool { return me.String() == "AND" }

//	Returns true if the value of this enumerated ToperatorEnumeration is "OR".
func (me ToperatorEnumeration) IsOr() bool { return me.String() == "OR" }

//	Since ToperatorEnumeration is just a simple String type, this merely sets the current value from the specified string.
func (me *ToperatorEnumeration) Set(s string) { (*xsdt.String)(me).Set(s) }

type XsdGoPkgHasAttr_Operator_ToperatorEnumeration_ struct {
	Operator ToperatorEnumeration `xml:"http://cpe.mitre.org/language/2.0 operator,attr"`
}

type XsdGoPkgHasAttr_Negate_XsdtBoolean_ struct {
	Negate xsdt.Boolean `xml:"http://cpe.mitre.org/language/2.0 negate,attr"`
}

type TLogicalTestType struct {
	XsdGoPkgHasElems_LogicalTestsequenceLogicalTestTypeschema_LogicalTest_TLogicalTestType_

	XsdGoPkgHasElems_FactRef

	XsdGoPkgHasAttr_Operator_ToperatorEnumeration_

	XsdGoPkgHasAttr_Negate_XsdtBoolean_
}

//	If the WalkHandlers.TLogicalTestType function is not nil (ie. was set by outside code), calls it with this TLogicalTestType instance as the single argument. Then calls the Walk() method on 2/4 embed(s) and 0/0 field(s) belonging to this TLogicalTestType instance.
func (me *TLogicalTestType) Walk() (err error) {
	if fn := WalkHandlers.TLogicalTestType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_LogicalTestsequenceLogicalTestTypeschema_LogicalTest_TLogicalTestType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_FactRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LogicalTest struct {
	LogicalTest *TLogicalTestType `xml:"http://cpe.mitre.org/language/2.0 logical-test"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LogicalTest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LogicalTest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LogicalTest instance.
func (me *XsdGoPkgHasElem_LogicalTest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LogicalTest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LogicalTest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPlatformBaseType struct {
	//	The optional title element may appear as a child
	//	to a platform element. It provides a human-readable title for it. To support
	//	uses intended for multiple languages, this element supports the ‘xml:lang’
	//	attribute. At most one title element can appear for each language.
	XsdGoPkgHasElems_TitlesequencePlatformBaseTypeschema_Title_TextType_

	//	The optional remark element may appear as a child
	//	of a platform element. It provides some additional description. Zero or more
	//	remark elements may appear. To support uses intended for multiple languages,
	//	this element supports the ‘xml:lang’ attribute. There can be multiple
	//	remarks for a single language.
	XsdGoPkgHasElems_RemarksequencePlatformBaseTypeschema_Remark_TextType_

	XsdGoPkgHasElem_LogicalTest
}

//	If the WalkHandlers.TPlatformBaseType function is not nil (ie. was set by outside code), calls it with this TPlatformBaseType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TPlatformBaseType instance.
func (me *TPlatformBaseType) Walk() (err error) {
	if fn := WalkHandlers.TPlatformBaseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_TitlesequencePlatformBaseTypeschema_Title_TextType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RemarksequencePlatformBaseTypeschema_Remark_TextType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LogicalTest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The id attribute holds a locally unique
//	name for the platform. There is no defined format for this id, it just has
//	to be unique to the containing language document.
type XsdGoPkgHasAttr_Id_XsdtAnyURI_ struct {
	//	The id attribute holds a locally unique
	//	name for the platform. There is no defined format for this id, it just has
	//	to be unique to the containing language document.
	Id xsdt.AnyURI `xml:"http://cpe.mitre.org/language/2.0 id,attr"`
}

type TPlatformType struct {
	TPlatformBaseType

	//	The id attribute holds a locally unique
	//	name for the platform. There is no defined format for this id, it just has
	//	to be unique to the containing language document.
	XsdGoPkgHasAttr_Id_XsdtAnyURI_
}

//	If the WalkHandlers.TPlatformType function is not nil (ie. was set by outside code), calls it with this TPlatformType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TPlatformType instance.
func (me *TPlatformType) Walk() (err error) {
	if fn := WalkHandlers.TPlatformType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TPlatformBaseType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Platform struct {
	Platforms []*TPlatformType `xml:"http://cpe.mitre.org/language/2.0 platform"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Platform function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Platform instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Platform instance.
func (me *XsdGoPkgHasElems_Platform) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Platform; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Platforms {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TplatformSpecificationType struct {
	XsdGoPkgHasElems_Platform
}

//	If the WalkHandlers.TplatformSpecificationType function is not nil (ie. was set by outside code), calls it with this TplatformSpecificationType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TplatformSpecificationType instance.
func (me *TplatformSpecificationType) Walk() (err error) {
	if fn := WalkHandlers.TplatformSpecificationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Platform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PlatformSpecification struct {
	//	This element is the root element of a CPE
	//	Language XML documents and therefore acts as a container for child platform
	//	definitions.
	PlatformSpecification *TplatformSpecificationType `xml:"http://cpe.mitre.org/language/2.0 platform-specification"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PlatformSpecification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PlatformSpecification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PlatformSpecification instance.
func (me *XsdGoPkgHasElem_PlatformSpecification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PlatformSpecification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PlatformSpecification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This element is the root element of a CPE
//	Language XML documents and therefore acts as a container for child platform
//	definitions.
type XsdGoPkgHasElems_PlatformSpecification struct {
	//	This element is the root element of a CPE
	//	Language XML documents and therefore acts as a container for child platform
	//	definitions.
	PlatformSpecifications []*TplatformSpecificationType `xml:"http://cpe.mitre.org/language/2.0 platform-specification"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PlatformSpecification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PlatformSpecification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PlatformSpecification instance.
func (me *XsdGoPkgHasElems_PlatformSpecification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PlatformSpecification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PlatformSpecifications {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Platform struct {
	Platform *TPlatformType `xml:"http://cpe.mitre.org/language/2.0 platform"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Platform function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Platform instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Platform instance.
func (me *XsdGoPkgHasElem_Platform) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Platform; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Platform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PlatformConfiguration struct {
	PlatformConfiguration *TPlatformBaseType `xml:"http://cpe.mitre.org/language/2.0 platform-configuration"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PlatformConfiguration function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PlatformConfiguration instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PlatformConfiguration instance.
func (me *XsdGoPkgHasElem_PlatformConfiguration) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PlatformConfiguration; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PlatformConfiguration.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PlatformConfiguration struct {
	PlatformConfigurations []*TPlatformBaseType `xml:"http://cpe.mitre.org/language/2.0 platform-configuration"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PlatformConfiguration function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PlatformConfiguration instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PlatformConfiguration instance.
func (me *XsdGoPkgHasElems_PlatformConfiguration) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PlatformConfiguration; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PlatformConfigurations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FactRef struct {
	FactRef *TFactRefType `xml:"http://cpe.mitre.org/language/2.0 fact-ref"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FactRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FactRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FactRef instance.
func (me *XsdGoPkgHasElem_FactRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FactRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FactRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The optional remark element may appear as a child
//	of a platform element. It provides some additional description. Zero or more
//	remark elements may appear. To support uses intended for multiple languages,
//	this element supports the ‘xml:lang’ attribute. There can be multiple
//	remarks for a single language.
type XsdGoPkgHasElem_RemarksequencePlatformBaseTypeschema_Remark_TextType_ struct {
	//	The optional remark element may appear as a child
	//	of a platform element. It provides some additional description. Zero or more
	//	remark elements may appear. To support uses intended for multiple languages,
	//	this element supports the ‘xml:lang’ attribute. There can be multiple
	//	remarks for a single language.
	Remark *TextType `xml:"http://cpe.mitre.org/language/2.0 remark"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RemarksequencePlatformBaseTypeschema_Remark_TextType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RemarksequencePlatformBaseTypeschema_Remark_TextType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RemarksequencePlatformBaseTypeschema_Remark_TextType_ instance.
func (me *XsdGoPkgHasElem_RemarksequencePlatformBaseTypeschema_Remark_TextType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RemarksequencePlatformBaseTypeschema_Remark_TextType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The optional title element may appear as a child
//	to a platform element. It provides a human-readable title for it. To support
//	uses intended for multiple languages, this element supports the ‘xml:lang’
//	attribute. At most one title element can appear for each language.
type XsdGoPkgHasElem_TitlesequencePlatformBaseTypeschema_Title_TextType_ struct {
	//	The optional title element may appear as a child
	//	to a platform element. It provides a human-readable title for it. To support
	//	uses intended for multiple languages, this element supports the ‘xml:lang’
	//	attribute. At most one title element can appear for each language.
	Title *TextType `xml:"http://cpe.mitre.org/language/2.0 title"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TitlesequencePlatformBaseTypeschema_Title_TextType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TitlesequencePlatformBaseTypeschema_Title_TextType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TitlesequencePlatformBaseTypeschema_Title_TextType_ instance.
func (me *XsdGoPkgHasElem_TitlesequencePlatformBaseTypeschema_Title_TextType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TitlesequencePlatformBaseTypeschema_Title_TextType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 21 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 21 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	TextType                                                                                func(*TextType, bool) error
	TPlatformType                                                                           func(*TPlatformType, bool) error
	XsdGoPkgHasElem_LogicalTest                                                             func(*XsdGoPkgHasElem_LogicalTest, bool) error
	XsdGoPkgHasElem_PlatformConfiguration                                                   func(*XsdGoPkgHasElem_PlatformConfiguration, bool) error
	XsdGoPkgHasElem_TitlesequencePlatformBaseTypeschema_Title_TextType_                     func(*XsdGoPkgHasElem_TitlesequencePlatformBaseTypeschema_Title_TextType_, bool) error
	XsdGoPkgHasElems_RemarksequencePlatformBaseTypeschema_Remark_TextType_                  func(*XsdGoPkgHasElems_RemarksequencePlatformBaseTypeschema_Remark_TextType_, bool) error
	XsdGoPkgHasElems_LogicalTestsequenceLogicalTestTypeschema_LogicalTest_TLogicalTestType_ func(*XsdGoPkgHasElems_LogicalTestsequenceLogicalTestTypeschema_LogicalTest_TLogicalTestType_, bool) error
	TplatformSpecificationType                                                              func(*TplatformSpecificationType, bool) error
	XsdGoPkgHasElems_PlatformConfiguration                                                  func(*XsdGoPkgHasElems_PlatformConfiguration, bool) error
	XsdGoPkgHasElem_FactRef                                                                 func(*XsdGoPkgHasElem_FactRef, bool) error
	XsdGoPkgHasElems_FactRef                                                                func(*XsdGoPkgHasElems_FactRef, bool) error
	XsdGoPkgHasElems_Platform                                                               func(*XsdGoPkgHasElems_Platform, bool) error
	TLogicalTestType                                                                        func(*TLogicalTestType, bool) error
	TPlatformBaseType                                                                       func(*TPlatformBaseType, bool) error
	XsdGoPkgHasElem_PlatformSpecification                                                   func(*XsdGoPkgHasElem_PlatformSpecification, bool) error
	XsdGoPkgHasElems_PlatformSpecification                                                  func(*XsdGoPkgHasElems_PlatformSpecification, bool) error
	XsdGoPkgHasElem_Platform                                                                func(*XsdGoPkgHasElem_Platform, bool) error
	XsdGoPkgHasElem_RemarksequencePlatformBaseTypeschema_Remark_TextType_                   func(*XsdGoPkgHasElem_RemarksequencePlatformBaseTypeschema_Remark_TextType_, bool) error
	XsdGoPkgHasElems_TitlesequencePlatformBaseTypeschema_Title_TextType_                    func(*XsdGoPkgHasElems_TitlesequencePlatformBaseTypeschema_Title_TextType_, bool) error
	TFactRefType                                                                            func(*TFactRefType, bool) error
	XsdGoPkgHasCdata                                                                        func(*XsdGoPkgHasCdata, bool) error
}
