//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		nvd.nist.gov/schema/vulnerability_0.4.1.xsd
package go_Vulnerability041



import (
	xml "github.com/shift/nvd_structs/www.w3.org/2001/xml.xsd_go"
	xsdt "github.com/metaleap/go-xsd/types"
	scap_core "github.com/shift/nvd_structs/nvd.nist.gov/schema/scap-core_0.1.xsd_go"
	cve "github.com/shift/nvd_structs/nvd.nist.gov/schema/cve_0.1.1.xsd_go"
	cce "github.com/shift/nvd_structs/nvd.nist.gov/schema/cce_0.1.xsd_go"
	cvssv2 "github.com/shift/nvd_structs/nvd.nist.gov/schema/cvss-v2_0.2.xsd_go"
	cpe_lang "github.com/shift/nvd_structs/nvd.nist.gov/schema/cpe/2.0/cpe-language_2.2a.xsd_go"
	patch "github.com/shift/nvd_structs/nvd.nist.gov/schema/patch_0.1.xsd_go"
)

//	TODO: Low priority: Add reference to notes type to allow analysts, vendor and other comments.  Add source attribute.  Maybe categorization?
type XsdGoPkgHasElems_ProductsequencevulnerableSoftwareTypeschema_Product_CpeLangTnamePattern_ struct {
	Products []cpe_lang.TnamePattern `xml:"http://scap.nist.gov/schema/vulnerability/0.4 product"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_ProductsequencevulnerableSoftwareTypeschema_Product_CpeLangTnamePattern_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProductsequencevulnerableSoftwareTypeschema_Product_CpeLangTnamePattern_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProductsequencevulnerableSoftwareTypeschema_Product_CpeLangTnamePattern_ instance.
func (me *XsdGoPkgHasElems_ProductsequencevulnerableSoftwareTypeschema_Product_CpeLangTnamePattern_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_ProductsequencevulnerableSoftwareTypeschema_Product_CpeLangTnamePattern_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type TvulnerableSoftwareType struct {
	XsdGoPkgHasElems_ProductsequencevulnerableSoftwareTypeschema_Product_CpeLangTnamePattern_

}

//	If the WalkHandlers.TvulnerableSoftwareType function is not nil (ie. was set by outside code), calls it with this TvulnerableSoftwareType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TvulnerableSoftwareType instance.
func (me *TvulnerableSoftwareType) Walk () (err error) { 
	if fn := WalkHandlers.TvulnerableSoftwareType; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.XsdGoPkgHasElems_ProductsequencevulnerableSoftwareTypeschema_Product_CpeLangTnamePattern_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_VulnerableSoftwareListsequencevulnerabilityTypeschema_VulnerableSoftwareList_TvulnerableSoftwareType_ struct {
	VulnerableSoftwareList *TvulnerableSoftwareType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 vulnerable-software-list"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_VulnerableSoftwareListsequencevulnerabilityTypeschema_VulnerableSoftwareList_TvulnerableSoftwareType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_VulnerableSoftwareListsequencevulnerabilityTypeschema_VulnerableSoftwareList_TvulnerableSoftwareType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_VulnerableSoftwareListsequencevulnerabilityTypeschema_VulnerableSoftwareList_TvulnerableSoftwareType_ instance.
func (me *XsdGoPkgHasElem_VulnerableSoftwareListsequencevulnerabilityTypeschema_VulnerableSoftwareList_TvulnerableSoftwareType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_VulnerableSoftwareListsequencevulnerabilityTypeschema_VulnerableSoftwareList_TvulnerableSoftwareType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.VulnerableSoftwareList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_DisclosureDatetimesequencevulnerabilityTypeschema_DisclosureDatetime_XsdtDateTime_ struct {
	DisclosureDatetime xsdt.DateTime `xml:"http://scap.nist.gov/schema/vulnerability/0.4 disclosure-datetime"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_DisclosureDatetimesequencevulnerabilityTypeschema_DisclosureDatetime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DisclosureDatetimesequencevulnerabilityTypeschema_DisclosureDatetime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DisclosureDatetimesequencevulnerabilityTypeschema_DisclosureDatetime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElem_DisclosureDatetimesequencevulnerabilityTypeschema_DisclosureDatetime_XsdtDateTime_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_DisclosureDatetimesequencevulnerabilityTypeschema_DisclosureDatetime_XsdtDateTime_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_CvsssequencevulnerabilityTypeschema_Cvss_Cvssv2TcvssImpactType_ struct {
	Cvss cvssv2.TcvssImpactType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 cvss"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_CvsssequencevulnerabilityTypeschema_Cvss_Cvssv2TcvssImpactType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CvsssequencevulnerabilityTypeschema_Cvss_Cvssv2TcvssImpactType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CvsssequencevulnerabilityTypeschema_Cvss_Cvssv2TcvssImpactType_ instance.
func (me *XsdGoPkgHasElem_CvsssequencevulnerabilityTypeschema_Cvss_Cvssv2TcvssImpactType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_CvsssequencevulnerabilityTypeschema_Cvss_Cvssv2TcvssImpactType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_PhysicalAccesssequenceassociatedExploitLocationTypeschema_PhysicalAccess_XsdtBoolean_False struct {
	PhysicalAccess xsdt.Boolean `xml:"http://scap.nist.gov/schema/vulnerability/0.4 physical-access"`

}

//	Returns the default value for PhysicalAccess -- false
func (me XsdGoPkgHasElem_PhysicalAccesssequenceassociatedExploitLocationTypeschema_PhysicalAccess_XsdtBoolean_False) PhysicalAccessDefault () xsdt.Boolean { return xsdt.Boolean(false) }

//	If the WalkHandlers.XsdGoPkgHasElem_PhysicalAccesssequenceassociatedExploitLocationTypeschema_PhysicalAccess_XsdtBoolean_False function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PhysicalAccesssequenceassociatedExploitLocationTypeschema_PhysicalAccess_XsdtBoolean_False instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PhysicalAccesssequenceassociatedExploitLocationTypeschema_PhysicalAccess_XsdtBoolean_False instance.
func (me *XsdGoPkgHasElem_PhysicalAccesssequenceassociatedExploitLocationTypeschema_PhysicalAccess_XsdtBoolean_False) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_PhysicalAccesssequenceassociatedExploitLocationTypeschema_PhysicalAccess_XsdtBoolean_False; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_VoluntarilyInteractsequenceassociatedExploitLocationTypeschema_VoluntarilyInteract_XsdtBoolean_False struct {
	VoluntarilyInteract xsdt.Boolean `xml:"http://scap.nist.gov/schema/vulnerability/0.4 voluntarily-interact"`

}

//	Returns the default value for VoluntarilyInteract -- false
func (me XsdGoPkgHasElem_VoluntarilyInteractsequenceassociatedExploitLocationTypeschema_VoluntarilyInteract_XsdtBoolean_False) VoluntarilyInteractDefault () xsdt.Boolean { return xsdt.Boolean(false) }

//	If the WalkHandlers.XsdGoPkgHasElem_VoluntarilyInteractsequenceassociatedExploitLocationTypeschema_VoluntarilyInteract_XsdtBoolean_False function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_VoluntarilyInteractsequenceassociatedExploitLocationTypeschema_VoluntarilyInteract_XsdtBoolean_False instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_VoluntarilyInteractsequenceassociatedExploitLocationTypeschema_VoluntarilyInteract_XsdtBoolean_False instance.
func (me *XsdGoPkgHasElem_VoluntarilyInteractsequenceassociatedExploitLocationTypeschema_VoluntarilyInteract_XsdtBoolean_False) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_VoluntarilyInteractsequenceassociatedExploitLocationTypeschema_VoluntarilyInteract_XsdtBoolean_False; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_DialupsequenceassociatedExploitLocationTypeschema_Dialup_XsdtBoolean_False struct {
	Dialup xsdt.Boolean `xml:"http://scap.nist.gov/schema/vulnerability/0.4 dialup"`

}

//	Returns the default value for Dialup -- false
func (me XsdGoPkgHasElem_DialupsequenceassociatedExploitLocationTypeschema_Dialup_XsdtBoolean_False) DialupDefault () xsdt.Boolean { return xsdt.Boolean(false) }

//	If the WalkHandlers.XsdGoPkgHasElem_DialupsequenceassociatedExploitLocationTypeschema_Dialup_XsdtBoolean_False function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DialupsequenceassociatedExploitLocationTypeschema_Dialup_XsdtBoolean_False instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DialupsequenceassociatedExploitLocationTypeschema_Dialup_XsdtBoolean_False instance.
func (me *XsdGoPkgHasElem_DialupsequenceassociatedExploitLocationTypeschema_Dialup_XsdtBoolean_False) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_DialupsequenceassociatedExploitLocationTypeschema_Dialup_XsdtBoolean_False; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_UnknownsequenceassociatedExploitLocationTypeschema_Unknown_XsdtBoolean_False struct {
	Unknown xsdt.Boolean `xml:"http://scap.nist.gov/schema/vulnerability/0.4 unknown"`

}

//	Returns the default value for Unknown -- false
func (me XsdGoPkgHasElem_UnknownsequenceassociatedExploitLocationTypeschema_Unknown_XsdtBoolean_False) UnknownDefault () xsdt.Boolean { return xsdt.Boolean(false) }

//	If the WalkHandlers.XsdGoPkgHasElem_UnknownsequenceassociatedExploitLocationTypeschema_Unknown_XsdtBoolean_False function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UnknownsequenceassociatedExploitLocationTypeschema_Unknown_XsdtBoolean_False instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_UnknownsequenceassociatedExploitLocationTypeschema_Unknown_XsdtBoolean_False instance.
func (me *XsdGoPkgHasElem_UnknownsequenceassociatedExploitLocationTypeschema_Unknown_XsdtBoolean_False) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_UnknownsequenceassociatedExploitLocationTypeschema_Unknown_XsdtBoolean_False; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type TassociatedExploitLocationType struct {
	XsdGoPkgHasElem_PhysicalAccesssequenceassociatedExploitLocationTypeschema_PhysicalAccess_XsdtBoolean_False

	XsdGoPkgHasElem_VoluntarilyInteractsequenceassociatedExploitLocationTypeschema_VoluntarilyInteract_XsdtBoolean_False

	XsdGoPkgHasElem_DialupsequenceassociatedExploitLocationTypeschema_Dialup_XsdtBoolean_False

	XsdGoPkgHasElem_UnknownsequenceassociatedExploitLocationTypeschema_Unknown_XsdtBoolean_False

}

//	If the WalkHandlers.TassociatedExploitLocationType function is not nil (ie. was set by outside code), calls it with this TassociatedExploitLocationType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TassociatedExploitLocationType instance.
func (me *TassociatedExploitLocationType) Walk () (err error) { 
	if fn := WalkHandlers.TassociatedExploitLocationType; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.XsdGoPkgHasElem_PhysicalAccesssequenceassociatedExploitLocationTypeschema_PhysicalAccess_XsdtBoolean_False.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_VoluntarilyInteractsequenceassociatedExploitLocationTypeschema_VoluntarilyInteract_XsdtBoolean_False.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_DialupsequenceassociatedExploitLocationTypeschema_Dialup_XsdtBoolean_False.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_UnknownsequenceassociatedExploitLocationTypeschema_Unknown_XsdtBoolean_False.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_ExploitLocationsequenceosvdbExtensionTypeschema_ExploitLocation_TassociatedExploitLocationType_ struct {
	ExploitLocation *TassociatedExploitLocationType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 exploit-location"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_ExploitLocationsequenceosvdbExtensionTypeschema_ExploitLocation_TassociatedExploitLocationType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExploitLocationsequenceosvdbExtensionTypeschema_ExploitLocation_TassociatedExploitLocationType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ExploitLocationsequenceosvdbExtensionTypeschema_ExploitLocation_TassociatedExploitLocationType_ instance.
func (me *XsdGoPkgHasElem_ExploitLocationsequenceosvdbExtensionTypeschema_ExploitLocation_TassociatedExploitLocationType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_ExploitLocationsequenceosvdbExtensionTypeschema_ExploitLocation_TassociatedExploitLocationType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.ExploitLocation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type TosvdbExtensionType struct {
	XsdGoPkgHasElem_ExploitLocationsequenceosvdbExtensionTypeschema_ExploitLocation_TassociatedExploitLocationType_

}

//	If the WalkHandlers.TosvdbExtensionType function is not nil (ie. was set by outside code), calls it with this TosvdbExtensionType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TosvdbExtensionType instance.
func (me *TosvdbExtensionType) Walk () (err error) { 
	if fn := WalkHandlers.TosvdbExtensionType; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.XsdGoPkgHasElem_ExploitLocationsequenceosvdbExtensionTypeschema_ExploitLocation_TassociatedExploitLocationType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_OsvdbExtsequencevulnerabilityTypeschema_OsvdbExt_TosvdbExtensionType_ struct {
	OsvdbExt *TosvdbExtensionType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 osvdb-ext"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_OsvdbExtsequencevulnerabilityTypeschema_OsvdbExt_TosvdbExtensionType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OsvdbExtsequencevulnerabilityTypeschema_OsvdbExt_TosvdbExtensionType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OsvdbExtsequencevulnerabilityTypeschema_OsvdbExt_TosvdbExtensionType_ instance.
func (me *XsdGoPkgHasElem_OsvdbExtsequencevulnerabilityTypeschema_OsvdbExt_TosvdbExtensionType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_OsvdbExtsequencevulnerabilityTypeschema_OsvdbExt_TosvdbExtensionType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.OsvdbExt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

//	The security protection type
type TsecurityProtectionType xsdt.Token

//	Returns true if the value of this enumerated TsecurityProtectionType is "ALLOWS_OTHER_ACCESS".
func (me TsecurityProtectionType) IsAllowsOtherAccess () bool { return me.String() == "ALLOWS_OTHER_ACCESS" }

//	Since TsecurityProtectionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TsecurityProtectionType) Set (s string)  { (*xsdt.Token)(me).Set(s) }

//	Since TsecurityProtectionType is just a simple String type, this merely returns the current string value.
func (me TsecurityProtectionType) String () string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TsecurityProtectionType's alias type xsdt.Token.
func (me TsecurityProtectionType) ToXsdtToken () xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TsecurityProtectionType is "ALLOWS_ADMIN_ACCESS".
func (me TsecurityProtectionType) IsAllowsAdminAccess () bool { return me.String() == "ALLOWS_ADMIN_ACCESS" }

//	Returns true if the value of this enumerated TsecurityProtectionType is "ALLOWS_USER_ACCESS".
func (me TsecurityProtectionType) IsAllowsUserAccess () bool { return me.String() == "ALLOWS_USER_ACCESS" }

type XsdGoPkgHasElem_SecurityProtectionsequencevulnerabilityTypeschema_SecurityProtection_TsecurityProtectionType_ struct {
	SecurityProtection TsecurityProtectionType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 security-protection"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_SecurityProtectionsequencevulnerabilityTypeschema_SecurityProtection_TsecurityProtectionType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SecurityProtectionsequencevulnerabilityTypeschema_SecurityProtection_TsecurityProtectionType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SecurityProtectionsequencevulnerabilityTypeschema_SecurityProtection_TsecurityProtectionType_ instance.
func (me *XsdGoPkgHasElem_SecurityProtectionsequencevulnerabilityTypeschema_SecurityProtection_TsecurityProtectionType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_SecurityProtectionsequencevulnerabilityTypeschema_SecurityProtection_TsecurityProtectionType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

//	Denotes a scanner and required configuration that is capable of detecting the referenced vulnerability.  May also be an OVAL definition and omit scanner name.
//	The CPE name of the scanning tool.  A value must be supplied for this element.  The CPE name can be used for a CPE from the NVD.  The CPE title attribute can be used for internal naming conventions. (or both, if possible)
type XsdGoPkgHasElem_NamesequencetoolConfigurationTypeschema_Name_ScapCoreTcpeNamePatternType_ struct {
//	The CPE name of the scanning tool.  A value must be supplied for this element.  The CPE name can be used for a CPE from the NVD.  The CPE title attribute can be used for internal naming conventions. (or both, if possible)
	Name scap_core.TcpeNamePatternType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 name"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_NamesequencetoolConfigurationTypeschema_Name_ScapCoreTcpeNamePatternType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NamesequencetoolConfigurationTypeschema_Name_ScapCoreTcpeNamePatternType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NamesequencetoolConfigurationTypeschema_Name_ScapCoreTcpeNamePatternType_ instance.
func (me *XsdGoPkgHasElem_NamesequencetoolConfigurationTypeschema_Name_ScapCoreTcpeNamePatternType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_NamesequencetoolConfigurationTypeschema_Name_ScapCoreTcpeNamePatternType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

//	Defines required signature or policy definition that must be installed on the tool.
type XsdGoPkgHasElems_DefinitionsequencetoolConfigurationTypeschema_Definition_ScapCoreTcheckReferenceType_ struct {
//	Defines required signature or policy definition that must be installed on the tool.
	Definitions []scap_core.TcheckReferenceType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 definition"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_DefinitionsequencetoolConfigurationTypeschema_Definition_ScapCoreTcheckReferenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DefinitionsequencetoolConfigurationTypeschema_Definition_ScapCoreTcheckReferenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DefinitionsequencetoolConfigurationTypeschema_Definition_ScapCoreTcheckReferenceType_ instance.
func (me *XsdGoPkgHasElems_DefinitionsequencetoolConfigurationTypeschema_Definition_ScapCoreTcheckReferenceType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_DefinitionsequencetoolConfigurationTypeschema_Definition_ScapCoreTcheckReferenceType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type TtoolConfigurationType struct {
//	The CPE name of the scanning tool.  A value must be supplied for this element.  The CPE name can be used for a CPE from the NVD.  The CPE title attribute can be used for internal naming conventions. (or both, if possible)
	XsdGoPkgHasElem_NamesequencetoolConfigurationTypeschema_Name_ScapCoreTcpeNamePatternType_

//	Defines required signature or policy definition that must be installed on the tool.
	XsdGoPkgHasElems_DefinitionsequencetoolConfigurationTypeschema_Definition_ScapCoreTcheckReferenceType_

}

//	If the WalkHandlers.TtoolConfigurationType function is not nil (ie. was set by outside code), calls it with this TtoolConfigurationType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TtoolConfigurationType instance.
func (me *TtoolConfigurationType) Walk () (err error) { 
	if fn := WalkHandlers.TtoolConfigurationType; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.XsdGoPkgHasElem_NamesequencetoolConfigurationTypeschema_Name_ScapCoreTcpeNamePatternType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElems_DefinitionsequencetoolConfigurationTypeschema_Definition_ScapCoreTcheckReferenceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_ScannersequencevulnerabilityTypeschema_Scanner_TtoolConfigurationType_ struct {
//	Denotes a scanner and required configuration that is capable of detecting the referenced vulnerability.  May also be an OVAL definition and omit scanner name.
	Scanners []*TtoolConfigurationType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 scanner"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_ScannersequencevulnerabilityTypeschema_Scanner_TtoolConfigurationType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ScannersequencevulnerabilityTypeschema_Scanner_TtoolConfigurationType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ScannersequencevulnerabilityTypeschema_Scanner_TtoolConfigurationType_ instance.
func (me *XsdGoPkgHasElems_ScannersequencevulnerabilityTypeschema_Scanner_TtoolConfigurationType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_ScannersequencevulnerabilityTypeschema_Scanner_TtoolConfigurationType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		for _, x := range me.Scanners { if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_TechnicalDescriptionsequencevulnerabilityTypeschema_TechnicalDescription_ScapCoreTreferenceType_ struct {
	TechnicalDescriptions []scap_core.TreferenceType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 technical_description"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_TechnicalDescriptionsequencevulnerabilityTypeschema_TechnicalDescription_ScapCoreTreferenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TechnicalDescriptionsequencevulnerabilityTypeschema_TechnicalDescription_ScapCoreTreferenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TechnicalDescriptionsequencevulnerabilityTypeschema_TechnicalDescription_ScapCoreTreferenceType_ instance.
func (me *XsdGoPkgHasElems_TechnicalDescriptionsequencevulnerabilityTypeschema_TechnicalDescription_ScapCoreTreferenceType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_TechnicalDescriptionsequencevulnerabilityTypeschema_TechnicalDescription_ScapCoreTreferenceType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_CveIdchoicesequencevulnerabilityTypeschema_CveId_CveTcveNamePatternType_ struct {
	CveId cve.TcveNamePatternType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 cve-id"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_CveIdchoicesequencevulnerabilityTypeschema_CveId_CveTcveNamePatternType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CveIdchoicesequencevulnerabilityTypeschema_CveId_CveTcveNamePatternType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CveIdchoicesequencevulnerabilityTypeschema_CveId_CveTcveNamePatternType_ instance.
func (me *XsdGoPkgHasElem_CveIdchoicesequencevulnerabilityTypeschema_CveId_CveTcveNamePatternType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_CveIdchoicesequencevulnerabilityTypeschema_CveId_CveTcveNamePatternType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_CceIdchoicesequencevulnerabilityTypeschema_CceId_CceTcceNamePatternType_ struct {
	CceId cce.TcceNamePatternType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 cce-id"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_CceIdchoicesequencevulnerabilityTypeschema_CceId_CceTcceNamePatternType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CceIdchoicesequencevulnerabilityTypeschema_CceId_CceTcceNamePatternType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CceIdchoicesequencevulnerabilityTypeschema_CceId_CceTcceNamePatternType_ instance.
func (me *XsdGoPkgHasElem_CceIdchoicesequencevulnerabilityTypeschema_CceId_CceTcceNamePatternType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_CceIdchoicesequencevulnerabilityTypeschema_CceId_CceTcceNamePatternType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_PublishedDatetimesequencevulnerabilityTypeschema_PublishedDatetime_XsdtDateTime_ struct {
	PublishedDatetime xsdt.DateTime `xml:"http://scap.nist.gov/schema/vulnerability/0.4 published-datetime"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_PublishedDatetimesequencevulnerabilityTypeschema_PublishedDatetime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PublishedDatetimesequencevulnerabilityTypeschema_PublishedDatetime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PublishedDatetimesequencevulnerabilityTypeschema_PublishedDatetime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElem_PublishedDatetimesequencevulnerabilityTypeschema_PublishedDatetime_XsdtDateTime_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_PublishedDatetimesequencevulnerabilityTypeschema_PublishedDatetime_XsdtDateTime_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_LastModifiedDatetimesequencevulnerabilityTypeschema_LastModifiedDatetime_XsdtDateTime_ struct {
	LastModifiedDatetime xsdt.DateTime `xml:"http://scap.nist.gov/schema/vulnerability/0.4 last-modified-datetime"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_LastModifiedDatetimesequencevulnerabilityTypeschema_LastModifiedDatetime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LastModifiedDatetimesequencevulnerabilityTypeschema_LastModifiedDatetime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LastModifiedDatetimesequencevulnerabilityTypeschema_LastModifiedDatetime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElem_LastModifiedDatetimesequencevulnerabilityTypeschema_LastModifiedDatetime_XsdtDateTime_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_LastModifiedDatetimesequencevulnerabilityTypeschema_LastModifiedDatetime_XsdtDateTime_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

//	TODO: revisit referenceType and textType
//	Extends the base "reference" class by adding the ability to specify which kind (within the vulnerability model) of reference it is.  See "Vulnerability_Reference_Category_List" enumeration.
type XsdGoPkgHasElem_NotessequencevulnerabilityReferenceTypeschema_Notes_ScapCoreTnotesType_ struct {
	Notes scap_core.TnotesType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 notes"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_NotessequencevulnerabilityReferenceTypeschema_Notes_ScapCoreTnotesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NotessequencevulnerabilityReferenceTypeschema_Notes_ScapCoreTnotesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NotessequencevulnerabilityReferenceTypeschema_Notes_ScapCoreTnotesType_ instance.
func (me *XsdGoPkgHasElem_NotessequencevulnerabilityReferenceTypeschema_Notes_ScapCoreTnotesType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_NotessequencevulnerabilityReferenceTypeschema_Notes_ScapCoreTnotesType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type TvulnerabilityReferenceCategoryEnumType xsdt.Token

//	Since TvulnerabilityReferenceCategoryEnumType is just a simple String type, this merely sets the current value from the specified string.
func (me *TvulnerabilityReferenceCategoryEnumType) Set (s string)  { (*xsdt.Token)(me).Set(s) }

//	Since TvulnerabilityReferenceCategoryEnumType is just a simple String type, this merely returns the current string value.
func (me TvulnerabilityReferenceCategoryEnumType) String () string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TvulnerabilityReferenceCategoryEnumType is "THIRD_PARTY_ADVISORY".
func (me TvulnerabilityReferenceCategoryEnumType) IsThirdPartyAdvisory () bool { return me.String() == "THIRD_PARTY_ADVISORY" }

//	Returns true if the value of this enumerated TvulnerabilityReferenceCategoryEnumType is "UNKNOWN".
func (me TvulnerabilityReferenceCategoryEnumType) IsUnknown () bool { return me.String() == "UNKNOWN" }

//	Returns true if the value of this enumerated TvulnerabilityReferenceCategoryEnumType is "MITIGATION_PROCEDURE".
func (me TvulnerabilityReferenceCategoryEnumType) IsMitigationProcedure () bool { return me.String() == "MITIGATION_PROCEDURE" }

//	Returns true if the value of this enumerated TvulnerabilityReferenceCategoryEnumType is "TOOL_CONFIGURATION_DESCRIPTION".
func (me TvulnerabilityReferenceCategoryEnumType) IsToolConfigurationDescription () bool { return me.String() == "TOOL_CONFIGURATION_DESCRIPTION" }

//	This convenience method just performs a simple type conversion to TvulnerabilityReferenceCategoryEnumType's alias type xsdt.Token.
func (me TvulnerabilityReferenceCategoryEnumType) ToXsdtToken () xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TvulnerabilityReferenceCategoryEnumType is "PATCH".
func (me TvulnerabilityReferenceCategoryEnumType) IsPatch () bool { return me.String() == "PATCH" }

//	Returns true if the value of this enumerated TvulnerabilityReferenceCategoryEnumType is "VENDOR_ADVISORY".
func (me TvulnerabilityReferenceCategoryEnumType) IsVendorAdvisory () bool { return me.String() == "VENDOR_ADVISORY" }

//	Returns true if the value of this enumerated TvulnerabilityReferenceCategoryEnumType is "SIGNATURE_SOURCE".
func (me TvulnerabilityReferenceCategoryEnumType) IsSignatureSource () bool { return me.String() == "SIGNATURE_SOURCE" }

type XsdGoPkgHasAttr_ReferenceType_TvulnerabilityReferenceCategoryEnumType_ struct {
	ReferenceType TvulnerabilityReferenceCategoryEnumType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 reference_type,attr"`

}

type XsdGoPkgHasAttr_Deprecated_XsdtBoolean_ struct {
	Deprecated xsdt.Boolean `xml:"http://scap.nist.gov/schema/vulnerability/0.4 deprecated,attr"`

}

//	TODO: determine purpose
type XsdGoPkgHasElem_SourcesequencevulnerabilityReferenceTypeschema_Source_XsdtString_ struct {
//	TODO: determine purpose
	Source xsdt.String `xml:"http://scap.nist.gov/schema/vulnerability/0.4 source"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_SourcesequencevulnerabilityReferenceTypeschema_Source_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SourcesequencevulnerabilityReferenceTypeschema_Source_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SourcesequencevulnerabilityReferenceTypeschema_Source_XsdtString_ instance.
func (me *XsdGoPkgHasElem_SourcesequencevulnerabilityReferenceTypeschema_Source_XsdtString_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_SourcesequencevulnerabilityReferenceTypeschema_Source_XsdtString_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_ReferencesequencevulnerabilityReferenceTypeschema_Reference_ScapCoreTreferenceType_ struct {
	Reference scap_core.TreferenceType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 reference"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_ReferencesequencevulnerabilityReferenceTypeschema_Reference_ScapCoreTreferenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReferencesequencevulnerabilityReferenceTypeschema_Reference_ScapCoreTreferenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ReferencesequencevulnerabilityReferenceTypeschema_Reference_ScapCoreTreferenceType_ instance.
func (me *XsdGoPkgHasElem_ReferencesequencevulnerabilityReferenceTypeschema_Reference_ScapCoreTreferenceType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_ReferencesequencevulnerabilityReferenceTypeschema_Reference_ScapCoreTreferenceType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type TvulnerabilityReferenceType struct {
	XsdGoPkgHasAttr_Deprecated_XsdtBoolean_

//	TODO: determine purpose
	XsdGoPkgHasElem_SourcesequencevulnerabilityReferenceTypeschema_Source_XsdtString_

	XsdGoPkgHasElem_ReferencesequencevulnerabilityReferenceTypeschema_Reference_ScapCoreTreferenceType_

	XsdGoPkgHasElem_NotessequencevulnerabilityReferenceTypeschema_Notes_ScapCoreTnotesType_

	xml.XsdGoPkgHasAttr_Lang

	XsdGoPkgHasAttr_ReferenceType_TvulnerabilityReferenceCategoryEnumType_

}

//	If the WalkHandlers.TvulnerabilityReferenceType function is not nil (ie. was set by outside code), calls it with this TvulnerabilityReferenceType instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TvulnerabilityReferenceType instance.
func (me *TvulnerabilityReferenceType) Walk () (err error) { 
	if fn := WalkHandlers.TvulnerabilityReferenceType; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.XsdGoPkgHasElem_SourcesequencevulnerabilityReferenceTypeschema_Source_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_ReferencesequencevulnerabilityReferenceTypeschema_Reference_ScapCoreTreferenceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_NotessequencevulnerabilityReferenceTypeschema_Notes_ScapCoreTnotesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_ReferencessequencevulnerabilityTypeschema_References_TvulnerabilityReferenceType_ struct {
	Referenceses []*TvulnerabilityReferenceType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 references"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_ReferencessequencevulnerabilityTypeschema_References_TvulnerabilityReferenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReferencessequencevulnerabilityTypeschema_References_TvulnerabilityReferenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReferencessequencevulnerabilityTypeschema_References_TvulnerabilityReferenceType_ instance.
func (me *XsdGoPkgHasElems_ReferencessequencevulnerabilityTypeschema_References_TvulnerabilityReferenceType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_ReferencessequencevulnerabilityTypeschema_References_TvulnerabilityReferenceType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		for _, x := range me.Referenceses { if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

//	A single fix action should only cover a single patch application, software update, configuration change, or external fix.  Dependencies should be documented by using the "next_fix_action" element to point to a recursive list of fix actions.
type TfixActionTypeEnumType xsdt.Token

//	Since TfixActionTypeEnumType is just a simple String type, this merely returns the current string value.
func (me TfixActionTypeEnumType) String () string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TfixActionTypeEnumType's alias type xsdt.Token.
func (me TfixActionTypeEnumType) ToXsdtToken () xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TfixActionTypeEnumType is "MITIGATION".
func (me TfixActionTypeEnumType) IsMitigation () bool { return me.String() == "MITIGATION" }

//	Returns true if the value of this enumerated TfixActionTypeEnumType is "REMEDIATION".
func (me TfixActionTypeEnumType) IsRemediation () bool { return me.String() == "REMEDIATION" }

//	Since TfixActionTypeEnumType is just a simple String type, this merely sets the current value from the specified string.
func (me *TfixActionTypeEnumType) Set (s string)  { (*xsdt.Token)(me).Set(s) }

type XsdGoPkgHasAttr_FixActionType_TfixActionTypeEnumType_ struct {
	FixActionType TfixActionTypeEnumType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 fix_action_type,attr"`

}

//	CPE name of the software update package.
type XsdGoPkgHasElems_SoftwareUpdatesequencefixActionTypeschema_SoftwareUpdate_ScapCoreTcpeNamePatternType_ struct {
//	CPE name of the software update package.
	SoftwareUpdates []scap_core.TcpeNamePatternType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 software-update"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_SoftwareUpdatesequencefixActionTypeschema_SoftwareUpdate_ScapCoreTcpeNamePatternType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SoftwareUpdatesequencefixActionTypeschema_SoftwareUpdate_ScapCoreTcpeNamePatternType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SoftwareUpdatesequencefixActionTypeschema_SoftwareUpdate_ScapCoreTcpeNamePatternType_ instance.
func (me *XsdGoPkgHasElems_SoftwareUpdatesequencefixActionTypeschema_SoftwareUpdate_ScapCoreTcpeNamePatternType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_SoftwareUpdatesequencefixActionTypeschema_SoftwareUpdate_ScapCoreTcpeNamePatternType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_NotessequencefixActionTypeschema_Notes_XsdtString_ struct {
	Noteses []xsdt.String `xml:"http://scap.nist.gov/schema/vulnerability/0.4 notes"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_NotessequencefixActionTypeschema_Notes_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NotessequencefixActionTypeschema_Notes_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NotessequencefixActionTypeschema_Notes_XsdtString_ instance.
func (me *XsdGoPkgHasElems_NotessequencefixActionTypeschema_Notes_XsdtString_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_NotessequencefixActionTypeschema_Notes_XsdtString_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

//	Describes or points to the check/test (either OVAL or other) that this particular fix action addresses.  E.G. applying this fix will change the value of this test result.
type XsdGoPkgHasElems_ApplicableChecksequencefixActionTypeschema_ApplicableCheck_ScapCoreTcheckReferenceType_ struct {
//	Describes or points to the check/test (either OVAL or other) that this particular fix action addresses.  E.G. applying this fix will change the value of this test result.
	ApplicableChecks []scap_core.TcheckReferenceType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 applicable-check"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_ApplicableChecksequencefixActionTypeschema_ApplicableCheck_ScapCoreTcheckReferenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ApplicableChecksequencefixActionTypeschema_ApplicableCheck_ScapCoreTcheckReferenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ApplicableChecksequencefixActionTypeschema_ApplicableCheck_ScapCoreTcheckReferenceType_ instance.
func (me *XsdGoPkgHasElems_ApplicableChecksequencefixActionTypeschema_ApplicableCheck_ScapCoreTcheckReferenceType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_ApplicableChecksequencefixActionTypeschema_ApplicableCheck_ScapCoreTcheckReferenceType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

//	Should be a URI-like -- e.g. inverted DNS address e.g mil.jtf-gno
type XsdGoPkgHasAttr_Source_XsdtAnyURI_ struct {
//	Should be a URI-like -- e.g. inverted DNS address e.g mil.jtf-gno
	Source xsdt.AnyURI `xml:"http://scap.nist.gov/schema/vulnerability/0.4 source,attr"`

}

type XsdGoPkgHasElem_ConfigurationRemediationsequencefixActionTypeschema_ConfigurationRemediation_TvulnerabilityReferenceType_ struct {
	ConfigurationRemediation *TvulnerabilityReferenceType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 configuration-remediation"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_ConfigurationRemediationsequencefixActionTypeschema_ConfigurationRemediation_TvulnerabilityReferenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ConfigurationRemediationsequencefixActionTypeschema_ConfigurationRemediation_TvulnerabilityReferenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ConfigurationRemediationsequencefixActionTypeschema_ConfigurationRemediation_TvulnerabilityReferenceType_ instance.
func (me *XsdGoPkgHasElem_ConfigurationRemediationsequencefixActionTypeschema_ConfigurationRemediation_TvulnerabilityReferenceType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_ConfigurationRemediationsequencefixActionTypeschema_ConfigurationRemediation_TvulnerabilityReferenceType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.ConfigurationRemediation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_NextFixActionsequencefixActionTypeschema_NextFixAction_TfixActionType_ struct {
	NextFixActions []*TfixActionType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 next-fix-action"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_NextFixActionsequencefixActionTypeschema_NextFixAction_TfixActionType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NextFixActionsequencefixActionTypeschema_NextFixAction_TfixActionType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NextFixActionsequencefixActionTypeschema_NextFixAction_TfixActionType_ instance.
func (me *XsdGoPkgHasElems_NextFixActionsequencefixActionTypeschema_NextFixAction_TfixActionType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_NextFixActionsequencefixActionTypeschema_NextFixAction_TfixActionType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_FixActionToolConfigurationsequencefixActionTypeschema_FixActionToolConfiguration_TtoolConfigurationType_ struct {
	FixActionToolConfigurations []*TtoolConfigurationType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 fix-action-tool-configuration"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_FixActionToolConfigurationsequencefixActionTypeschema_FixActionToolConfiguration_TtoolConfigurationType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FixActionToolConfigurationsequencefixActionTypeschema_FixActionToolConfiguration_TtoolConfigurationType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FixActionToolConfigurationsequencefixActionTypeschema_FixActionToolConfiguration_TtoolConfigurationType_ instance.
func (me *XsdGoPkgHasElems_FixActionToolConfigurationsequencefixActionTypeschema_FixActionToolConfiguration_TtoolConfigurationType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_FixActionToolConfigurationsequencefixActionTypeschema_FixActionToolConfiguration_TtoolConfigurationType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		for _, x := range me.FixActionToolConfigurations { if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_ApplicableConfigurationsequencefixActionTypeschema_ApplicableConfiguration_CpeLangTPlatformType_ struct {
	ApplicableConfigurations []cpe_lang.TPlatformType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 applicable-configuration"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_ApplicableConfigurationsequencefixActionTypeschema_ApplicableConfiguration_CpeLangTPlatformType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ApplicableConfigurationsequencefixActionTypeschema_ApplicableConfiguration_CpeLangTPlatformType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ApplicableConfigurationsequencefixActionTypeschema_ApplicableConfiguration_CpeLangTPlatformType_ instance.
func (me *XsdGoPkgHasElems_ApplicableConfigurationsequencefixActionTypeschema_ApplicableConfiguration_CpeLangTPlatformType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_ApplicableConfigurationsequencefixActionTypeschema_ApplicableConfiguration_CpeLangTPlatformType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

//	Unique value within the source.  Will be used with the source element to serve as a global unique identifier.
type XsdGoPkgHasAttr_Id_XsdtToken_ struct {
//	Unique value within the source.  Will be used with the source element to serve as a global unique identifier.
	Id xsdt.Token `xml:"http://scap.nist.gov/schema/vulnerability/0.4 id,attr"`

}

type XsdGoPkgHasElems_DeprecatedBysequencefixActionTypeschema_DeprecatedBy_ScapCoreTcpeNamePatternType_ struct {
	DeprecatedBies []scap_core.TcpeNamePatternType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 deprecated-by"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_DeprecatedBysequencefixActionTypeschema_DeprecatedBy_ScapCoreTcpeNamePatternType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DeprecatedBysequencefixActionTypeschema_DeprecatedBy_ScapCoreTcpeNamePatternType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DeprecatedBysequencefixActionTypeschema_DeprecatedBy_ScapCoreTcpeNamePatternType_ instance.
func (me *XsdGoPkgHasElems_DeprecatedBysequencefixActionTypeschema_DeprecatedBy_ScapCoreTcpeNamePatternType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_DeprecatedBysequencefixActionTypeschema_DeprecatedBy_ScapCoreTcpeNamePatternType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

//	States whether the fix action fully avoids the risk associated with the vulnerability or reduces risk to some extent.
type TfixEffectivenessEnumType xsdt.Token

//	Returns true if the value of this enumerated TfixEffectivenessEnumType is "PARTIAL".
func (me TfixEffectivenessEnumType) IsPartial () bool { return me.String() == "PARTIAL" }

//	Returns true if the value of this enumerated TfixEffectivenessEnumType is "COMPLETE".
func (me TfixEffectivenessEnumType) IsComplete () bool { return me.String() == "COMPLETE" }

//	Since TfixEffectivenessEnumType is just a simple String type, this merely sets the current value from the specified string.
func (me *TfixEffectivenessEnumType) Set (s string)  { (*xsdt.Token)(me).Set(s) }

//	Since TfixEffectivenessEnumType is just a simple String type, this merely returns the current string value.
func (me TfixEffectivenessEnumType) String () string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TfixEffectivenessEnumType's alias type xsdt.Token.
func (me TfixEffectivenessEnumType) ToXsdtToken () xsdt.Token { return xsdt.Token(me) }

type XsdGoPkgHasElem_EffectivenesssequencefixActionTypeschema_Effectiveness_TfixEffectivenessEnumType_ struct {
//	States whether the fix action fully avoids the risk associated with the vulnerability or reduces risk to some extent.
	Effectiveness TfixEffectivenessEnumType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 effectiveness"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_EffectivenesssequencefixActionTypeschema_Effectiveness_TfixEffectivenessEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EffectivenesssequencefixActionTypeschema_Effectiveness_TfixEffectivenessEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_EffectivenesssequencefixActionTypeschema_Effectiveness_TfixEffectivenessEnumType_ instance.
func (me *XsdGoPkgHasElem_EffectivenesssequencefixActionTypeschema_Effectiveness_TfixEffectivenessEnumType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_EffectivenesssequencefixActionTypeschema_Effectiveness_TfixEffectivenessEnumType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type TfixActionDescriptionEnumType xsdt.Token

//	Returns true if the value of this enumerated TfixActionDescriptionEnumType is "PATCH".
func (me TfixActionDescriptionEnumType) IsPatch () bool { return me.String() == "PATCH" }

//	Returns true if the value of this enumerated TfixActionDescriptionEnumType is "SOFTWARE_UPDATE".
func (me TfixActionDescriptionEnumType) IsSoftwareUpdate () bool { return me.String() == "SOFTWARE_UPDATE" }

//	Returns true if the value of this enumerated TfixActionDescriptionEnumType is "CONFIGURATION_CHANGE".
func (me TfixActionDescriptionEnumType) IsConfigurationChange () bool { return me.String() == "CONFIGURATION_CHANGE" }

//	Returns true if the value of this enumerated TfixActionDescriptionEnumType is "POLICY_CHANGE".
func (me TfixActionDescriptionEnumType) IsPolicyChange () bool { return me.String() == "POLICY_CHANGE" }

//	Returns true if the value of this enumerated TfixActionDescriptionEnumType is "EXTERNAL_MITIGATION".
func (me TfixActionDescriptionEnumType) IsExternalMitigation () bool { return me.String() == "EXTERNAL_MITIGATION" }

//	Since TfixActionDescriptionEnumType is just a simple String type, this merely sets the current value from the specified string.
func (me *TfixActionDescriptionEnumType) Set (s string)  { (*xsdt.Token)(me).Set(s) }

//	Since TfixActionDescriptionEnumType is just a simple String type, this merely returns the current string value.
func (me TfixActionDescriptionEnumType) String () string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TfixActionDescriptionEnumType's alias type xsdt.Token.
func (me TfixActionDescriptionEnumType) ToXsdtToken () xsdt.Token { return xsdt.Token(me) }

type XsdGoPkgHasAttr_FixActionDescription_TfixActionDescriptionEnumType_ struct {
	FixActionDescription TfixActionDescriptionEnumType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 fix_action_description,attr"`

}

type TfixActionType struct {
	XsdGoPkgHasElems_NotessequencefixActionTypeschema_Notes_XsdtString_

	XsdGoPkgHasAttr_FixActionType_TfixActionTypeEnumType_

//	CPE name of the software update package.
	XsdGoPkgHasElems_SoftwareUpdatesequencefixActionTypeschema_SoftwareUpdate_ScapCoreTcpeNamePatternType_

	XsdGoPkgHasElems_NextFixActionsequencefixActionTypeschema_NextFixAction_TfixActionType_

//	Describes or points to the check/test (either OVAL or other) that this particular fix action addresses.  E.G. applying this fix will change the value of this test result.
	XsdGoPkgHasElems_ApplicableChecksequencefixActionTypeschema_ApplicableCheck_ScapCoreTcheckReferenceType_

//	Should be a URI-like -- e.g. inverted DNS address e.g mil.jtf-gno
	XsdGoPkgHasAttr_Source_XsdtAnyURI_

	XsdGoPkgHasElem_ConfigurationRemediationsequencefixActionTypeschema_ConfigurationRemediation_TvulnerabilityReferenceType_

	XsdGoPkgHasElems_DeprecatedBysequencefixActionTypeschema_DeprecatedBy_ScapCoreTcpeNamePatternType_

	XsdGoPkgHasElems_FixActionToolConfigurationsequencefixActionTypeschema_FixActionToolConfiguration_TtoolConfigurationType_

	XsdGoPkgHasElems_ApplicableConfigurationsequencefixActionTypeschema_ApplicableConfiguration_CpeLangTPlatformType_

//	Unique value within the source.  Will be used with the source element to serve as a global unique identifier.
	XsdGoPkgHasAttr_Id_XsdtToken_

	patch.XsdGoPkgHasElem_Patch

	XsdGoPkgHasAttr_FixActionDescription_TfixActionDescriptionEnumType_

//	States whether the fix action fully avoids the risk associated with the vulnerability or reduces risk to some extent.
	XsdGoPkgHasElem_EffectivenesssequencefixActionTypeschema_Effectiveness_TfixEffectivenessEnumType_

}

//	If the WalkHandlers.TfixActionType function is not nil (ie. was set by outside code), calls it with this TfixActionType instance as the single argument. Then calls the Walk() method on 9/14 embed(s) and 0/0 field(s) belonging to this TfixActionType instance.
func (me *TfixActionType) Walk () (err error) { 
	if fn := WalkHandlers.TfixActionType; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.XsdGoPkgHasElems_SoftwareUpdatesequencefixActionTypeschema_SoftwareUpdate_ScapCoreTcpeNamePatternType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElems_NotessequencefixActionTypeschema_Notes_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_ConfigurationRemediationsequencefixActionTypeschema_ConfigurationRemediation_TvulnerabilityReferenceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElems_NextFixActionsequencefixActionTypeschema_NextFixAction_TfixActionType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElems_ApplicableChecksequencefixActionTypeschema_ApplicableCheck_ScapCoreTcheckReferenceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElems_DeprecatedBysequencefixActionTypeschema_DeprecatedBy_ScapCoreTcpeNamePatternType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElems_FixActionToolConfigurationsequencefixActionTypeschema_FixActionToolConfiguration_TtoolConfigurationType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElems_ApplicableConfigurationsequencefixActionTypeschema_ApplicableConfiguration_CpeLangTPlatformType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_EffectivenesssequencefixActionTypeschema_Effectiveness_TfixEffectivenessEnumType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_FixActionsequencevulnerabilityTypeschema_FixAction_TfixActionType_ struct {
	FixActions []*TfixActionType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 fix_action"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_FixActionsequencevulnerabilityTypeschema_FixAction_TfixActionType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FixActionsequencevulnerabilityTypeschema_FixAction_TfixActionType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FixActionsequencevulnerabilityTypeschema_FixAction_TfixActionType_ instance.
func (me *XsdGoPkgHasElems_FixActionsequencevulnerabilityTypeschema_FixAction_TfixActionType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_FixActionsequencevulnerabilityTypeschema_FixAction_TfixActionType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		for _, x := range me.FixActions { if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_VulnerableConfigurationsequencevulnerabilityTypeschema_VulnerableConfiguration_CpeLangTPlatformType_ struct {
	VulnerableConfigurations []cpe_lang.TPlatformType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 vulnerable-configuration"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_VulnerableConfigurationsequencevulnerabilityTypeschema_VulnerableConfiguration_CpeLangTPlatformType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_VulnerableConfigurationsequencevulnerabilityTypeschema_VulnerableConfiguration_CpeLangTPlatformType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_VulnerableConfigurationsequencevulnerabilityTypeschema_VulnerableConfiguration_CpeLangTPlatformType_ instance.
func (me *XsdGoPkgHasElems_VulnerableConfigurationsequencevulnerabilityTypeschema_VulnerableConfiguration_CpeLangTPlatformType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_VulnerableConfigurationsequencevulnerabilityTypeschema_VulnerableConfiguration_CpeLangTPlatformType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_DiscoveredDatetimesequencevulnerabilityTypeschema_DiscoveredDatetime_XsdtDateTime_ struct {
	DiscoveredDatetime xsdt.DateTime `xml:"http://scap.nist.gov/schema/vulnerability/0.4 discovered-datetime"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_DiscoveredDatetimesequencevulnerabilityTypeschema_DiscoveredDatetime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DiscoveredDatetimesequencevulnerabilityTypeschema_DiscoveredDatetime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DiscoveredDatetimesequencevulnerabilityTypeschema_DiscoveredDatetime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElem_DiscoveredDatetimesequencevulnerabilityTypeschema_DiscoveredDatetime_XsdtDateTime_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_DiscoveredDatetimesequencevulnerabilityTypeschema_DiscoveredDatetime_XsdtDateTime_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_ExploitPublishDatetimesequencevulnerabilityTypeschema_ExploitPublishDatetime_XsdtDateTime_ struct {
	ExploitPublishDatetime xsdt.DateTime `xml:"http://scap.nist.gov/schema/vulnerability/0.4 exploit-publish-datetime"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_ExploitPublishDatetimesequencevulnerabilityTypeschema_ExploitPublishDatetime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExploitPublishDatetimesequencevulnerabilityTypeschema_ExploitPublishDatetime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ExploitPublishDatetimesequencevulnerabilityTypeschema_ExploitPublishDatetime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElem_ExploitPublishDatetimesequencevulnerabilityTypeschema_ExploitPublishDatetime_XsdtDateTime_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_ExploitPublishDatetimesequencevulnerabilityTypeschema_ExploitPublishDatetime_XsdtDateTime_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_AssessmentChecksequencevulnerabilityTypeschema_AssessmentCheck_ScapCoreTcheckReferenceType_ struct {
	AssessmentChecks []scap_core.TcheckReferenceType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 assessment_check"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_AssessmentChecksequencevulnerabilityTypeschema_AssessmentCheck_ScapCoreTcheckReferenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AssessmentChecksequencevulnerabilityTypeschema_AssessmentCheck_ScapCoreTcheckReferenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AssessmentChecksequencevulnerabilityTypeschema_AssessmentCheck_ScapCoreTcheckReferenceType_ instance.
func (me *XsdGoPkgHasElems_AssessmentChecksequencevulnerabilityTypeschema_AssessmentCheck_ScapCoreTcheckReferenceType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_AssessmentChecksequencevulnerabilityTypeschema_AssessmentCheck_ScapCoreTcheckReferenceType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasAttr_Id_ScapCoreTcweNamePatternType_ struct {
	Id scap_core.TcweNamePatternType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 id,attr"`

}

type TcweReferenceType struct {
	XsdGoPkgHasAttr_Id_ScapCoreTcweNamePatternType_

}

//	If the WalkHandlers.TcweReferenceType function is not nil (ie. was set by outside code), calls it with this TcweReferenceType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TcweReferenceType instance.
func (me *TcweReferenceType) Walk () (err error) { 
	if fn := WalkHandlers.TcweReferenceType; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_CwesequencevulnerabilityTypeschema_Cwe_TcweReferenceType_ struct {
	Cwes []*TcweReferenceType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 cwe"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_CwesequencevulnerabilityTypeschema_Cwe_TcweReferenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CwesequencevulnerabilityTypeschema_Cwe_TcweReferenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CwesequencevulnerabilityTypeschema_Cwe_TcweReferenceType_ instance.
func (me *XsdGoPkgHasElems_CwesequencevulnerabilityTypeschema_Cwe_TcweReferenceType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_CwesequencevulnerabilityTypeschema_Cwe_TcweReferenceType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		for _, x := range me.Cwes { if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_SummarysequencevulnerabilityTypeschema_Summary_XsdtString_ struct {
	Summary xsdt.String `xml:"http://scap.nist.gov/schema/vulnerability/0.4 summary"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_SummarysequencevulnerabilityTypeschema_Summary_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SummarysequencevulnerabilityTypeschema_Summary_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SummarysequencevulnerabilityTypeschema_Summary_XsdtString_ instance.
func (me *XsdGoPkgHasElem_SummarysequencevulnerabilityTypeschema_Summary_XsdtString_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_SummarysequencevulnerabilityTypeschema_Summary_XsdtString_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

//	This element should ultimately be held in a threat model.
type XsdGoPkgHasElems_AttackScenariosequencevulnerabilityTypeschema_AttackScenario_ScapCoreTreferenceType_ struct {
//	This element should ultimately be held in a threat model.
	AttackScenarios []scap_core.TreferenceType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 attack_scenario"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_AttackScenariosequencevulnerabilityTypeschema_AttackScenario_ScapCoreTreferenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AttackScenariosequencevulnerabilityTypeschema_AttackScenario_ScapCoreTreferenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AttackScenariosequencevulnerabilityTypeschema_AttackScenario_ScapCoreTreferenceType_ instance.
func (me *XsdGoPkgHasElems_AttackScenariosequencevulnerabilityTypeschema_AttackScenario_ScapCoreTreferenceType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_AttackScenariosequencevulnerabilityTypeschema_AttackScenario_ScapCoreTreferenceType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type TvulnerabilityIdType xsdt.Token

//	Since TvulnerabilityIdType is just a simple String type, this merely sets the current value from the specified string.
func (me *TvulnerabilityIdType) Set (s string)  { (*xsdt.Token)(me).Set(s) }

//	Since TvulnerabilityIdType is just a simple String type, this merely returns the current string value.
func (me TvulnerabilityIdType) String () string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TvulnerabilityIdType's alias type xsdt.Token.
func (me TvulnerabilityIdType) ToXsdtToken () xsdt.Token { return xsdt.Token(me) }

type XsdGoPkgHasAttr_Id_TvulnerabilityIdType_ struct {
	Id TvulnerabilityIdType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 id,attr"`

}

type TvulnerabilityType struct {
	XsdGoPkgHasElem_CvsssequencevulnerabilityTypeschema_Cvss_Cvssv2TcvssImpactType_

	XsdGoPkgHasElem_VulnerableSoftwareListsequencevulnerabilityTypeschema_VulnerableSoftwareList_TvulnerableSoftwareType_

	XsdGoPkgHasElem_DisclosureDatetimesequencevulnerabilityTypeschema_DisclosureDatetime_XsdtDateTime_

//	Denotes a scanner and required configuration that is capable of detecting the referenced vulnerability.  May also be an OVAL definition and omit scanner name.
	XsdGoPkgHasElems_ScannersequencevulnerabilityTypeschema_Scanner_TtoolConfigurationType_

	XsdGoPkgHasElems_TechnicalDescriptionsequencevulnerabilityTypeschema_TechnicalDescription_ScapCoreTreferenceType_

	XsdGoPkgHasElem_OsvdbExtsequencevulnerabilityTypeschema_OsvdbExt_TosvdbExtensionType_

	XsdGoPkgHasElem_SecurityProtectionsequencevulnerabilityTypeschema_SecurityProtection_TsecurityProtectionType_

	XsdGoPkgHasElem_PublishedDatetimesequencevulnerabilityTypeschema_PublishedDatetime_XsdtDateTime_

	XsdGoPkgHasElem_LastModifiedDatetimesequencevulnerabilityTypeschema_LastModifiedDatetime_XsdtDateTime_

	XsdGoPkgHasElems_ReferencessequencevulnerabilityTypeschema_References_TvulnerabilityReferenceType_

	XsdGoPkgHasElems_FixActionsequencevulnerabilityTypeschema_FixAction_TfixActionType_

	XsdGoPkgHasElem_CveIdchoicesequencevulnerabilityTypeschema_CveId_CveTcveNamePatternType_

	XsdGoPkgHasElem_CceIdchoicesequencevulnerabilityTypeschema_CceId_CceTcceNamePatternType_

	XsdGoPkgHasElem_ExploitPublishDatetimesequencevulnerabilityTypeschema_ExploitPublishDatetime_XsdtDateTime_

	XsdGoPkgHasElems_AssessmentChecksequencevulnerabilityTypeschema_AssessmentCheck_ScapCoreTcheckReferenceType_

	XsdGoPkgHasElems_CwesequencevulnerabilityTypeschema_Cwe_TcweReferenceType_

	XsdGoPkgHasElem_SummarysequencevulnerabilityTypeschema_Summary_XsdtString_

//	This element should ultimately be held in a threat model.
	XsdGoPkgHasElems_AttackScenariosequencevulnerabilityTypeschema_AttackScenario_ScapCoreTreferenceType_

	XsdGoPkgHasAttr_Id_TvulnerabilityIdType_

	XsdGoPkgHasElems_VulnerableConfigurationsequencevulnerabilityTypeschema_VulnerableConfiguration_CpeLangTPlatformType_

	XsdGoPkgHasElem_DiscoveredDatetimesequencevulnerabilityTypeschema_DiscoveredDatetime_XsdtDateTime_

}

//	If the WalkHandlers.TvulnerabilityType function is not nil (ie. was set by outside code), calls it with this TvulnerabilityType instance as the single argument. Then calls the Walk() method on 20/21 embed(s) and 0/0 field(s) belonging to this TvulnerabilityType instance.
func (me *TvulnerabilityType) Walk () (err error) { 
	if fn := WalkHandlers.TvulnerabilityType; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.XsdGoPkgHasElem_VulnerableSoftwareListsequencevulnerabilityTypeschema_VulnerableSoftwareList_TvulnerableSoftwareType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_DisclosureDatetimesequencevulnerabilityTypeschema_DisclosureDatetime_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_CvsssequencevulnerabilityTypeschema_Cvss_Cvssv2TcvssImpactType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_OsvdbExtsequencevulnerabilityTypeschema_OsvdbExt_TosvdbExtensionType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_SecurityProtectionsequencevulnerabilityTypeschema_SecurityProtection_TsecurityProtectionType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElems_ScannersequencevulnerabilityTypeschema_Scanner_TtoolConfigurationType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElems_TechnicalDescriptionsequencevulnerabilityTypeschema_TechnicalDescription_ScapCoreTreferenceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_CveIdchoicesequencevulnerabilityTypeschema_CveId_CveTcveNamePatternType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_CceIdchoicesequencevulnerabilityTypeschema_CceId_CceTcceNamePatternType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_PublishedDatetimesequencevulnerabilityTypeschema_PublishedDatetime_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_LastModifiedDatetimesequencevulnerabilityTypeschema_LastModifiedDatetime_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElems_ReferencessequencevulnerabilityTypeschema_References_TvulnerabilityReferenceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElems_FixActionsequencevulnerabilityTypeschema_FixAction_TfixActionType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElems_VulnerableConfigurationsequencevulnerabilityTypeschema_VulnerableConfiguration_CpeLangTPlatformType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_DiscoveredDatetimesequencevulnerabilityTypeschema_DiscoveredDatetime_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_ExploitPublishDatetimesequencevulnerabilityTypeschema_ExploitPublishDatetime_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElems_AssessmentChecksequencevulnerabilityTypeschema_AssessmentCheck_ScapCoreTcheckReferenceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElems_CwesequencevulnerabilityTypeschema_Cwe_TcweReferenceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_SummarysequencevulnerabilityTypeschema_Summary_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElems_AttackScenariosequencevulnerabilityTypeschema_AttackScenario_ScapCoreTreferenceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_Vulnerability struct {
	Vulnerability *TvulnerabilityType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 vulnerability"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Vulnerability function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Vulnerability instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Vulnerability instance.
func (me *XsdGoPkgHasElem_Vulnerability) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Vulnerability; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.Vulnerability.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_Vulnerability struct {
	Vulnerabilities []*TvulnerabilityType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 vulnerability"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Vulnerability function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Vulnerability instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Vulnerability instance.
func (me *XsdGoPkgHasElems_Vulnerability) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Vulnerability; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		for _, x := range me.Vulnerabilities { if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_DisclosureDatetimesequencevulnerabilityTypeschema_DisclosureDatetime_XsdtDateTime_ struct {
	DisclosureDatetimes []xsdt.DateTime `xml:"http://scap.nist.gov/schema/vulnerability/0.4 disclosure-datetime"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_DisclosureDatetimesequencevulnerabilityTypeschema_DisclosureDatetime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DisclosureDatetimesequencevulnerabilityTypeschema_DisclosureDatetime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DisclosureDatetimesequencevulnerabilityTypeschema_DisclosureDatetime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElems_DisclosureDatetimesequencevulnerabilityTypeschema_DisclosureDatetime_XsdtDateTime_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_DisclosureDatetimesequencevulnerabilityTypeschema_DisclosureDatetime_XsdtDateTime_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_NotessequencevulnerabilityReferenceTypeschema_Notes_ScapCoreTnotesType_ struct {
	Noteses []scap_core.TnotesType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 notes"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_NotessequencevulnerabilityReferenceTypeschema_Notes_ScapCoreTnotesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NotessequencevulnerabilityReferenceTypeschema_Notes_ScapCoreTnotesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NotessequencevulnerabilityReferenceTypeschema_Notes_ScapCoreTnotesType_ instance.
func (me *XsdGoPkgHasElems_NotessequencevulnerabilityReferenceTypeschema_Notes_ScapCoreTnotesType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_NotessequencevulnerabilityReferenceTypeschema_Notes_ScapCoreTnotesType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_FixActionToolConfigurationsequencefixActionTypeschema_FixActionToolConfiguration_TtoolConfigurationType_ struct {
	FixActionToolConfiguration *TtoolConfigurationType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 fix-action-tool-configuration"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_FixActionToolConfigurationsequencefixActionTypeschema_FixActionToolConfiguration_TtoolConfigurationType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FixActionToolConfigurationsequencefixActionTypeschema_FixActionToolConfiguration_TtoolConfigurationType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FixActionToolConfigurationsequencefixActionTypeschema_FixActionToolConfiguration_TtoolConfigurationType_ instance.
func (me *XsdGoPkgHasElem_FixActionToolConfigurationsequencefixActionTypeschema_FixActionToolConfiguration_TtoolConfigurationType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_FixActionToolConfigurationsequencefixActionTypeschema_FixActionToolConfiguration_TtoolConfigurationType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.FixActionToolConfiguration.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_CceIdchoicesequencevulnerabilityTypeschema_CceId_CceTcceNamePatternType_ struct {
	CceIds []cce.TcceNamePatternType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 cce-id"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_CceIdchoicesequencevulnerabilityTypeschema_CceId_CceTcceNamePatternType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CceIdchoicesequencevulnerabilityTypeschema_CceId_CceTcceNamePatternType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CceIdchoicesequencevulnerabilityTypeschema_CceId_CceTcceNamePatternType_ instance.
func (me *XsdGoPkgHasElems_CceIdchoicesequencevulnerabilityTypeschema_CceId_CceTcceNamePatternType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_CceIdchoicesequencevulnerabilityTypeschema_CceId_CceTcceNamePatternType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_CvsssequencevulnerabilityTypeschema_Cvss_Cvssv2TcvssImpactType_ struct {
	Cvsses []cvssv2.TcvssImpactType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 cvss"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_CvsssequencevulnerabilityTypeschema_Cvss_Cvssv2TcvssImpactType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CvsssequencevulnerabilityTypeschema_Cvss_Cvssv2TcvssImpactType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CvsssequencevulnerabilityTypeschema_Cvss_Cvssv2TcvssImpactType_ instance.
func (me *XsdGoPkgHasElems_CvsssequencevulnerabilityTypeschema_Cvss_Cvssv2TcvssImpactType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_CvsssequencevulnerabilityTypeschema_Cvss_Cvssv2TcvssImpactType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_SummarysequencevulnerabilityTypeschema_Summary_XsdtString_ struct {
	Summaries []xsdt.String `xml:"http://scap.nist.gov/schema/vulnerability/0.4 summary"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_SummarysequencevulnerabilityTypeschema_Summary_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SummarysequencevulnerabilityTypeschema_Summary_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SummarysequencevulnerabilityTypeschema_Summary_XsdtString_ instance.
func (me *XsdGoPkgHasElems_SummarysequencevulnerabilityTypeschema_Summary_XsdtString_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_SummarysequencevulnerabilityTypeschema_Summary_XsdtString_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_VulnerableConfigurationsequencevulnerabilityTypeschema_VulnerableConfiguration_CpeLangTPlatformType_ struct {
	VulnerableConfiguration cpe_lang.TPlatformType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 vulnerable-configuration"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_VulnerableConfigurationsequencevulnerabilityTypeschema_VulnerableConfiguration_CpeLangTPlatformType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_VulnerableConfigurationsequencevulnerabilityTypeschema_VulnerableConfiguration_CpeLangTPlatformType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_VulnerableConfigurationsequencevulnerabilityTypeschema_VulnerableConfiguration_CpeLangTPlatformType_ instance.
func (me *XsdGoPkgHasElem_VulnerableConfigurationsequencevulnerabilityTypeschema_VulnerableConfiguration_CpeLangTPlatformType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_VulnerableConfigurationsequencevulnerabilityTypeschema_VulnerableConfiguration_CpeLangTPlatformType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_SecurityProtectionsequencevulnerabilityTypeschema_SecurityProtection_TsecurityProtectionType_ struct {
	SecurityProtections []TsecurityProtectionType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 security-protection"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_SecurityProtectionsequencevulnerabilityTypeschema_SecurityProtection_TsecurityProtectionType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SecurityProtectionsequencevulnerabilityTypeschema_SecurityProtection_TsecurityProtectionType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SecurityProtectionsequencevulnerabilityTypeschema_SecurityProtection_TsecurityProtectionType_ instance.
func (me *XsdGoPkgHasElems_SecurityProtectionsequencevulnerabilityTypeschema_SecurityProtection_TsecurityProtectionType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_SecurityProtectionsequencevulnerabilityTypeschema_SecurityProtection_TsecurityProtectionType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_NotessequencefixActionTypeschema_Notes_XsdtString_ struct {
	Notes xsdt.String `xml:"http://scap.nist.gov/schema/vulnerability/0.4 notes"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_NotessequencefixActionTypeschema_Notes_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NotessequencefixActionTypeschema_Notes_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NotessequencefixActionTypeschema_Notes_XsdtString_ instance.
func (me *XsdGoPkgHasElem_NotessequencefixActionTypeschema_Notes_XsdtString_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_NotessequencefixActionTypeschema_Notes_XsdtString_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

//	Denotes a scanner and required configuration that is capable of detecting the referenced vulnerability.  May also be an OVAL definition and omit scanner name.
type XsdGoPkgHasElem_ScannersequencevulnerabilityTypeschema_Scanner_TtoolConfigurationType_ struct {
//	Denotes a scanner and required configuration that is capable of detecting the referenced vulnerability.  May also be an OVAL definition and omit scanner name.
	Scanner *TtoolConfigurationType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 scanner"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_ScannersequencevulnerabilityTypeschema_Scanner_TtoolConfigurationType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ScannersequencevulnerabilityTypeschema_Scanner_TtoolConfigurationType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ScannersequencevulnerabilityTypeschema_Scanner_TtoolConfigurationType_ instance.
func (me *XsdGoPkgHasElem_ScannersequencevulnerabilityTypeschema_Scanner_TtoolConfigurationType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_ScannersequencevulnerabilityTypeschema_Scanner_TtoolConfigurationType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.Scanner.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_ExploitPublishDatetimesequencevulnerabilityTypeschema_ExploitPublishDatetime_XsdtDateTime_ struct {
	ExploitPublishDatetimes []xsdt.DateTime `xml:"http://scap.nist.gov/schema/vulnerability/0.4 exploit-publish-datetime"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_ExploitPublishDatetimesequencevulnerabilityTypeschema_ExploitPublishDatetime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExploitPublishDatetimesequencevulnerabilityTypeschema_ExploitPublishDatetime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExploitPublishDatetimesequencevulnerabilityTypeschema_ExploitPublishDatetime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElems_ExploitPublishDatetimesequencevulnerabilityTypeschema_ExploitPublishDatetime_XsdtDateTime_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_ExploitPublishDatetimesequencevulnerabilityTypeschema_ExploitPublishDatetime_XsdtDateTime_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_VulnerableSoftwareListsequencevulnerabilityTypeschema_VulnerableSoftwareList_TvulnerableSoftwareType_ struct {
	VulnerableSoftwareLists []*TvulnerableSoftwareType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 vulnerable-software-list"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_VulnerableSoftwareListsequencevulnerabilityTypeschema_VulnerableSoftwareList_TvulnerableSoftwareType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_VulnerableSoftwareListsequencevulnerabilityTypeschema_VulnerableSoftwareList_TvulnerableSoftwareType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_VulnerableSoftwareListsequencevulnerabilityTypeschema_VulnerableSoftwareList_TvulnerableSoftwareType_ instance.
func (me *XsdGoPkgHasElems_VulnerableSoftwareListsequencevulnerabilityTypeschema_VulnerableSoftwareList_TvulnerableSoftwareType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_VulnerableSoftwareListsequencevulnerabilityTypeschema_VulnerableSoftwareList_TvulnerableSoftwareType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		for _, x := range me.VulnerableSoftwareLists { if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_ApplicableConfigurationsequencefixActionTypeschema_ApplicableConfiguration_CpeLangTPlatformType_ struct {
	ApplicableConfiguration cpe_lang.TPlatformType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 applicable-configuration"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_ApplicableConfigurationsequencefixActionTypeschema_ApplicableConfiguration_CpeLangTPlatformType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ApplicableConfigurationsequencefixActionTypeschema_ApplicableConfiguration_CpeLangTPlatformType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ApplicableConfigurationsequencefixActionTypeschema_ApplicableConfiguration_CpeLangTPlatformType_ instance.
func (me *XsdGoPkgHasElem_ApplicableConfigurationsequencefixActionTypeschema_ApplicableConfiguration_CpeLangTPlatformType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_ApplicableConfigurationsequencefixActionTypeschema_ApplicableConfiguration_CpeLangTPlatformType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_ReferencessequencevulnerabilityTypeschema_References_TvulnerabilityReferenceType_ struct {
	References *TvulnerabilityReferenceType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 references"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_ReferencessequencevulnerabilityTypeschema_References_TvulnerabilityReferenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReferencessequencevulnerabilityTypeschema_References_TvulnerabilityReferenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ReferencessequencevulnerabilityTypeschema_References_TvulnerabilityReferenceType_ instance.
func (me *XsdGoPkgHasElem_ReferencessequencevulnerabilityTypeschema_References_TvulnerabilityReferenceType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_ReferencessequencevulnerabilityTypeschema_References_TvulnerabilityReferenceType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.References.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_ProductsequencevulnerableSoftwareTypeschema_Product_CpeLangTnamePattern_ struct {
	Product cpe_lang.TnamePattern `xml:"http://scap.nist.gov/schema/vulnerability/0.4 product"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_ProductsequencevulnerableSoftwareTypeschema_Product_CpeLangTnamePattern_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProductsequencevulnerableSoftwareTypeschema_Product_CpeLangTnamePattern_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ProductsequencevulnerableSoftwareTypeschema_Product_CpeLangTnamePattern_ instance.
func (me *XsdGoPkgHasElem_ProductsequencevulnerableSoftwareTypeschema_Product_CpeLangTnamePattern_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_ProductsequencevulnerableSoftwareTypeschema_Product_CpeLangTnamePattern_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

//	States whether the fix action fully avoids the risk associated with the vulnerability or reduces risk to some extent.
type XsdGoPkgHasElems_EffectivenesssequencefixActionTypeschema_Effectiveness_TfixEffectivenessEnumType_ struct {
//	States whether the fix action fully avoids the risk associated with the vulnerability or reduces risk to some extent.
	Effectivenesses []TfixEffectivenessEnumType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 effectiveness"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_EffectivenesssequencefixActionTypeschema_Effectiveness_TfixEffectivenessEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EffectivenesssequencefixActionTypeschema_Effectiveness_TfixEffectivenessEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EffectivenesssequencefixActionTypeschema_Effectiveness_TfixEffectivenessEnumType_ instance.
func (me *XsdGoPkgHasElems_EffectivenesssequencefixActionTypeschema_Effectiveness_TfixEffectivenessEnumType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_EffectivenesssequencefixActionTypeschema_Effectiveness_TfixEffectivenessEnumType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_CveIdchoicesequencevulnerabilityTypeschema_CveId_CveTcveNamePatternType_ struct {
	CveIds []cve.TcveNamePatternType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 cve-id"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_CveIdchoicesequencevulnerabilityTypeschema_CveId_CveTcveNamePatternType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CveIdchoicesequencevulnerabilityTypeschema_CveId_CveTcveNamePatternType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CveIdchoicesequencevulnerabilityTypeschema_CveId_CveTcveNamePatternType_ instance.
func (me *XsdGoPkgHasElems_CveIdchoicesequencevulnerabilityTypeschema_CveId_CveTcveNamePatternType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_CveIdchoicesequencevulnerabilityTypeschema_CveId_CveTcveNamePatternType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

//	Describes or points to the check/test (either OVAL or other) that this particular fix action addresses.  E.G. applying this fix will change the value of this test result.
type XsdGoPkgHasElem_ApplicableChecksequencefixActionTypeschema_ApplicableCheck_ScapCoreTcheckReferenceType_ struct {
//	Describes or points to the check/test (either OVAL or other) that this particular fix action addresses.  E.G. applying this fix will change the value of this test result.
	ApplicableCheck scap_core.TcheckReferenceType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 applicable-check"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_ApplicableChecksequencefixActionTypeschema_ApplicableCheck_ScapCoreTcheckReferenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ApplicableChecksequencefixActionTypeschema_ApplicableCheck_ScapCoreTcheckReferenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ApplicableChecksequencefixActionTypeschema_ApplicableCheck_ScapCoreTcheckReferenceType_ instance.
func (me *XsdGoPkgHasElem_ApplicableChecksequencefixActionTypeschema_ApplicableCheck_ScapCoreTcheckReferenceType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_ApplicableChecksequencefixActionTypeschema_ApplicableCheck_ScapCoreTcheckReferenceType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

//	The CPE name of the scanning tool.  A value must be supplied for this element.  The CPE name can be used for a CPE from the NVD.  The CPE title attribute can be used for internal naming conventions. (or both, if possible)
type XsdGoPkgHasElems_NamesequencetoolConfigurationTypeschema_Name_ScapCoreTcpeNamePatternType_ struct {
//	The CPE name of the scanning tool.  A value must be supplied for this element.  The CPE name can be used for a CPE from the NVD.  The CPE title attribute can be used for internal naming conventions. (or both, if possible)
	Names []scap_core.TcpeNamePatternType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 name"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_NamesequencetoolConfigurationTypeschema_Name_ScapCoreTcpeNamePatternType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NamesequencetoolConfigurationTypeschema_Name_ScapCoreTcpeNamePatternType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NamesequencetoolConfigurationTypeschema_Name_ScapCoreTcpeNamePatternType_ instance.
func (me *XsdGoPkgHasElems_NamesequencetoolConfigurationTypeschema_Name_ScapCoreTcpeNamePatternType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_NamesequencetoolConfigurationTypeschema_Name_ScapCoreTcpeNamePatternType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_OsvdbExtsequencevulnerabilityTypeschema_OsvdbExt_TosvdbExtensionType_ struct {
	OsvdbExts []*TosvdbExtensionType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 osvdb-ext"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_OsvdbExtsequencevulnerabilityTypeschema_OsvdbExt_TosvdbExtensionType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OsvdbExtsequencevulnerabilityTypeschema_OsvdbExt_TosvdbExtensionType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OsvdbExtsequencevulnerabilityTypeschema_OsvdbExt_TosvdbExtensionType_ instance.
func (me *XsdGoPkgHasElems_OsvdbExtsequencevulnerabilityTypeschema_OsvdbExt_TosvdbExtensionType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_OsvdbExtsequencevulnerabilityTypeschema_OsvdbExt_TosvdbExtensionType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		for _, x := range me.OsvdbExts { if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_DeprecatedBysequencefixActionTypeschema_DeprecatedBy_ScapCoreTcpeNamePatternType_ struct {
	DeprecatedBy scap_core.TcpeNamePatternType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 deprecated-by"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_DeprecatedBysequencefixActionTypeschema_DeprecatedBy_ScapCoreTcpeNamePatternType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DeprecatedBysequencefixActionTypeschema_DeprecatedBy_ScapCoreTcpeNamePatternType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DeprecatedBysequencefixActionTypeschema_DeprecatedBy_ScapCoreTcpeNamePatternType_ instance.
func (me *XsdGoPkgHasElem_DeprecatedBysequencefixActionTypeschema_DeprecatedBy_ScapCoreTcpeNamePatternType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_DeprecatedBysequencefixActionTypeschema_DeprecatedBy_ScapCoreTcpeNamePatternType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_UnknownsequenceassociatedExploitLocationTypeschema_Unknown_XsdtBoolean_False struct {
	Unknowns []xsdt.Boolean `xml:"http://scap.nist.gov/schema/vulnerability/0.4 unknown"`

}

//	Returns the default value for Unknown -- false
func (me XsdGoPkgHasElems_UnknownsequenceassociatedExploitLocationTypeschema_Unknown_XsdtBoolean_False) UnknownDefault () xsdt.Boolean { return xsdt.Boolean(false) }

//	If the WalkHandlers.XsdGoPkgHasElems_UnknownsequenceassociatedExploitLocationTypeschema_Unknown_XsdtBoolean_False function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UnknownsequenceassociatedExploitLocationTypeschema_Unknown_XsdtBoolean_False instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UnknownsequenceassociatedExploitLocationTypeschema_Unknown_XsdtBoolean_False instance.
func (me *XsdGoPkgHasElems_UnknownsequenceassociatedExploitLocationTypeschema_Unknown_XsdtBoolean_False) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_UnknownsequenceassociatedExploitLocationTypeschema_Unknown_XsdtBoolean_False; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

//	Defines required signature or policy definition that must be installed on the tool.
type XsdGoPkgHasElem_DefinitionsequencetoolConfigurationTypeschema_Definition_ScapCoreTcheckReferenceType_ struct {
//	Defines required signature or policy definition that must be installed on the tool.
	Definition scap_core.TcheckReferenceType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 definition"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_DefinitionsequencetoolConfigurationTypeschema_Definition_ScapCoreTcheckReferenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DefinitionsequencetoolConfigurationTypeschema_Definition_ScapCoreTcheckReferenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DefinitionsequencetoolConfigurationTypeschema_Definition_ScapCoreTcheckReferenceType_ instance.
func (me *XsdGoPkgHasElem_DefinitionsequencetoolConfigurationTypeschema_Definition_ScapCoreTcheckReferenceType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_DefinitionsequencetoolConfigurationTypeschema_Definition_ScapCoreTcheckReferenceType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_PublishedDatetimesequencevulnerabilityTypeschema_PublishedDatetime_XsdtDateTime_ struct {
	PublishedDatetimes []xsdt.DateTime `xml:"http://scap.nist.gov/schema/vulnerability/0.4 published-datetime"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_PublishedDatetimesequencevulnerabilityTypeschema_PublishedDatetime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PublishedDatetimesequencevulnerabilityTypeschema_PublishedDatetime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PublishedDatetimesequencevulnerabilityTypeschema_PublishedDatetime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElems_PublishedDatetimesequencevulnerabilityTypeschema_PublishedDatetime_XsdtDateTime_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_PublishedDatetimesequencevulnerabilityTypeschema_PublishedDatetime_XsdtDateTime_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_CwesequencevulnerabilityTypeschema_Cwe_TcweReferenceType_ struct {
	Cwe *TcweReferenceType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 cwe"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_CwesequencevulnerabilityTypeschema_Cwe_TcweReferenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CwesequencevulnerabilityTypeschema_Cwe_TcweReferenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CwesequencevulnerabilityTypeschema_Cwe_TcweReferenceType_ instance.
func (me *XsdGoPkgHasElem_CwesequencevulnerabilityTypeschema_Cwe_TcweReferenceType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_CwesequencevulnerabilityTypeschema_Cwe_TcweReferenceType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.Cwe.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_TechnicalDescriptionsequencevulnerabilityTypeschema_TechnicalDescription_ScapCoreTreferenceType_ struct {
	TechnicalDescription scap_core.TreferenceType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 technical_description"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_TechnicalDescriptionsequencevulnerabilityTypeschema_TechnicalDescription_ScapCoreTreferenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TechnicalDescriptionsequencevulnerabilityTypeschema_TechnicalDescription_ScapCoreTreferenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TechnicalDescriptionsequencevulnerabilityTypeschema_TechnicalDescription_ScapCoreTreferenceType_ instance.
func (me *XsdGoPkgHasElem_TechnicalDescriptionsequencevulnerabilityTypeschema_TechnicalDescription_ScapCoreTreferenceType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_TechnicalDescriptionsequencevulnerabilityTypeschema_TechnicalDescription_ScapCoreTreferenceType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_AssessmentChecksequencevulnerabilityTypeschema_AssessmentCheck_ScapCoreTcheckReferenceType_ struct {
	AssessmentCheck scap_core.TcheckReferenceType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 assessment_check"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_AssessmentChecksequencevulnerabilityTypeschema_AssessmentCheck_ScapCoreTcheckReferenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AssessmentChecksequencevulnerabilityTypeschema_AssessmentCheck_ScapCoreTcheckReferenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AssessmentChecksequencevulnerabilityTypeschema_AssessmentCheck_ScapCoreTcheckReferenceType_ instance.
func (me *XsdGoPkgHasElem_AssessmentChecksequencevulnerabilityTypeschema_AssessmentCheck_ScapCoreTcheckReferenceType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_AssessmentChecksequencevulnerabilityTypeschema_AssessmentCheck_ScapCoreTcheckReferenceType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_ConfigurationRemediationsequencefixActionTypeschema_ConfigurationRemediation_TvulnerabilityReferenceType_ struct {
	ConfigurationRemediations []*TvulnerabilityReferenceType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 configuration-remediation"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_ConfigurationRemediationsequencefixActionTypeschema_ConfigurationRemediation_TvulnerabilityReferenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ConfigurationRemediationsequencefixActionTypeschema_ConfigurationRemediation_TvulnerabilityReferenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ConfigurationRemediationsequencefixActionTypeschema_ConfigurationRemediation_TvulnerabilityReferenceType_ instance.
func (me *XsdGoPkgHasElems_ConfigurationRemediationsequencefixActionTypeschema_ConfigurationRemediation_TvulnerabilityReferenceType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_ConfigurationRemediationsequencefixActionTypeschema_ConfigurationRemediation_TvulnerabilityReferenceType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		for _, x := range me.ConfigurationRemediations { if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_LastModifiedDatetimesequencevulnerabilityTypeschema_LastModifiedDatetime_XsdtDateTime_ struct {
	LastModifiedDatetimes []xsdt.DateTime `xml:"http://scap.nist.gov/schema/vulnerability/0.4 last-modified-datetime"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_LastModifiedDatetimesequencevulnerabilityTypeschema_LastModifiedDatetime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LastModifiedDatetimesequencevulnerabilityTypeschema_LastModifiedDatetime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LastModifiedDatetimesequencevulnerabilityTypeschema_LastModifiedDatetime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElems_LastModifiedDatetimesequencevulnerabilityTypeschema_LastModifiedDatetime_XsdtDateTime_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_LastModifiedDatetimesequencevulnerabilityTypeschema_LastModifiedDatetime_XsdtDateTime_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_NextFixActionsequencefixActionTypeschema_NextFixAction_TfixActionType_ struct {
	NextFixAction *TfixActionType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 next-fix-action"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_NextFixActionsequencefixActionTypeschema_NextFixAction_TfixActionType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NextFixActionsequencefixActionTypeschema_NextFixAction_TfixActionType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_NextFixActionsequencefixActionTypeschema_NextFixAction_TfixActionType_ instance.
func (me *XsdGoPkgHasElem_NextFixActionsequencefixActionTypeschema_NextFixAction_TfixActionType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_NextFixActionsequencefixActionTypeschema_NextFixAction_TfixActionType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.NextFixAction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_VoluntarilyInteractsequenceassociatedExploitLocationTypeschema_VoluntarilyInteract_XsdtBoolean_False struct {
	VoluntarilyInteracts []xsdt.Boolean `xml:"http://scap.nist.gov/schema/vulnerability/0.4 voluntarily-interact"`

}

//	Returns the default value for VoluntarilyInteract -- false
func (me XsdGoPkgHasElems_VoluntarilyInteractsequenceassociatedExploitLocationTypeschema_VoluntarilyInteract_XsdtBoolean_False) VoluntarilyInteractDefault () xsdt.Boolean { return xsdt.Boolean(false) }

//	If the WalkHandlers.XsdGoPkgHasElems_VoluntarilyInteractsequenceassociatedExploitLocationTypeschema_VoluntarilyInteract_XsdtBoolean_False function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_VoluntarilyInteractsequenceassociatedExploitLocationTypeschema_VoluntarilyInteract_XsdtBoolean_False instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_VoluntarilyInteractsequenceassociatedExploitLocationTypeschema_VoluntarilyInteract_XsdtBoolean_False instance.
func (me *XsdGoPkgHasElems_VoluntarilyInteractsequenceassociatedExploitLocationTypeschema_VoluntarilyInteract_XsdtBoolean_False) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_VoluntarilyInteractsequenceassociatedExploitLocationTypeschema_VoluntarilyInteract_XsdtBoolean_False; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_ExploitLocationsequenceosvdbExtensionTypeschema_ExploitLocation_TassociatedExploitLocationType_ struct {
	ExploitLocations []*TassociatedExploitLocationType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 exploit-location"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_ExploitLocationsequenceosvdbExtensionTypeschema_ExploitLocation_TassociatedExploitLocationType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExploitLocationsequenceosvdbExtensionTypeschema_ExploitLocation_TassociatedExploitLocationType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExploitLocationsequenceosvdbExtensionTypeschema_ExploitLocation_TassociatedExploitLocationType_ instance.
func (me *XsdGoPkgHasElems_ExploitLocationsequenceosvdbExtensionTypeschema_ExploitLocation_TassociatedExploitLocationType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_ExploitLocationsequenceosvdbExtensionTypeschema_ExploitLocation_TassociatedExploitLocationType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		for _, x := range me.ExploitLocations { if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_PhysicalAccesssequenceassociatedExploitLocationTypeschema_PhysicalAccess_XsdtBoolean_False struct {
	PhysicalAccesses []xsdt.Boolean `xml:"http://scap.nist.gov/schema/vulnerability/0.4 physical-access"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_PhysicalAccesssequenceassociatedExploitLocationTypeschema_PhysicalAccess_XsdtBoolean_False function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PhysicalAccesssequenceassociatedExploitLocationTypeschema_PhysicalAccess_XsdtBoolean_False instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PhysicalAccesssequenceassociatedExploitLocationTypeschema_PhysicalAccess_XsdtBoolean_False instance.
func (me *XsdGoPkgHasElems_PhysicalAccesssequenceassociatedExploitLocationTypeschema_PhysicalAccess_XsdtBoolean_False) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_PhysicalAccesssequenceassociatedExploitLocationTypeschema_PhysicalAccess_XsdtBoolean_False; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

//	Returns the default value for PhysicalAccess -- false
func (me XsdGoPkgHasElems_PhysicalAccesssequenceassociatedExploitLocationTypeschema_PhysicalAccess_XsdtBoolean_False) PhysicalAccessDefault () xsdt.Boolean { return xsdt.Boolean(false) }

//	CPE name of the software update package.
type XsdGoPkgHasElem_SoftwareUpdatesequencefixActionTypeschema_SoftwareUpdate_ScapCoreTcpeNamePatternType_ struct {
//	CPE name of the software update package.
	SoftwareUpdate scap_core.TcpeNamePatternType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 software-update"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_SoftwareUpdatesequencefixActionTypeschema_SoftwareUpdate_ScapCoreTcpeNamePatternType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SoftwareUpdatesequencefixActionTypeschema_SoftwareUpdate_ScapCoreTcpeNamePatternType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SoftwareUpdatesequencefixActionTypeschema_SoftwareUpdate_ScapCoreTcpeNamePatternType_ instance.
func (me *XsdGoPkgHasElem_SoftwareUpdatesequencefixActionTypeschema_SoftwareUpdate_ScapCoreTcpeNamePatternType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_SoftwareUpdatesequencefixActionTypeschema_SoftwareUpdate_ScapCoreTcpeNamePatternType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_FixActionsequencevulnerabilityTypeschema_FixAction_TfixActionType_ struct {
	FixAction *TfixActionType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 fix_action"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_FixActionsequencevulnerabilityTypeschema_FixAction_TfixActionType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FixActionsequencevulnerabilityTypeschema_FixAction_TfixActionType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FixActionsequencevulnerabilityTypeschema_FixAction_TfixActionType_ instance.
func (me *XsdGoPkgHasElem_FixActionsequencevulnerabilityTypeschema_FixAction_TfixActionType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_FixActionsequencevulnerabilityTypeschema_FixAction_TfixActionType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.FixAction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_ReferencesequencevulnerabilityReferenceTypeschema_Reference_ScapCoreTreferenceType_ struct {
	References []scap_core.TreferenceType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 reference"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_ReferencesequencevulnerabilityReferenceTypeschema_Reference_ScapCoreTreferenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReferencesequencevulnerabilityReferenceTypeschema_Reference_ScapCoreTreferenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReferencesequencevulnerabilityReferenceTypeschema_Reference_ScapCoreTreferenceType_ instance.
func (me *XsdGoPkgHasElems_ReferencesequencevulnerabilityReferenceTypeschema_Reference_ScapCoreTreferenceType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_ReferencesequencevulnerabilityReferenceTypeschema_Reference_ScapCoreTreferenceType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

//	This element should ultimately be held in a threat model.
type XsdGoPkgHasElem_AttackScenariosequencevulnerabilityTypeschema_AttackScenario_ScapCoreTreferenceType_ struct {
//	This element should ultimately be held in a threat model.
	AttackScenario scap_core.TreferenceType `xml:"http://scap.nist.gov/schema/vulnerability/0.4 attack_scenario"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_AttackScenariosequencevulnerabilityTypeschema_AttackScenario_ScapCoreTreferenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AttackScenariosequencevulnerabilityTypeschema_AttackScenario_ScapCoreTreferenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AttackScenariosequencevulnerabilityTypeschema_AttackScenario_ScapCoreTreferenceType_ instance.
func (me *XsdGoPkgHasElem_AttackScenariosequencevulnerabilityTypeschema_AttackScenario_ScapCoreTreferenceType_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_AttackScenariosequencevulnerabilityTypeschema_AttackScenario_ScapCoreTreferenceType_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`

}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_DiscoveredDatetimesequencevulnerabilityTypeschema_DiscoveredDatetime_XsdtDateTime_ struct {
	DiscoveredDatetimes []xsdt.DateTime `xml:"http://scap.nist.gov/schema/vulnerability/0.4 discovered-datetime"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_DiscoveredDatetimesequencevulnerabilityTypeschema_DiscoveredDatetime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DiscoveredDatetimesequencevulnerabilityTypeschema_DiscoveredDatetime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DiscoveredDatetimesequencevulnerabilityTypeschema_DiscoveredDatetime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElems_DiscoveredDatetimesequencevulnerabilityTypeschema_DiscoveredDatetime_XsdtDateTime_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_DiscoveredDatetimesequencevulnerabilityTypeschema_DiscoveredDatetime_XsdtDateTime_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_DialupsequenceassociatedExploitLocationTypeschema_Dialup_XsdtBoolean_False struct {
	Dialups []xsdt.Boolean `xml:"http://scap.nist.gov/schema/vulnerability/0.4 dialup"`

}

//	Returns the default value for Dialup -- false
func (me XsdGoPkgHasElems_DialupsequenceassociatedExploitLocationTypeschema_Dialup_XsdtBoolean_False) DialupDefault () xsdt.Boolean { return xsdt.Boolean(false) }

//	If the WalkHandlers.XsdGoPkgHasElems_DialupsequenceassociatedExploitLocationTypeschema_Dialup_XsdtBoolean_False function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DialupsequenceassociatedExploitLocationTypeschema_Dialup_XsdtBoolean_False instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DialupsequenceassociatedExploitLocationTypeschema_Dialup_XsdtBoolean_False instance.
func (me *XsdGoPkgHasElems_DialupsequenceassociatedExploitLocationTypeschema_Dialup_XsdtBoolean_False) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_DialupsequenceassociatedExploitLocationTypeschema_Dialup_XsdtBoolean_False; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

//	TODO: determine purpose
type XsdGoPkgHasElems_SourcesequencevulnerabilityReferenceTypeschema_Source_XsdtString_ struct {
//	TODO: determine purpose
	Sources []xsdt.String `xml:"http://scap.nist.gov/schema/vulnerability/0.4 source"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_SourcesequencevulnerabilityReferenceTypeschema_Source_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SourcesequencevulnerabilityReferenceTypeschema_Source_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SourcesequencevulnerabilityReferenceTypeschema_Source_XsdtString_ instance.
func (me *XsdGoPkgHasElems_SourcesequencevulnerabilityReferenceTypeschema_Source_XsdtString_) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_SourcesequencevulnerabilityReferenceTypeschema_Source_XsdtString_; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors          []error
	//	Your custom error-handling function, if required.
	WalkOnError         func(error)
	//	Provides 91 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers        = &XsdGoPkgWalkHandlers {}
)

//	Provides 91 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElem_VoluntarilyInteractsequenceassociatedExploitLocationTypeschema_VoluntarilyInteract_XsdtBoolean_False func (*XsdGoPkgHasElem_VoluntarilyInteractsequenceassociatedExploitLocationTypeschema_VoluntarilyInteract_XsdtBoolean_False, bool) (error)
	TvulnerabilityReferenceType func (*TvulnerabilityReferenceType, bool) (error)
	XsdGoPkgHasElems_CceIdchoicesequencevulnerabilityTypeschema_CceId_CceTcceNamePatternType_ func (*XsdGoPkgHasElems_CceIdchoicesequencevulnerabilityTypeschema_CceId_CceTcceNamePatternType_, bool) (error)
	XsdGoPkgHasElem_FixActionsequencevulnerabilityTypeschema_FixAction_TfixActionType_ func (*XsdGoPkgHasElem_FixActionsequencevulnerabilityTypeschema_FixAction_TfixActionType_, bool) (error)
	XsdGoPkgHasElems_DefinitionsequencetoolConfigurationTypeschema_Definition_ScapCoreTcheckReferenceType_ func (*XsdGoPkgHasElems_DefinitionsequencetoolConfigurationTypeschema_Definition_ScapCoreTcheckReferenceType_, bool) (error)
	XsdGoPkgHasElem_LastModifiedDatetimesequencevulnerabilityTypeschema_LastModifiedDatetime_XsdtDateTime_ func (*XsdGoPkgHasElem_LastModifiedDatetimesequencevulnerabilityTypeschema_LastModifiedDatetime_XsdtDateTime_, bool) (error)
	XsdGoPkgHasElems_ReferencessequencevulnerabilityTypeschema_References_TvulnerabilityReferenceType_ func (*XsdGoPkgHasElems_ReferencessequencevulnerabilityTypeschema_References_TvulnerabilityReferenceType_, bool) (error)
	XsdGoPkgHasElems_ExploitPublishDatetimesequencevulnerabilityTypeschema_ExploitPublishDatetime_XsdtDateTime_ func (*XsdGoPkgHasElems_ExploitPublishDatetimesequencevulnerabilityTypeschema_ExploitPublishDatetime_XsdtDateTime_, bool) (error)
	XsdGoPkgHasElem_ApplicableConfigurationsequencefixActionTypeschema_ApplicableConfiguration_CpeLangTPlatformType_ func (*XsdGoPkgHasElem_ApplicableConfigurationsequencefixActionTypeschema_ApplicableConfiguration_CpeLangTPlatformType_, bool) (error)
	XsdGoPkgHasElem_DefinitionsequencetoolConfigurationTypeschema_Definition_ScapCoreTcheckReferenceType_ func (*XsdGoPkgHasElem_DefinitionsequencetoolConfigurationTypeschema_Definition_ScapCoreTcheckReferenceType_, bool) (error)
	TassociatedExploitLocationType func (*TassociatedExploitLocationType, bool) (error)
	XsdGoPkgHasElems_ScannersequencevulnerabilityTypeschema_Scanner_TtoolConfigurationType_ func (*XsdGoPkgHasElems_ScannersequencevulnerabilityTypeschema_Scanner_TtoolConfigurationType_, bool) (error)
	XsdGoPkgHasElems_SummarysequencevulnerabilityTypeschema_Summary_XsdtString_ func (*XsdGoPkgHasElems_SummarysequencevulnerabilityTypeschema_Summary_XsdtString_, bool) (error)
	XsdGoPkgHasElems_PublishedDatetimesequencevulnerabilityTypeschema_PublishedDatetime_XsdtDateTime_ func (*XsdGoPkgHasElems_PublishedDatetimesequencevulnerabilityTypeschema_PublishedDatetime_XsdtDateTime_, bool) (error)
	XsdGoPkgHasCdata func (*XsdGoPkgHasCdata, bool) (error)
	XsdGoPkgHasElem_CceIdchoicesequencevulnerabilityTypeschema_CceId_CceTcceNamePatternType_ func (*XsdGoPkgHasElem_CceIdchoicesequencevulnerabilityTypeschema_CceId_CceTcceNamePatternType_, bool) (error)
	XsdGoPkgHasElem_ExploitPublishDatetimesequencevulnerabilityTypeschema_ExploitPublishDatetime_XsdtDateTime_ func (*XsdGoPkgHasElem_ExploitPublishDatetimesequencevulnerabilityTypeschema_ExploitPublishDatetime_XsdtDateTime_, bool) (error)
	XsdGoPkgHasElem_ProductsequencevulnerableSoftwareTypeschema_Product_CpeLangTnamePattern_ func (*XsdGoPkgHasElem_ProductsequencevulnerableSoftwareTypeschema_Product_CpeLangTnamePattern_, bool) (error)
	XsdGoPkgHasElem_ApplicableChecksequencefixActionTypeschema_ApplicableCheck_ScapCoreTcheckReferenceType_ func (*XsdGoPkgHasElem_ApplicableChecksequencefixActionTypeschema_ApplicableCheck_ScapCoreTcheckReferenceType_, bool) (error)
	XsdGoPkgHasElem_CwesequencevulnerabilityTypeschema_Cwe_TcweReferenceType_ func (*XsdGoPkgHasElem_CwesequencevulnerabilityTypeschema_Cwe_TcweReferenceType_, bool) (error)
	XsdGoPkgHasElems_DialupsequenceassociatedExploitLocationTypeschema_Dialup_XsdtBoolean_False func (*XsdGoPkgHasElems_DialupsequenceassociatedExploitLocationTypeschema_Dialup_XsdtBoolean_False, bool) (error)
	XsdGoPkgHasElems_SoftwareUpdatesequencefixActionTypeschema_SoftwareUpdate_ScapCoreTcpeNamePatternType_ func (*XsdGoPkgHasElems_SoftwareUpdatesequencefixActionTypeschema_SoftwareUpdate_ScapCoreTcpeNamePatternType_, bool) (error)
	XsdGoPkgHasElem_ScannersequencevulnerabilityTypeschema_Scanner_TtoolConfigurationType_ func (*XsdGoPkgHasElem_ScannersequencevulnerabilityTypeschema_Scanner_TtoolConfigurationType_, bool) (error)
	XsdGoPkgHasElems_NextFixActionsequencefixActionTypeschema_NextFixAction_TfixActionType_ func (*XsdGoPkgHasElems_NextFixActionsequencefixActionTypeschema_NextFixAction_TfixActionType_, bool) (error)
	XsdGoPkgHasElem_VulnerableConfigurationsequencevulnerabilityTypeschema_VulnerableConfiguration_CpeLangTPlatformType_ func (*XsdGoPkgHasElem_VulnerableConfigurationsequencevulnerabilityTypeschema_VulnerableConfiguration_CpeLangTPlatformType_, bool) (error)
	XsdGoPkgHasElems_SecurityProtectionsequencevulnerabilityTypeschema_SecurityProtection_TsecurityProtectionType_ func (*XsdGoPkgHasElems_SecurityProtectionsequencevulnerabilityTypeschema_SecurityProtection_TsecurityProtectionType_, bool) (error)
	XsdGoPkgHasElems_OsvdbExtsequencevulnerabilityTypeschema_OsvdbExt_TosvdbExtensionType_ func (*XsdGoPkgHasElems_OsvdbExtsequencevulnerabilityTypeschema_OsvdbExt_TosvdbExtensionType_, bool) (error)
	XsdGoPkgHasElem_TechnicalDescriptionsequencevulnerabilityTypeschema_TechnicalDescription_ScapCoreTreferenceType_ func (*XsdGoPkgHasElem_TechnicalDescriptionsequencevulnerabilityTypeschema_TechnicalDescription_ScapCoreTreferenceType_, bool) (error)
	XsdGoPkgHasElem_AssessmentChecksequencevulnerabilityTypeschema_AssessmentCheck_ScapCoreTcheckReferenceType_ func (*XsdGoPkgHasElem_AssessmentChecksequencevulnerabilityTypeschema_AssessmentCheck_ScapCoreTcheckReferenceType_, bool) (error)
	XsdGoPkgHasElem_VulnerableSoftwareListsequencevulnerabilityTypeschema_VulnerableSoftwareList_TvulnerableSoftwareType_ func (*XsdGoPkgHasElem_VulnerableSoftwareListsequencevulnerabilityTypeschema_VulnerableSoftwareList_TvulnerableSoftwareType_, bool) (error)
	TtoolConfigurationType func (*TtoolConfigurationType, bool) (error)
	XsdGoPkgHasElems_FixActionToolConfigurationsequencefixActionTypeschema_FixActionToolConfiguration_TtoolConfigurationType_ func (*XsdGoPkgHasElems_FixActionToolConfigurationsequencefixActionTypeschema_FixActionToolConfiguration_TtoolConfigurationType_, bool) (error)
	XsdGoPkgHasElems_AttackScenariosequencevulnerabilityTypeschema_AttackScenario_ScapCoreTreferenceType_ func (*XsdGoPkgHasElems_AttackScenariosequencevulnerabilityTypeschema_AttackScenario_ScapCoreTreferenceType_, bool) (error)
	TvulnerableSoftwareType func (*TvulnerableSoftwareType, bool) (error)
	XsdGoPkgHasElem_SecurityProtectionsequencevulnerabilityTypeschema_SecurityProtection_TsecurityProtectionType_ func (*XsdGoPkgHasElem_SecurityProtectionsequencevulnerabilityTypeschema_SecurityProtection_TsecurityProtectionType_, bool) (error)
	XsdGoPkgHasElem_SummarysequencevulnerabilityTypeschema_Summary_XsdtString_ func (*XsdGoPkgHasElem_SummarysequencevulnerabilityTypeschema_Summary_XsdtString_, bool) (error)
	XsdGoPkgHasElem_ReferencessequencevulnerabilityTypeschema_References_TvulnerabilityReferenceType_ func (*XsdGoPkgHasElem_ReferencessequencevulnerabilityTypeschema_References_TvulnerabilityReferenceType_, bool) (error)
	XsdGoPkgHasElems_ProductsequencevulnerableSoftwareTypeschema_Product_CpeLangTnamePattern_ func (*XsdGoPkgHasElems_ProductsequencevulnerableSoftwareTypeschema_Product_CpeLangTnamePattern_, bool) (error)
	XsdGoPkgHasElem_OsvdbExtsequencevulnerabilityTypeschema_OsvdbExt_TosvdbExtensionType_ func (*XsdGoPkgHasElem_OsvdbExtsequencevulnerabilityTypeschema_OsvdbExt_TosvdbExtensionType_, bool) (error)
	XsdGoPkgHasElems_CveIdchoicesequencevulnerabilityTypeschema_CveId_CveTcveNamePatternType_ func (*XsdGoPkgHasElems_CveIdchoicesequencevulnerabilityTypeschema_CveId_CveTcveNamePatternType_, bool) (error)
	XsdGoPkgHasElem_CvsssequencevulnerabilityTypeschema_Cvss_Cvssv2TcvssImpactType_ func (*XsdGoPkgHasElem_CvsssequencevulnerabilityTypeschema_Cvss_Cvssv2TcvssImpactType_, bool) (error)
	XsdGoPkgHasElems_DeprecatedBysequencefixActionTypeschema_DeprecatedBy_ScapCoreTcpeNamePatternType_ func (*XsdGoPkgHasElems_DeprecatedBysequencefixActionTypeschema_DeprecatedBy_ScapCoreTcpeNamePatternType_, bool) (error)
	XsdGoPkgHasElems_ApplicableConfigurationsequencefixActionTypeschema_ApplicableConfiguration_CpeLangTPlatformType_ func (*XsdGoPkgHasElems_ApplicableConfigurationsequencefixActionTypeschema_ApplicableConfiguration_CpeLangTPlatformType_, bool) (error)
	XsdGoPkgHasElems_UnknownsequenceassociatedExploitLocationTypeschema_Unknown_XsdtBoolean_False func (*XsdGoPkgHasElems_UnknownsequenceassociatedExploitLocationTypeschema_Unknown_XsdtBoolean_False, bool) (error)
	XsdGoPkgHasElem_AttackScenariosequencevulnerabilityTypeschema_AttackScenario_ScapCoreTreferenceType_ func (*XsdGoPkgHasElem_AttackScenariosequencevulnerabilityTypeschema_AttackScenario_ScapCoreTreferenceType_, bool) (error)
	XsdGoPkgHasElem_CveIdchoicesequencevulnerabilityTypeschema_CveId_CveTcveNamePatternType_ func (*XsdGoPkgHasElem_CveIdchoicesequencevulnerabilityTypeschema_CveId_CveTcveNamePatternType_, bool) (error)
	XsdGoPkgHasElems_ApplicableChecksequencefixActionTypeschema_ApplicableCheck_ScapCoreTcheckReferenceType_ func (*XsdGoPkgHasElems_ApplicableChecksequencefixActionTypeschema_ApplicableCheck_ScapCoreTcheckReferenceType_, bool) (error)
	XsdGoPkgHasElems_VulnerableSoftwareListsequencevulnerabilityTypeschema_VulnerableSoftwareList_TvulnerableSoftwareType_ func (*XsdGoPkgHasElems_VulnerableSoftwareListsequencevulnerabilityTypeschema_VulnerableSoftwareList_TvulnerableSoftwareType_, bool) (error)
	XsdGoPkgHasElem_NextFixActionsequencefixActionTypeschema_NextFixAction_TfixActionType_ func (*XsdGoPkgHasElem_NextFixActionsequencefixActionTypeschema_NextFixAction_TfixActionType_, bool) (error)
	XsdGoPkgHasElems_ExploitLocationsequenceosvdbExtensionTypeschema_ExploitLocation_TassociatedExploitLocationType_ func (*XsdGoPkgHasElems_ExploitLocationsequenceosvdbExtensionTypeschema_ExploitLocation_TassociatedExploitLocationType_, bool) (error)
	XsdGoPkgHasElems_ReferencesequencevulnerabilityReferenceTypeschema_Reference_ScapCoreTreferenceType_ func (*XsdGoPkgHasElems_ReferencesequencevulnerabilityReferenceTypeschema_Reference_ScapCoreTreferenceType_, bool) (error)
	XsdGoPkgHasElems_DiscoveredDatetimesequencevulnerabilityTypeschema_DiscoveredDatetime_XsdtDateTime_ func (*XsdGoPkgHasElems_DiscoveredDatetimesequencevulnerabilityTypeschema_DiscoveredDatetime_XsdtDateTime_, bool) (error)
	XsdGoPkgHasElem_DialupsequenceassociatedExploitLocationTypeschema_Dialup_XsdtBoolean_False func (*XsdGoPkgHasElem_DialupsequenceassociatedExploitLocationTypeschema_Dialup_XsdtBoolean_False, bool) (error)
	XsdGoPkgHasElems_NotessequencevulnerabilityReferenceTypeschema_Notes_ScapCoreTnotesType_ func (*XsdGoPkgHasElems_NotessequencevulnerabilityReferenceTypeschema_Notes_ScapCoreTnotesType_, bool) (error)
	TfixActionType func (*TfixActionType, bool) (error)
	XsdGoPkgHasElem_DiscoveredDatetimesequencevulnerabilityTypeschema_DiscoveredDatetime_XsdtDateTime_ func (*XsdGoPkgHasElem_DiscoveredDatetimesequencevulnerabilityTypeschema_DiscoveredDatetime_XsdtDateTime_, bool) (error)
	TcweReferenceType func (*TcweReferenceType, bool) (error)
	XsdGoPkgHasElems_Vulnerability func (*XsdGoPkgHasElems_Vulnerability, bool) (error)
	XsdGoPkgHasElems_CvsssequencevulnerabilityTypeschema_Cvss_Cvssv2TcvssImpactType_ func (*XsdGoPkgHasElems_CvsssequencevulnerabilityTypeschema_Cvss_Cvssv2TcvssImpactType_, bool) (error)
	XsdGoPkgHasElem_DeprecatedBysequencefixActionTypeschema_DeprecatedBy_ScapCoreTcpeNamePatternType_ func (*XsdGoPkgHasElem_DeprecatedBysequencefixActionTypeschema_DeprecatedBy_ScapCoreTcpeNamePatternType_, bool) (error)
	XsdGoPkgHasElem_PhysicalAccesssequenceassociatedExploitLocationTypeschema_PhysicalAccess_XsdtBoolean_False func (*XsdGoPkgHasElem_PhysicalAccesssequenceassociatedExploitLocationTypeschema_PhysicalAccess_XsdtBoolean_False, bool) (error)
	XsdGoPkgHasElem_NamesequencetoolConfigurationTypeschema_Name_ScapCoreTcpeNamePatternType_ func (*XsdGoPkgHasElem_NamesequencetoolConfigurationTypeschema_Name_ScapCoreTcpeNamePatternType_, bool) (error)
	XsdGoPkgHasElems_PhysicalAccesssequenceassociatedExploitLocationTypeschema_PhysicalAccess_XsdtBoolean_False func (*XsdGoPkgHasElems_PhysicalAccesssequenceassociatedExploitLocationTypeschema_PhysicalAccess_XsdtBoolean_False, bool) (error)
	XsdGoPkgHasElems_AssessmentChecksequencevulnerabilityTypeschema_AssessmentCheck_ScapCoreTcheckReferenceType_ func (*XsdGoPkgHasElems_AssessmentChecksequencevulnerabilityTypeschema_AssessmentCheck_ScapCoreTcheckReferenceType_, bool) (error)
	XsdGoPkgHasElems_NamesequencetoolConfigurationTypeschema_Name_ScapCoreTcpeNamePatternType_ func (*XsdGoPkgHasElems_NamesequencetoolConfigurationTypeschema_Name_ScapCoreTcpeNamePatternType_, bool) (error)
	XsdGoPkgHasElem_SoftwareUpdatesequencefixActionTypeschema_SoftwareUpdate_ScapCoreTcpeNamePatternType_ func (*XsdGoPkgHasElem_SoftwareUpdatesequencefixActionTypeschema_SoftwareUpdate_ScapCoreTcpeNamePatternType_, bool) (error)
	XsdGoPkgHasElem_PublishedDatetimesequencevulnerabilityTypeschema_PublishedDatetime_XsdtDateTime_ func (*XsdGoPkgHasElem_PublishedDatetimesequencevulnerabilityTypeschema_PublishedDatetime_XsdtDateTime_, bool) (error)
	XsdGoPkgHasElems_FixActionsequencevulnerabilityTypeschema_FixAction_TfixActionType_ func (*XsdGoPkgHasElems_FixActionsequencevulnerabilityTypeschema_FixAction_TfixActionType_, bool) (error)
	TvulnerabilityType func (*TvulnerabilityType, bool) (error)
	XsdGoPkgHasElems_ConfigurationRemediationsequencefixActionTypeschema_ConfigurationRemediation_TvulnerabilityReferenceType_ func (*XsdGoPkgHasElems_ConfigurationRemediationsequencefixActionTypeschema_ConfigurationRemediation_TvulnerabilityReferenceType_, bool) (error)
	XsdGoPkgHasElems_SourcesequencevulnerabilityReferenceTypeschema_Source_XsdtString_ func (*XsdGoPkgHasElems_SourcesequencevulnerabilityReferenceTypeschema_Source_XsdtString_, bool) (error)
	XsdGoPkgHasElem_ExploitLocationsequenceosvdbExtensionTypeschema_ExploitLocation_TassociatedExploitLocationType_ func (*XsdGoPkgHasElem_ExploitLocationsequenceosvdbExtensionTypeschema_ExploitLocation_TassociatedExploitLocationType_, bool) (error)
	XsdGoPkgHasElems_VulnerableConfigurationsequencevulnerabilityTypeschema_VulnerableConfiguration_CpeLangTPlatformType_ func (*XsdGoPkgHasElems_VulnerableConfigurationsequencevulnerabilityTypeschema_VulnerableConfiguration_CpeLangTPlatformType_, bool) (error)
	XsdGoPkgHasElem_SourcesequencevulnerabilityReferenceTypeschema_Source_XsdtString_ func (*XsdGoPkgHasElem_SourcesequencevulnerabilityReferenceTypeschema_Source_XsdtString_, bool) (error)
	XsdGoPkgHasElem_ConfigurationRemediationsequencefixActionTypeschema_ConfigurationRemediation_TvulnerabilityReferenceType_ func (*XsdGoPkgHasElem_ConfigurationRemediationsequencefixActionTypeschema_ConfigurationRemediation_TvulnerabilityReferenceType_, bool) (error)
	XsdGoPkgHasElem_Vulnerability func (*XsdGoPkgHasElem_Vulnerability, bool) (error)
	XsdGoPkgHasElems_DisclosureDatetimesequencevulnerabilityTypeschema_DisclosureDatetime_XsdtDateTime_ func (*XsdGoPkgHasElems_DisclosureDatetimesequencevulnerabilityTypeschema_DisclosureDatetime_XsdtDateTime_, bool) (error)
	XsdGoPkgHasElem_FixActionToolConfigurationsequencefixActionTypeschema_FixActionToolConfiguration_TtoolConfigurationType_ func (*XsdGoPkgHasElem_FixActionToolConfigurationsequencefixActionTypeschema_FixActionToolConfiguration_TtoolConfigurationType_, bool) (error)
	XsdGoPkgHasElems_EffectivenesssequencefixActionTypeschema_Effectiveness_TfixEffectivenessEnumType_ func (*XsdGoPkgHasElems_EffectivenesssequencefixActionTypeschema_Effectiveness_TfixEffectivenessEnumType_, bool) (error)
	XsdGoPkgHasElem_DisclosureDatetimesequencevulnerabilityTypeschema_DisclosureDatetime_XsdtDateTime_ func (*XsdGoPkgHasElem_DisclosureDatetimesequencevulnerabilityTypeschema_DisclosureDatetime_XsdtDateTime_, bool) (error)
	XsdGoPkgHasElems_TechnicalDescriptionsequencevulnerabilityTypeschema_TechnicalDescription_ScapCoreTreferenceType_ func (*XsdGoPkgHasElems_TechnicalDescriptionsequencevulnerabilityTypeschema_TechnicalDescription_ScapCoreTreferenceType_, bool) (error)
	XsdGoPkgHasElems_LastModifiedDatetimesequencevulnerabilityTypeschema_LastModifiedDatetime_XsdtDateTime_ func (*XsdGoPkgHasElems_LastModifiedDatetimesequencevulnerabilityTypeschema_LastModifiedDatetime_XsdtDateTime_, bool) (error)
	XsdGoPkgHasElem_NotessequencevulnerabilityReferenceTypeschema_Notes_ScapCoreTnotesType_ func (*XsdGoPkgHasElem_NotessequencevulnerabilityReferenceTypeschema_Notes_ScapCoreTnotesType_, bool) (error)
	XsdGoPkgHasElem_ReferencesequencevulnerabilityReferenceTypeschema_Reference_ScapCoreTreferenceType_ func (*XsdGoPkgHasElem_ReferencesequencevulnerabilityReferenceTypeschema_Reference_ScapCoreTreferenceType_, bool) (error)
	XsdGoPkgHasElems_NotessequencefixActionTypeschema_Notes_XsdtString_ func (*XsdGoPkgHasElems_NotessequencefixActionTypeschema_Notes_XsdtString_, bool) (error)
	XsdGoPkgHasElem_EffectivenesssequencefixActionTypeschema_Effectiveness_TfixEffectivenessEnumType_ func (*XsdGoPkgHasElem_EffectivenesssequencefixActionTypeschema_Effectiveness_TfixEffectivenessEnumType_, bool) (error)
	XsdGoPkgHasElems_CwesequencevulnerabilityTypeschema_Cwe_TcweReferenceType_ func (*XsdGoPkgHasElems_CwesequencevulnerabilityTypeschema_Cwe_TcweReferenceType_, bool) (error)
	XsdGoPkgHasElem_NotessequencefixActionTypeschema_Notes_XsdtString_ func (*XsdGoPkgHasElem_NotessequencefixActionTypeschema_Notes_XsdtString_, bool) (error)
	XsdGoPkgHasElem_UnknownsequenceassociatedExploitLocationTypeschema_Unknown_XsdtBoolean_False func (*XsdGoPkgHasElem_UnknownsequenceassociatedExploitLocationTypeschema_Unknown_XsdtBoolean_False, bool) (error)
	TosvdbExtensionType func (*TosvdbExtensionType, bool) (error)
	XsdGoPkgHasElems_VoluntarilyInteractsequenceassociatedExploitLocationTypeschema_VoluntarilyInteract_XsdtBoolean_False func (*XsdGoPkgHasElems_VoluntarilyInteractsequenceassociatedExploitLocationTypeschema_VoluntarilyInteract_XsdtBoolean_False, bool) (error)
}
