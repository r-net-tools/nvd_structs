//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		nvd.nist.gov/schema/cvss-v2_0.2.xsd
package go_CvssV202

import (
	xsdt "github.com/metaleap/go-xsd/types"
)

//	Indicates if the vector has been approximated as the result of an upgrade from a previous CVSS version
type XsdGoPkgHasAttr_Approximated_XsdtBoolean_False struct {
	//	Indicates if the vector has been approximated as the result of an upgrade from a previous CVSS version
	Approximated xsdt.Boolean `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 approximated,attr"`
}

//	Returns the default value for Approximated -- false
func (me XsdGoPkgHasAttr_Approximated_XsdtBoolean_False) ApproximatedDefault() xsdt.Boolean {
	return xsdt.Boolean(false)
}

type XsdGoPkgHasAtts_VectorAttributeGroup struct {
	//	Indicates if the vector has been approximated as the result of an upgrade from a previous CVSS version
	XsdGoPkgHasAttr_Approximated_XsdtBoolean_False
}

type TciaEnumType xsdt.Token

//	Returns true if the value of this enumerated TciaEnumType is "NONE".
func (me TciaEnumType) IsNone() bool { return me.String() == "NONE" }

//	Returns true if the value of this enumerated TciaEnumType is "PARTIAL".
func (me TciaEnumType) IsPartial() bool { return me.String() == "PARTIAL" }

//	Returns true if the value of this enumerated TciaEnumType is "COMPLETE".
func (me TciaEnumType) IsComplete() bool { return me.String() == "COMPLETE" }

//	Since TciaEnumType is just a simple String type, this merely sets the current value from the specified string.
func (me *TciaEnumType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TciaEnumType is just a simple String type, this merely returns the current string value.
func (me TciaEnumType) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TciaEnumType's alias type xsdt.Token.
func (me TciaEnumType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

type TciaType struct {
	XsdGoPkgHasAtts_VectorAttributeGroup

	TciaEnumType
}

//	If the WalkHandlers.TciaType function is not nil (ie. was set by outside code), calls it with this TciaType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TciaType instance.
func (me *TciaType) Walk() (err error) {
	if fn := WalkHandlers.TciaType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IntegrityImpactsequencebaseVectorsGroupschema_IntegrityImpact_TciaType_ struct {
	IntegrityImpact *TciaType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 integrity-impact"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IntegrityImpactsequencebaseVectorsGroupschema_IntegrityImpact_TciaType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IntegrityImpactsequencebaseVectorsGroupschema_IntegrityImpact_TciaType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IntegrityImpactsequencebaseVectorsGroupschema_IntegrityImpact_TciaType_ instance.
func (me *XsdGoPkgHasElem_IntegrityImpactsequencebaseVectorsGroupschema_IntegrityImpact_TciaType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IntegrityImpactsequencebaseVectorsGroupschema_IntegrityImpact_TciaType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IntegrityImpact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AvailabilityImpactsequencebaseVectorsGroupschema_AvailabilityImpact_TciaType_ struct {
	AvailabilityImpact *TciaType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 availability-impact"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AvailabilityImpactsequencebaseVectorsGroupschema_AvailabilityImpact_TciaType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AvailabilityImpactsequencebaseVectorsGroupschema_AvailabilityImpact_TciaType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AvailabilityImpactsequencebaseVectorsGroupschema_AvailabilityImpact_TciaType_ instance.
func (me *XsdGoPkgHasElem_AvailabilityImpactsequencebaseVectorsGroupschema_AvailabilityImpact_TciaType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AvailabilityImpactsequencebaseVectorsGroupschema_AvailabilityImpact_TciaType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AvailabilityImpact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TaccessVectorEnumType xsdt.Token

//	Since TaccessVectorEnumType is just a simple String type, this merely sets the current value from the specified string.
func (me *TaccessVectorEnumType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TaccessVectorEnumType is just a simple String type, this merely returns the current string value.
func (me TaccessVectorEnumType) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TaccessVectorEnumType's alias type xsdt.Token.
func (me TaccessVectorEnumType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TaccessVectorEnumType is "LOCAL".
func (me TaccessVectorEnumType) IsLocal() bool { return me.String() == "LOCAL" }

//	Returns true if the value of this enumerated TaccessVectorEnumType is "ADJACENT_NETWORK".
func (me TaccessVectorEnumType) IsAdjacentNetwork() bool { return me.String() == "ADJACENT_NETWORK" }

//	Returns true if the value of this enumerated TaccessVectorEnumType is "NETWORK".
func (me TaccessVectorEnumType) IsNetwork() bool { return me.String() == "NETWORK" }

type TaccessVectorType struct {
	TaccessVectorEnumType

	XsdGoPkgHasAtts_VectorAttributeGroup
}

//	If the WalkHandlers.TaccessVectorType function is not nil (ie. was set by outside code), calls it with this TaccessVectorType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TaccessVectorType instance.
func (me *TaccessVectorType) Walk() (err error) {
	if fn := WalkHandlers.TaccessVectorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AccessVectorsequencebaseVectorsGroupschema_AccessVector_TaccessVectorType_ struct {
	AccessVector *TaccessVectorType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 access-vector"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AccessVectorsequencebaseVectorsGroupschema_AccessVector_TaccessVectorType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AccessVectorsequencebaseVectorsGroupschema_AccessVector_TaccessVectorType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AccessVectorsequencebaseVectorsGroupschema_AccessVector_TaccessVectorType_ instance.
func (me *XsdGoPkgHasElem_AccessVectorsequencebaseVectorsGroupschema_AccessVector_TaccessVectorType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AccessVectorsequencebaseVectorsGroupschema_AccessVector_TaccessVectorType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AccessVector.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TaccessComplexityEnumType xsdt.Token

//	Returns true if the value of this enumerated TaccessComplexityEnumType is "LOW".
func (me TaccessComplexityEnumType) IsLow() bool { return me.String() == "LOW" }

//	Since TaccessComplexityEnumType is just a simple String type, this merely sets the current value from the specified string.
func (me *TaccessComplexityEnumType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TaccessComplexityEnumType is just a simple String type, this merely returns the current string value.
func (me TaccessComplexityEnumType) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TaccessComplexityEnumType's alias type xsdt.Token.
func (me TaccessComplexityEnumType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TaccessComplexityEnumType is "HIGH".
func (me TaccessComplexityEnumType) IsHigh() bool { return me.String() == "HIGH" }

//	Returns true if the value of this enumerated TaccessComplexityEnumType is "MEDIUM".
func (me TaccessComplexityEnumType) IsMedium() bool { return me.String() == "MEDIUM" }

type TaccessComplexityType struct {
	TaccessComplexityEnumType

	XsdGoPkgHasAtts_VectorAttributeGroup
}

//	If the WalkHandlers.TaccessComplexityType function is not nil (ie. was set by outside code), calls it with this TaccessComplexityType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TaccessComplexityType instance.
func (me *TaccessComplexityType) Walk() (err error) {
	if fn := WalkHandlers.TaccessComplexityType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AccessComplexitysequencebaseVectorsGroupschema_AccessComplexity_TaccessComplexityType_ struct {
	AccessComplexity *TaccessComplexityType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 access-complexity"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AccessComplexitysequencebaseVectorsGroupschema_AccessComplexity_TaccessComplexityType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AccessComplexitysequencebaseVectorsGroupschema_AccessComplexity_TaccessComplexityType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AccessComplexitysequencebaseVectorsGroupschema_AccessComplexity_TaccessComplexityType_ instance.
func (me *XsdGoPkgHasElem_AccessComplexitysequencebaseVectorsGroupschema_AccessComplexity_TaccessComplexityType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AccessComplexitysequencebaseVectorsGroupschema_AccessComplexity_TaccessComplexityType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AccessComplexity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TauthenticationEnumType xsdt.Token

//	Since TauthenticationEnumType is just a simple String type, this merely returns the current string value.
func (me TauthenticationEnumType) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TauthenticationEnumType's alias type xsdt.Token.
func (me TauthenticationEnumType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TauthenticationEnumType is "MULTIPLE_INSTANCES".
func (me TauthenticationEnumType) IsMultipleInstances() bool {
	return me.String() == "MULTIPLE_INSTANCES"
}

//	Returns true if the value of this enumerated TauthenticationEnumType is "SINGLE_INSTANCE".
func (me TauthenticationEnumType) IsSingleInstance() bool { return me.String() == "SINGLE_INSTANCE" }

//	Returns true if the value of this enumerated TauthenticationEnumType is "NONE".
func (me TauthenticationEnumType) IsNone() bool { return me.String() == "NONE" }

//	Since TauthenticationEnumType is just a simple String type, this merely sets the current value from the specified string.
func (me *TauthenticationEnumType) Set(s string) { (*xsdt.Token)(me).Set(s) }

type TauthenticationType struct {
	XsdGoPkgHasAtts_VectorAttributeGroup

	TauthenticationEnumType
}

//	If the WalkHandlers.TauthenticationType function is not nil (ie. was set by outside code), calls it with this TauthenticationType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TauthenticationType instance.
func (me *TauthenticationType) Walk() (err error) {
	if fn := WalkHandlers.TauthenticationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AuthenticationsequencebaseVectorsGroupschema_Authentication_TauthenticationType_ struct {
	Authentication *TauthenticationType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 authentication"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AuthenticationsequencebaseVectorsGroupschema_Authentication_TauthenticationType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AuthenticationsequencebaseVectorsGroupschema_Authentication_TauthenticationType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AuthenticationsequencebaseVectorsGroupschema_Authentication_TauthenticationType_ instance.
func (me *XsdGoPkgHasElem_AuthenticationsequencebaseVectorsGroupschema_Authentication_TauthenticationType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AuthenticationsequencebaseVectorsGroupschema_Authentication_TauthenticationType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Authentication.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ConfidentialityImpactsequencebaseVectorsGroupschema_ConfidentialityImpact_TciaType_ struct {
	ConfidentialityImpact *TciaType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 confidentiality-impact"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ConfidentialityImpactsequencebaseVectorsGroupschema_ConfidentialityImpact_TciaType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ConfidentialityImpactsequencebaseVectorsGroupschema_ConfidentialityImpact_TciaType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ConfidentialityImpactsequencebaseVectorsGroupschema_ConfidentialityImpact_TciaType_ instance.
func (me *XsdGoPkgHasElem_ConfidentialityImpactsequencebaseVectorsGroupschema_ConfidentialityImpact_TciaType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ConfidentialityImpactsequencebaseVectorsGroupschema_ConfidentialityImpact_TciaType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ConfidentialityImpact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_BaseVectorsGroup struct {
	XsdGoPkgHasElem_IntegrityImpactsequencebaseVectorsGroupschema_IntegrityImpact_TciaType_

	XsdGoPkgHasElem_AvailabilityImpactsequencebaseVectorsGroupschema_AvailabilityImpact_TciaType_

	XsdGoPkgHasElem_AccessVectorsequencebaseVectorsGroupschema_AccessVector_TaccessVectorType_

	XsdGoPkgHasElem_AccessComplexitysequencebaseVectorsGroupschema_AccessComplexity_TaccessComplexityType_

	XsdGoPkgHasElem_AuthenticationsequencebaseVectorsGroupschema_Authentication_TauthenticationType_

	XsdGoPkgHasElem_ConfidentialityImpactsequencebaseVectorsGroupschema_ConfidentialityImpact_TciaType_
}

//	If the WalkHandlers.XsdGoPkgHasGroup_BaseVectorsGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_BaseVectorsGroup instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_BaseVectorsGroup instance.
func (me *XsdGoPkgHasGroup_BaseVectorsGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_BaseVectorsGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_IntegrityImpactsequencebaseVectorsGroupschema_IntegrityImpact_TciaType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AvailabilityImpactsequencebaseVectorsGroupschema_AvailabilityImpact_TciaType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AccessVectorsequencebaseVectorsGroupschema_AccessVector_TaccessVectorType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AccessComplexitysequencebaseVectorsGroupschema_AccessComplexity_TaccessComplexityType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AuthenticationsequencebaseVectorsGroupschema_Authentication_TauthenticationType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ConfidentialityImpactsequencebaseVectorsGroupschema_ConfidentialityImpact_TciaType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcollateralDamagePotentialEnumType xsdt.Token

//	Returns true if the value of this enumerated TcollateralDamagePotentialEnumType is "MEDIUM_HIGH".
func (me TcollateralDamagePotentialEnumType) IsMediumHigh() bool { return me.String() == "MEDIUM_HIGH" }

//	Returns true if the value of this enumerated TcollateralDamagePotentialEnumType is "HIGH".
func (me TcollateralDamagePotentialEnumType) IsHigh() bool { return me.String() == "HIGH" }

//	Returns true if the value of this enumerated TcollateralDamagePotentialEnumType is "NOT_DEFINED".
func (me TcollateralDamagePotentialEnumType) IsNotDefined() bool { return me.String() == "NOT_DEFINED" }

//	Returns true if the value of this enumerated TcollateralDamagePotentialEnumType is "NONE".
func (me TcollateralDamagePotentialEnumType) IsNone() bool { return me.String() == "NONE" }

//	Returns true if the value of this enumerated TcollateralDamagePotentialEnumType is "LOW".
func (me TcollateralDamagePotentialEnumType) IsLow() bool { return me.String() == "LOW" }

//	Returns true if the value of this enumerated TcollateralDamagePotentialEnumType is "LOW_MEDIUM".
func (me TcollateralDamagePotentialEnumType) IsLowMedium() bool { return me.String() == "LOW_MEDIUM" }

//	Since TcollateralDamagePotentialEnumType is just a simple String type, this merely sets the current value from the specified string.
func (me *TcollateralDamagePotentialEnumType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TcollateralDamagePotentialEnumType is just a simple String type, this merely returns the current string value.
func (me TcollateralDamagePotentialEnumType) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TcollateralDamagePotentialEnumType's alias type xsdt.Token.
func (me TcollateralDamagePotentialEnumType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

type TcollateralDamagePotentialType struct {
	XsdGoPkgHasAtts_VectorAttributeGroup

	TcollateralDamagePotentialEnumType
}

//	If the WalkHandlers.TcollateralDamagePotentialType function is not nil (ie. was set by outside code), calls it with this TcollateralDamagePotentialType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TcollateralDamagePotentialType instance.
func (me *TcollateralDamagePotentialType) Walk() (err error) {
	if fn := WalkHandlers.TcollateralDamagePotentialType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CollateralDamagePotentialsequenceenvironmentalVectorsGroupschema_CollateralDamagePotential_TcollateralDamagePotentialType_ struct {
	CollateralDamagePotential *TcollateralDamagePotentialType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 collateral-damage-potential"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CollateralDamagePotentialsequenceenvironmentalVectorsGroupschema_CollateralDamagePotential_TcollateralDamagePotentialType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CollateralDamagePotentialsequenceenvironmentalVectorsGroupschema_CollateralDamagePotential_TcollateralDamagePotentialType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CollateralDamagePotentialsequenceenvironmentalVectorsGroupschema_CollateralDamagePotential_TcollateralDamagePotentialType_ instance.
func (me *XsdGoPkgHasElem_CollateralDamagePotentialsequenceenvironmentalVectorsGroupschema_CollateralDamagePotential_TcollateralDamagePotentialType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CollateralDamagePotentialsequenceenvironmentalVectorsGroupschema_CollateralDamagePotential_TcollateralDamagePotentialType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CollateralDamagePotential.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtargetDistributionEnumType xsdt.Token

//	Since TtargetDistributionEnumType is just a simple String type, this merely sets the current value from the specified string.
func (me *TtargetDistributionEnumType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TtargetDistributionEnumType is just a simple String type, this merely returns the current string value.
func (me TtargetDistributionEnumType) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TtargetDistributionEnumType's alias type xsdt.Token.
func (me TtargetDistributionEnumType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TtargetDistributionEnumType is "NONE".
func (me TtargetDistributionEnumType) IsNone() bool { return me.String() == "NONE" }

//	Returns true if the value of this enumerated TtargetDistributionEnumType is "LOW".
func (me TtargetDistributionEnumType) IsLow() bool { return me.String() == "LOW" }

//	Returns true if the value of this enumerated TtargetDistributionEnumType is "MEDIUM".
func (me TtargetDistributionEnumType) IsMedium() bool { return me.String() == "MEDIUM" }

//	Returns true if the value of this enumerated TtargetDistributionEnumType is "HIGH".
func (me TtargetDistributionEnumType) IsHigh() bool { return me.String() == "HIGH" }

//	Returns true if the value of this enumerated TtargetDistributionEnumType is "NOT_DEFINED".
func (me TtargetDistributionEnumType) IsNotDefined() bool { return me.String() == "NOT_DEFINED" }

type TtargetDistributionType struct {
	TtargetDistributionEnumType

	XsdGoPkgHasAtts_VectorAttributeGroup
}

//	If the WalkHandlers.TtargetDistributionType function is not nil (ie. was set by outside code), calls it with this TtargetDistributionType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TtargetDistributionType instance.
func (me *TtargetDistributionType) Walk() (err error) {
	if fn := WalkHandlers.TtargetDistributionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TargetDistributionsequenceenvironmentalVectorsGroupschema_TargetDistribution_TtargetDistributionType_ struct {
	TargetDistribution *TtargetDistributionType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 target-distribution"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TargetDistributionsequenceenvironmentalVectorsGroupschema_TargetDistribution_TtargetDistributionType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TargetDistributionsequenceenvironmentalVectorsGroupschema_TargetDistribution_TtargetDistributionType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TargetDistributionsequenceenvironmentalVectorsGroupschema_TargetDistribution_TtargetDistributionType_ instance.
func (me *XsdGoPkgHasElem_TargetDistributionsequenceenvironmentalVectorsGroupschema_TargetDistribution_TtargetDistributionType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TargetDistributionsequenceenvironmentalVectorsGroupschema_TargetDistribution_TtargetDistributionType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TargetDistribution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TciaRequirementEnumType xsdt.Token

//	Returns true if the value of this enumerated TciaRequirementEnumType is "HIGH".
func (me TciaRequirementEnumType) IsHigh() bool { return me.String() == "HIGH" }

//	Returns true if the value of this enumerated TciaRequirementEnumType is "NOT_DEFINED".
func (me TciaRequirementEnumType) IsNotDefined() bool { return me.String() == "NOT_DEFINED" }

//	Since TciaRequirementEnumType is just a simple String type, this merely sets the current value from the specified string.
func (me *TciaRequirementEnumType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TciaRequirementEnumType is just a simple String type, this merely returns the current string value.
func (me TciaRequirementEnumType) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TciaRequirementEnumType's alias type xsdt.Token.
func (me TciaRequirementEnumType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TciaRequirementEnumType is "LOW".
func (me TciaRequirementEnumType) IsLow() bool { return me.String() == "LOW" }

//	Returns true if the value of this enumerated TciaRequirementEnumType is "MEDIUM".
func (me TciaRequirementEnumType) IsMedium() bool { return me.String() == "MEDIUM" }

type TciaRequirementType struct {
	TciaRequirementEnumType

	XsdGoPkgHasAtts_VectorAttributeGroup
}

//	If the WalkHandlers.TciaRequirementType function is not nil (ie. was set by outside code), calls it with this TciaRequirementType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TciaRequirementType instance.
func (me *TciaRequirementType) Walk() (err error) {
	if fn := WalkHandlers.TciaRequirementType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ConfidentialityRequirementsequenceenvironmentalVectorsGroupschema_ConfidentialityRequirement_TciaRequirementType_ struct {
	ConfidentialityRequirement *TciaRequirementType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 confidentiality-requirement"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ConfidentialityRequirementsequenceenvironmentalVectorsGroupschema_ConfidentialityRequirement_TciaRequirementType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ConfidentialityRequirementsequenceenvironmentalVectorsGroupschema_ConfidentialityRequirement_TciaRequirementType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ConfidentialityRequirementsequenceenvironmentalVectorsGroupschema_ConfidentialityRequirement_TciaRequirementType_ instance.
func (me *XsdGoPkgHasElem_ConfidentialityRequirementsequenceenvironmentalVectorsGroupschema_ConfidentialityRequirement_TciaRequirementType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ConfidentialityRequirementsequenceenvironmentalVectorsGroupschema_ConfidentialityRequirement_TciaRequirementType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ConfidentialityRequirement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IntegrityRequirementsequenceenvironmentalVectorsGroupschema_IntegrityRequirement_TciaRequirementType_ struct {
	IntegrityRequirement *TciaRequirementType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 integrity-requirement"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IntegrityRequirementsequenceenvironmentalVectorsGroupschema_IntegrityRequirement_TciaRequirementType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IntegrityRequirementsequenceenvironmentalVectorsGroupschema_IntegrityRequirement_TciaRequirementType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IntegrityRequirementsequenceenvironmentalVectorsGroupschema_IntegrityRequirement_TciaRequirementType_ instance.
func (me *XsdGoPkgHasElem_IntegrityRequirementsequenceenvironmentalVectorsGroupschema_IntegrityRequirement_TciaRequirementType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IntegrityRequirementsequenceenvironmentalVectorsGroupschema_IntegrityRequirement_TciaRequirementType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IntegrityRequirement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AvailabilityRequirementsequenceenvironmentalVectorsGroupschema_AvailabilityRequirement_TciaRequirementType_ struct {
	AvailabilityRequirement *TciaRequirementType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 availability-requirement"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AvailabilityRequirementsequenceenvironmentalVectorsGroupschema_AvailabilityRequirement_TciaRequirementType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AvailabilityRequirementsequenceenvironmentalVectorsGroupschema_AvailabilityRequirement_TciaRequirementType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AvailabilityRequirementsequenceenvironmentalVectorsGroupschema_AvailabilityRequirement_TciaRequirementType_ instance.
func (me *XsdGoPkgHasElem_AvailabilityRequirementsequenceenvironmentalVectorsGroupschema_AvailabilityRequirement_TciaRequirementType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AvailabilityRequirementsequenceenvironmentalVectorsGroupschema_AvailabilityRequirement_TciaRequirementType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AvailabilityRequirement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_EnvironmentalVectorsGroup struct {
	XsdGoPkgHasElem_TargetDistributionsequenceenvironmentalVectorsGroupschema_TargetDistribution_TtargetDistributionType_

	XsdGoPkgHasElem_ConfidentialityRequirementsequenceenvironmentalVectorsGroupschema_ConfidentialityRequirement_TciaRequirementType_

	XsdGoPkgHasElem_IntegrityRequirementsequenceenvironmentalVectorsGroupschema_IntegrityRequirement_TciaRequirementType_

	XsdGoPkgHasElem_AvailabilityRequirementsequenceenvironmentalVectorsGroupschema_AvailabilityRequirement_TciaRequirementType_

	XsdGoPkgHasElem_CollateralDamagePotentialsequenceenvironmentalVectorsGroupschema_CollateralDamagePotential_TcollateralDamagePotentialType_
}

//	If the WalkHandlers.XsdGoPkgHasGroup_EnvironmentalVectorsGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_EnvironmentalVectorsGroup instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_EnvironmentalVectorsGroup instance.
func (me *XsdGoPkgHasGroup_EnvironmentalVectorsGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_EnvironmentalVectorsGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_CollateralDamagePotentialsequenceenvironmentalVectorsGroupschema_CollateralDamagePotential_TcollateralDamagePotentialType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TargetDistributionsequenceenvironmentalVectorsGroupschema_TargetDistribution_TtargetDistributionType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ConfidentialityRequirementsequenceenvironmentalVectorsGroupschema_ConfidentialityRequirement_TciaRequirementType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IntegrityRequirementsequenceenvironmentalVectorsGroupschema_IntegrityRequirement_TciaRequirementType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AvailabilityRequirementsequenceenvironmentalVectorsGroupschema_AvailabilityRequirement_TciaRequirementType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TexploitabilityEnumType xsdt.Token

//	Returns true if the value of this enumerated TexploitabilityEnumType is "HIGH".
func (me TexploitabilityEnumType) IsHigh() bool { return me.String() == "HIGH" }

//	Returns true if the value of this enumerated TexploitabilityEnumType is "NOT_DEFINED".
func (me TexploitabilityEnumType) IsNotDefined() bool { return me.String() == "NOT_DEFINED" }

//	Since TexploitabilityEnumType is just a simple String type, this merely sets the current value from the specified string.
func (me *TexploitabilityEnumType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TexploitabilityEnumType is just a simple String type, this merely returns the current string value.
func (me TexploitabilityEnumType) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TexploitabilityEnumType's alias type xsdt.Token.
func (me TexploitabilityEnumType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TexploitabilityEnumType is "UNPROVEN".
func (me TexploitabilityEnumType) IsUnproven() bool { return me.String() == "UNPROVEN" }

//	Returns true if the value of this enumerated TexploitabilityEnumType is "PROOF_OF_CONCEPT".
func (me TexploitabilityEnumType) IsProofOfConcept() bool { return me.String() == "PROOF_OF_CONCEPT" }

//	Returns true if the value of this enumerated TexploitabilityEnumType is "FUNCTIONAL".
func (me TexploitabilityEnumType) IsFunctional() bool { return me.String() == "FUNCTIONAL" }

type TexploitabilityType struct {
	TexploitabilityEnumType

	XsdGoPkgHasAtts_VectorAttributeGroup
}

//	If the WalkHandlers.TexploitabilityType function is not nil (ie. was set by outside code), calls it with this TexploitabilityType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TexploitabilityType instance.
func (me *TexploitabilityType) Walk() (err error) {
	if fn := WalkHandlers.TexploitabilityType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ExploitabilitysequencetemporalVectorsGroupschema_Exploitability_TexploitabilityType_ struct {
	Exploitability *TexploitabilityType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 exploitability"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ExploitabilitysequencetemporalVectorsGroupschema_Exploitability_TexploitabilityType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExploitabilitysequencetemporalVectorsGroupschema_Exploitability_TexploitabilityType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ExploitabilitysequencetemporalVectorsGroupschema_Exploitability_TexploitabilityType_ instance.
func (me *XsdGoPkgHasElem_ExploitabilitysequencetemporalVectorsGroupschema_Exploitability_TexploitabilityType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ExploitabilitysequencetemporalVectorsGroupschema_Exploitability_TexploitabilityType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Exploitability.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TremediationLevelEnumType xsdt.Token

//	Returns true if the value of this enumerated TremediationLevelEnumType is "TEMPORARY_FIX".
func (me TremediationLevelEnumType) IsTemporaryFix() bool { return me.String() == "TEMPORARY_FIX" }

//	Returns true if the value of this enumerated TremediationLevelEnumType is "WORKAROUND".
func (me TremediationLevelEnumType) IsWorkaround() bool { return me.String() == "WORKAROUND" }

//	Returns true if the value of this enumerated TremediationLevelEnumType is "UNAVAILABLE".
func (me TremediationLevelEnumType) IsUnavailable() bool { return me.String() == "UNAVAILABLE" }

//	Returns true if the value of this enumerated TremediationLevelEnumType is "NOT_DEFINED".
func (me TremediationLevelEnumType) IsNotDefined() bool { return me.String() == "NOT_DEFINED" }

//	Since TremediationLevelEnumType is just a simple String type, this merely sets the current value from the specified string.
func (me *TremediationLevelEnumType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TremediationLevelEnumType is just a simple String type, this merely returns the current string value.
func (me TremediationLevelEnumType) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TremediationLevelEnumType's alias type xsdt.Token.
func (me TremediationLevelEnumType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TremediationLevelEnumType is "OFFICIAL_FIX".
func (me TremediationLevelEnumType) IsOfficialFix() bool { return me.String() == "OFFICIAL_FIX" }

type TremediationLevelType struct {
	TremediationLevelEnumType

	XsdGoPkgHasAtts_VectorAttributeGroup
}

//	If the WalkHandlers.TremediationLevelType function is not nil (ie. was set by outside code), calls it with this TremediationLevelType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TremediationLevelType instance.
func (me *TremediationLevelType) Walk() (err error) {
	if fn := WalkHandlers.TremediationLevelType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RemediationLevelsequencetemporalVectorsGroupschema_RemediationLevel_TremediationLevelType_ struct {
	RemediationLevel *TremediationLevelType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 remediation-level"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RemediationLevelsequencetemporalVectorsGroupschema_RemediationLevel_TremediationLevelType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RemediationLevelsequencetemporalVectorsGroupschema_RemediationLevel_TremediationLevelType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RemediationLevelsequencetemporalVectorsGroupschema_RemediationLevel_TremediationLevelType_ instance.
func (me *XsdGoPkgHasElem_RemediationLevelsequencetemporalVectorsGroupschema_RemediationLevel_TremediationLevelType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RemediationLevelsequencetemporalVectorsGroupschema_RemediationLevel_TremediationLevelType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RemediationLevel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TconfidenceEnumType xsdt.Token

//	Since TconfidenceEnumType is just a simple String type, this merely sets the current value from the specified string.
func (me *TconfidenceEnumType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TconfidenceEnumType is just a simple String type, this merely returns the current string value.
func (me TconfidenceEnumType) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TconfidenceEnumType's alias type xsdt.Token.
func (me TconfidenceEnumType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TconfidenceEnumType is "UNCONFIRMED".
func (me TconfidenceEnumType) IsUnconfirmed() bool { return me.String() == "UNCONFIRMED" }

//	Returns true if the value of this enumerated TconfidenceEnumType is "UNCORROBORATED".
func (me TconfidenceEnumType) IsUncorroborated() bool { return me.String() == "UNCORROBORATED" }

//	Returns true if the value of this enumerated TconfidenceEnumType is "CONFIRMED".
func (me TconfidenceEnumType) IsConfirmed() bool { return me.String() == "CONFIRMED" }

//	Returns true if the value of this enumerated TconfidenceEnumType is "NOT_DEFINED".
func (me TconfidenceEnumType) IsNotDefined() bool { return me.String() == "NOT_DEFINED" }

type TconfidenceType struct {
	TconfidenceEnumType

	XsdGoPkgHasAtts_VectorAttributeGroup
}

//	If the WalkHandlers.TconfidenceType function is not nil (ie. was set by outside code), calls it with this TconfidenceType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TconfidenceType instance.
func (me *TconfidenceType) Walk() (err error) {
	if fn := WalkHandlers.TconfidenceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ReportConfidencesequencetemporalVectorsGroupschema_ReportConfidence_TconfidenceType_ struct {
	ReportConfidence *TconfidenceType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 report-confidence"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReportConfidencesequencetemporalVectorsGroupschema_ReportConfidence_TconfidenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReportConfidencesequencetemporalVectorsGroupschema_ReportConfidence_TconfidenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ReportConfidencesequencetemporalVectorsGroupschema_ReportConfidence_TconfidenceType_ instance.
func (me *XsdGoPkgHasElem_ReportConfidencesequencetemporalVectorsGroupschema_ReportConfidence_TconfidenceType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReportConfidencesequencetemporalVectorsGroupschema_ReportConfidence_TconfidenceType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ReportConfidence.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_TemporalVectorsGroup struct {
	XsdGoPkgHasElem_ReportConfidencesequencetemporalVectorsGroupschema_ReportConfidence_TconfidenceType_

	XsdGoPkgHasElem_ExploitabilitysequencetemporalVectorsGroupschema_Exploitability_TexploitabilityType_

	XsdGoPkgHasElem_RemediationLevelsequencetemporalVectorsGroupschema_RemediationLevel_TremediationLevelType_
}

//	If the WalkHandlers.XsdGoPkgHasGroup_TemporalVectorsGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_TemporalVectorsGroup instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_TemporalVectorsGroup instance.
func (me *XsdGoPkgHasGroup_TemporalVectorsGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_TemporalVectorsGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_RemediationLevelsequencetemporalVectorsGroupschema_RemediationLevel_TremediationLevelType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ReportConfidencesequencetemporalVectorsGroupschema_ReportConfidence_TconfidenceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ExploitabilitysequencetemporalVectorsGroupschema_Exploitability_TexploitabilityType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AccessVectorsequencebaseVectorsCriteriaGroupschema_AccessVector_TaccessVectorEnumType_ struct {
	AccessVector TaccessVectorEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 access-vector"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AccessVectorsequencebaseVectorsCriteriaGroupschema_AccessVector_TaccessVectorEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AccessVectorsequencebaseVectorsCriteriaGroupschema_AccessVector_TaccessVectorEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AccessVectorsequencebaseVectorsCriteriaGroupschema_AccessVector_TaccessVectorEnumType_ instance.
func (me *XsdGoPkgHasElem_AccessVectorsequencebaseVectorsCriteriaGroupschema_AccessVector_TaccessVectorEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AccessVectorsequencebaseVectorsCriteriaGroupschema_AccessVector_TaccessVectorEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AccessComplexitysequencebaseVectorsCriteriaGroupschema_AccessComplexity_TaccessComplexityEnumType_ struct {
	AccessComplexity TaccessComplexityEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 access-complexity"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AccessComplexitysequencebaseVectorsCriteriaGroupschema_AccessComplexity_TaccessComplexityEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AccessComplexitysequencebaseVectorsCriteriaGroupschema_AccessComplexity_TaccessComplexityEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AccessComplexitysequencebaseVectorsCriteriaGroupschema_AccessComplexity_TaccessComplexityEnumType_ instance.
func (me *XsdGoPkgHasElem_AccessComplexitysequencebaseVectorsCriteriaGroupschema_AccessComplexity_TaccessComplexityEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AccessComplexitysequencebaseVectorsCriteriaGroupschema_AccessComplexity_TaccessComplexityEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AuthenticationsequencebaseVectorsCriteriaGroupschema_Authentication_TauthenticationEnumType_ struct {
	Authentication TauthenticationEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 authentication"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AuthenticationsequencebaseVectorsCriteriaGroupschema_Authentication_TauthenticationEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AuthenticationsequencebaseVectorsCriteriaGroupschema_Authentication_TauthenticationEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AuthenticationsequencebaseVectorsCriteriaGroupschema_Authentication_TauthenticationEnumType_ instance.
func (me *XsdGoPkgHasElem_AuthenticationsequencebaseVectorsCriteriaGroupschema_Authentication_TauthenticationEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AuthenticationsequencebaseVectorsCriteriaGroupschema_Authentication_TauthenticationEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ConfidentialityImpactsequencebaseVectorsCriteriaGroupschema_ConfidentialityImpact_TciaEnumType_ struct {
	ConfidentialityImpact TciaEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 confidentiality-impact"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ConfidentialityImpactsequencebaseVectorsCriteriaGroupschema_ConfidentialityImpact_TciaEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ConfidentialityImpactsequencebaseVectorsCriteriaGroupschema_ConfidentialityImpact_TciaEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ConfidentialityImpactsequencebaseVectorsCriteriaGroupschema_ConfidentialityImpact_TciaEnumType_ instance.
func (me *XsdGoPkgHasElem_ConfidentialityImpactsequencebaseVectorsCriteriaGroupschema_ConfidentialityImpact_TciaEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ConfidentialityImpactsequencebaseVectorsCriteriaGroupschema_ConfidentialityImpact_TciaEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IntegrityImpactsequencebaseVectorsCriteriaGroupschema_IntegrityImpact_TciaEnumType_ struct {
	IntegrityImpact TciaEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 integrity-impact"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IntegrityImpactsequencebaseVectorsCriteriaGroupschema_IntegrityImpact_TciaEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IntegrityImpactsequencebaseVectorsCriteriaGroupschema_IntegrityImpact_TciaEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_IntegrityImpactsequencebaseVectorsCriteriaGroupschema_IntegrityImpact_TciaEnumType_ instance.
func (me *XsdGoPkgHasElem_IntegrityImpactsequencebaseVectorsCriteriaGroupschema_IntegrityImpact_TciaEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IntegrityImpactsequencebaseVectorsCriteriaGroupschema_IntegrityImpact_TciaEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AvailabilityImpactsequencebaseVectorsCriteriaGroupschema_AvailabilityImpact_TciaEnumType_ struct {
	AvailabilityImpact TciaEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 availability-impact"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AvailabilityImpactsequencebaseVectorsCriteriaGroupschema_AvailabilityImpact_TciaEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AvailabilityImpactsequencebaseVectorsCriteriaGroupschema_AvailabilityImpact_TciaEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AvailabilityImpactsequencebaseVectorsCriteriaGroupschema_AvailabilityImpact_TciaEnumType_ instance.
func (me *XsdGoPkgHasElem_AvailabilityImpactsequencebaseVectorsCriteriaGroupschema_AvailabilityImpact_TciaEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AvailabilityImpactsequencebaseVectorsCriteriaGroupschema_AvailabilityImpact_TciaEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_BaseVectorsCriteriaGroup struct {
	XsdGoPkgHasElem_AccessVectorsequencebaseVectorsCriteriaGroupschema_AccessVector_TaccessVectorEnumType_

	XsdGoPkgHasElem_AccessComplexitysequencebaseVectorsCriteriaGroupschema_AccessComplexity_TaccessComplexityEnumType_

	XsdGoPkgHasElem_AuthenticationsequencebaseVectorsCriteriaGroupschema_Authentication_TauthenticationEnumType_

	XsdGoPkgHasElem_ConfidentialityImpactsequencebaseVectorsCriteriaGroupschema_ConfidentialityImpact_TciaEnumType_

	XsdGoPkgHasElem_IntegrityImpactsequencebaseVectorsCriteriaGroupschema_IntegrityImpact_TciaEnumType_

	XsdGoPkgHasElem_AvailabilityImpactsequencebaseVectorsCriteriaGroupschema_AvailabilityImpact_TciaEnumType_
}

//	If the WalkHandlers.XsdGoPkgHasGroup_BaseVectorsCriteriaGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_BaseVectorsCriteriaGroup instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_BaseVectorsCriteriaGroup instance.
func (me *XsdGoPkgHasGroup_BaseVectorsCriteriaGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_BaseVectorsCriteriaGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_IntegrityImpactsequencebaseVectorsCriteriaGroupschema_IntegrityImpact_TciaEnumType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AvailabilityImpactsequencebaseVectorsCriteriaGroupschema_AvailabilityImpact_TciaEnumType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AccessVectorsequencebaseVectorsCriteriaGroupschema_AccessVector_TaccessVectorEnumType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AccessComplexitysequencebaseVectorsCriteriaGroupschema_AccessComplexity_TaccessComplexityEnumType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AuthenticationsequencebaseVectorsCriteriaGroupschema_Authentication_TauthenticationEnumType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ConfidentialityImpactsequencebaseVectorsCriteriaGroupschema_ConfidentialityImpact_TciaEnumType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AvailabilityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_AvailabilityRequirement_TciaRequirementEnumType_ struct {
	AvailabilityRequirement TciaRequirementEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 availability-requirement"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AvailabilityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_AvailabilityRequirement_TciaRequirementEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AvailabilityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_AvailabilityRequirement_TciaRequirementEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AvailabilityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_AvailabilityRequirement_TciaRequirementEnumType_ instance.
func (me *XsdGoPkgHasElem_AvailabilityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_AvailabilityRequirement_TciaRequirementEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AvailabilityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_AvailabilityRequirement_TciaRequirementEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CollateralDamagePotentialsequenceenvironmentalVectorsCriteriaGroupschema_CollateralDamagePotential_TcollateralDamagePotentialEnumType_ struct {
	CollateralDamagePotential TcollateralDamagePotentialEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 collateral-damage-potential"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CollateralDamagePotentialsequenceenvironmentalVectorsCriteriaGroupschema_CollateralDamagePotential_TcollateralDamagePotentialEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CollateralDamagePotentialsequenceenvironmentalVectorsCriteriaGroupschema_CollateralDamagePotential_TcollateralDamagePotentialEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CollateralDamagePotentialsequenceenvironmentalVectorsCriteriaGroupschema_CollateralDamagePotential_TcollateralDamagePotentialEnumType_ instance.
func (me *XsdGoPkgHasElem_CollateralDamagePotentialsequenceenvironmentalVectorsCriteriaGroupschema_CollateralDamagePotential_TcollateralDamagePotentialEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CollateralDamagePotentialsequenceenvironmentalVectorsCriteriaGroupschema_CollateralDamagePotential_TcollateralDamagePotentialEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TargetDistributionsequenceenvironmentalVectorsCriteriaGroupschema_TargetDistribution_TtargetDistributionEnumType_ struct {
	TargetDistribution TtargetDistributionEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 target-distribution"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TargetDistributionsequenceenvironmentalVectorsCriteriaGroupschema_TargetDistribution_TtargetDistributionEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TargetDistributionsequenceenvironmentalVectorsCriteriaGroupschema_TargetDistribution_TtargetDistributionEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TargetDistributionsequenceenvironmentalVectorsCriteriaGroupschema_TargetDistribution_TtargetDistributionEnumType_ instance.
func (me *XsdGoPkgHasElem_TargetDistributionsequenceenvironmentalVectorsCriteriaGroupschema_TargetDistribution_TtargetDistributionEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TargetDistributionsequenceenvironmentalVectorsCriteriaGroupschema_TargetDistribution_TtargetDistributionEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ConfidentialityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_ConfidentialityRequirement_TciaRequirementEnumType_ struct {
	ConfidentialityRequirement TciaRequirementEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 confidentiality-requirement"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ConfidentialityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_ConfidentialityRequirement_TciaRequirementEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ConfidentialityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_ConfidentialityRequirement_TciaRequirementEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ConfidentialityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_ConfidentialityRequirement_TciaRequirementEnumType_ instance.
func (me *XsdGoPkgHasElem_ConfidentialityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_ConfidentialityRequirement_TciaRequirementEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ConfidentialityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_ConfidentialityRequirement_TciaRequirementEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IntegrityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_IntegrityRequirement_TciaRequirementEnumType_ struct {
	IntegrityRequirement TciaRequirementEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 integrity-requirement"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IntegrityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_IntegrityRequirement_TciaRequirementEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IntegrityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_IntegrityRequirement_TciaRequirementEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_IntegrityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_IntegrityRequirement_TciaRequirementEnumType_ instance.
func (me *XsdGoPkgHasElem_IntegrityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_IntegrityRequirement_TciaRequirementEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IntegrityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_IntegrityRequirement_TciaRequirementEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_EnvironmentalVectorsCriteriaGroup struct {
	XsdGoPkgHasElem_TargetDistributionsequenceenvironmentalVectorsCriteriaGroupschema_TargetDistribution_TtargetDistributionEnumType_

	XsdGoPkgHasElem_ConfidentialityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_ConfidentialityRequirement_TciaRequirementEnumType_

	XsdGoPkgHasElem_IntegrityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_IntegrityRequirement_TciaRequirementEnumType_

	XsdGoPkgHasElem_AvailabilityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_AvailabilityRequirement_TciaRequirementEnumType_

	XsdGoPkgHasElem_CollateralDamagePotentialsequenceenvironmentalVectorsCriteriaGroupschema_CollateralDamagePotential_TcollateralDamagePotentialEnumType_
}

//	If the WalkHandlers.XsdGoPkgHasGroup_EnvironmentalVectorsCriteriaGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_EnvironmentalVectorsCriteriaGroup instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_EnvironmentalVectorsCriteriaGroup instance.
func (me *XsdGoPkgHasGroup_EnvironmentalVectorsCriteriaGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_EnvironmentalVectorsCriteriaGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_CollateralDamagePotentialsequenceenvironmentalVectorsCriteriaGroupschema_CollateralDamagePotential_TcollateralDamagePotentialEnumType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TargetDistributionsequenceenvironmentalVectorsCriteriaGroupschema_TargetDistribution_TtargetDistributionEnumType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ConfidentialityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_ConfidentialityRequirement_TciaRequirementEnumType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IntegrityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_IntegrityRequirement_TciaRequirementEnumType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AvailabilityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_AvailabilityRequirement_TciaRequirementEnumType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ExploitabilitysequencetemporalVectorsCriteriaGroupschema_Exploitability_TexploitabilityEnumType_ struct {
	Exploitability TexploitabilityEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 exploitability"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ExploitabilitysequencetemporalVectorsCriteriaGroupschema_Exploitability_TexploitabilityEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExploitabilitysequencetemporalVectorsCriteriaGroupschema_Exploitability_TexploitabilityEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ExploitabilitysequencetemporalVectorsCriteriaGroupschema_Exploitability_TexploitabilityEnumType_ instance.
func (me *XsdGoPkgHasElem_ExploitabilitysequencetemporalVectorsCriteriaGroupschema_Exploitability_TexploitabilityEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ExploitabilitysequencetemporalVectorsCriteriaGroupschema_Exploitability_TexploitabilityEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RemediationLevelsequencetemporalVectorsCriteriaGroupschema_RemediationLevel_TremediationLevelEnumType_ struct {
	RemediationLevel TremediationLevelEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 remediation-level"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RemediationLevelsequencetemporalVectorsCriteriaGroupschema_RemediationLevel_TremediationLevelEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RemediationLevelsequencetemporalVectorsCriteriaGroupschema_RemediationLevel_TremediationLevelEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_RemediationLevelsequencetemporalVectorsCriteriaGroupschema_RemediationLevel_TremediationLevelEnumType_ instance.
func (me *XsdGoPkgHasElem_RemediationLevelsequencetemporalVectorsCriteriaGroupschema_RemediationLevel_TremediationLevelEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RemediationLevelsequencetemporalVectorsCriteriaGroupschema_RemediationLevel_TremediationLevelEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ReportConfidencesequencetemporalVectorsCriteriaGroupschema_ReportConfidence_TconfidenceEnumType_ struct {
	ReportConfidence TconfidenceEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 report-confidence"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReportConfidencesequencetemporalVectorsCriteriaGroupschema_ReportConfidence_TconfidenceEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReportConfidencesequencetemporalVectorsCriteriaGroupschema_ReportConfidence_TconfidenceEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ReportConfidencesequencetemporalVectorsCriteriaGroupschema_ReportConfidence_TconfidenceEnumType_ instance.
func (me *XsdGoPkgHasElem_ReportConfidencesequencetemporalVectorsCriteriaGroupschema_ReportConfidence_TconfidenceEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReportConfidencesequencetemporalVectorsCriteriaGroupschema_ReportConfidence_TconfidenceEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_TemporalVectorsCriteriaGroup struct {
	XsdGoPkgHasElem_ExploitabilitysequencetemporalVectorsCriteriaGroupschema_Exploitability_TexploitabilityEnumType_

	XsdGoPkgHasElem_RemediationLevelsequencetemporalVectorsCriteriaGroupschema_RemediationLevel_TremediationLevelEnumType_

	XsdGoPkgHasElem_ReportConfidencesequencetemporalVectorsCriteriaGroupschema_ReportConfidence_TconfidenceEnumType_
}

//	If the WalkHandlers.XsdGoPkgHasGroup_TemporalVectorsCriteriaGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_TemporalVectorsCriteriaGroup instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_TemporalVectorsCriteriaGroup instance.
func (me *XsdGoPkgHasGroup_TemporalVectorsCriteriaGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_TemporalVectorsCriteriaGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ExploitabilitysequencetemporalVectorsCriteriaGroupschema_Exploitability_TexploitabilityEnumType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RemediationLevelsequencetemporalVectorsCriteriaGroupschema_RemediationLevel_TremediationLevelEnumType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ReportConfidencesequencetemporalVectorsCriteriaGroupschema_ReportConfidence_TconfidenceEnumType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Indicates if the metrics have been upgraded from a previous version of CVSS.  If fields that were approximated will have an approximated attribute set to 'true'.
type XsdGoPkgHasAttr_UpgradedFromVersion_XsdtDecimal_ struct {
	//	Indicates if the metrics have been upgraded from a previous version of CVSS.  If fields that were approximated will have an approximated attribute set to 'true'.
	UpgradedFromVersion xsdt.Decimal `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 upgraded-from-version,attr"`
}

type XsdGoPkgHasElems_GeneratedOnDatetimesequenceextensioncomplexContentenvironmentalMetricsTypeschema_GeneratedOnDatetime_XsdtDateTime_ struct {
	GeneratedOnDatetimes []xsdt.DateTime `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 generated-on-datetime"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GeneratedOnDatetimesequenceextensioncomplexContentenvironmentalMetricsTypeschema_GeneratedOnDatetime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GeneratedOnDatetimesequenceextensioncomplexContentenvironmentalMetricsTypeschema_GeneratedOnDatetime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GeneratedOnDatetimesequenceextensioncomplexContentenvironmentalMetricsTypeschema_GeneratedOnDatetime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElems_GeneratedOnDatetimesequenceextensioncomplexContentenvironmentalMetricsTypeschema_GeneratedOnDatetime_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GeneratedOnDatetimesequenceextensioncomplexContentenvironmentalMetricsTypeschema_GeneratedOnDatetime_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Base impact sub-score assigned to a vulnerability by a source
//	Value restriction to single decimal values from 0.0 to 10.0, as used in CVSS scores
type TzeroToTenDecimalType xsdt.Decimal

//	Since TzeroToTenDecimalType is just a simple String type, this merely sets the current value from the specified string.
func (me *TzeroToTenDecimalType) Set(s string) { (*xsdt.Decimal)(me).Set(s) }

//	Since TzeroToTenDecimalType is just a simple String type, this merely returns the current string value.
func (me TzeroToTenDecimalType) String() string { return xsdt.Decimal(me).String() }

//	This convenience method just performs a simple type conversion to TzeroToTenDecimalType's alias type xsdt.Decimal.
func (me TzeroToTenDecimalType) ToXsdtDecimal() xsdt.Decimal { return xsdt.Decimal(me) }

type XsdGoPkgHasElem_ImpactSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ImpactSubscore_TzeroToTenDecimalType_ struct {
	//	Base impact sub-score assigned to a vulnerability by a source
	ImpactSubscore TzeroToTenDecimalType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 impact-subscore"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ImpactSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ImpactSubscore_TzeroToTenDecimalType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ImpactSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ImpactSubscore_TzeroToTenDecimalType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ImpactSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ImpactSubscore_TzeroToTenDecimalType_ instance.
func (me *XsdGoPkgHasElem_ImpactSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ImpactSubscore_TzeroToTenDecimalType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ImpactSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ImpactSubscore_TzeroToTenDecimalType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GeneratedOnDatetimesequenceextensioncomplexContentenvironmentalMetricsTypeschema_GeneratedOnDatetime_XsdtDateTime_ struct {
	GeneratedOnDatetime xsdt.DateTime `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 generated-on-datetime"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GeneratedOnDatetimesequenceextensioncomplexContentenvironmentalMetricsTypeschema_GeneratedOnDatetime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GeneratedOnDatetimesequenceextensioncomplexContentenvironmentalMetricsTypeschema_GeneratedOnDatetime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_GeneratedOnDatetimesequenceextensioncomplexContentenvironmentalMetricsTypeschema_GeneratedOnDatetime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElem_GeneratedOnDatetimesequenceextensioncomplexContentenvironmentalMetricsTypeschema_GeneratedOnDatetime_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GeneratedOnDatetimesequenceextensioncomplexContentenvironmentalMetricsTypeschema_GeneratedOnDatetime_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IntegrityImpactsequencebaseVectorsGroupschema_IntegrityImpact_TciaType_ struct {
	IntegrityImpacts []*TciaType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 integrity-impact"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IntegrityImpactsequencebaseVectorsGroupschema_IntegrityImpact_TciaType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IntegrityImpactsequencebaseVectorsGroupschema_IntegrityImpact_TciaType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IntegrityImpactsequencebaseVectorsGroupschema_IntegrityImpact_TciaType_ instance.
func (me *XsdGoPkgHasElems_IntegrityImpactsequencebaseVectorsGroupschema_IntegrityImpact_TciaType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IntegrityImpactsequencebaseVectorsGroupschema_IntegrityImpact_TciaType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IntegrityImpacts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TargetDistributionsequenceenvironmentalVectorsGroupschema_TargetDistribution_TtargetDistributionType_ struct {
	TargetDistributions []*TtargetDistributionType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 target-distribution"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TargetDistributionsequenceenvironmentalVectorsGroupschema_TargetDistribution_TtargetDistributionType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TargetDistributionsequenceenvironmentalVectorsGroupschema_TargetDistribution_TtargetDistributionType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TargetDistributionsequenceenvironmentalVectorsGroupschema_TargetDistribution_TtargetDistributionType_ instance.
func (me *XsdGoPkgHasElems_TargetDistributionsequenceenvironmentalVectorsGroupschema_TargetDistribution_TtargetDistributionType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TargetDistributionsequenceenvironmentalVectorsGroupschema_TargetDistribution_TtargetDistributionType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TargetDistributions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AccessComplexitysequencebaseVectorsCriteriaGroupschema_AccessComplexity_TaccessComplexityEnumType_ struct {
	AccessComplexities []TaccessComplexityEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 access-complexity"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AccessComplexitysequencebaseVectorsCriteriaGroupschema_AccessComplexity_TaccessComplexityEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AccessComplexitysequencebaseVectorsCriteriaGroupschema_AccessComplexity_TaccessComplexityEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AccessComplexitysequencebaseVectorsCriteriaGroupschema_AccessComplexity_TaccessComplexityEnumType_ instance.
func (me *XsdGoPkgHasElems_AccessComplexitysequencebaseVectorsCriteriaGroupschema_AccessComplexity_TaccessComplexityEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AccessComplexitysequencebaseVectorsCriteriaGroupschema_AccessComplexity_TaccessComplexityEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AvailabilityImpactsequencebaseVectorsCriteriaGroupschema_AvailabilityImpact_TciaEnumType_ struct {
	AvailabilityImpacts []TciaEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 availability-impact"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AvailabilityImpactsequencebaseVectorsCriteriaGroupschema_AvailabilityImpact_TciaEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AvailabilityImpactsequencebaseVectorsCriteriaGroupschema_AvailabilityImpact_TciaEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AvailabilityImpactsequencebaseVectorsCriteriaGroupschema_AvailabilityImpact_TciaEnumType_ instance.
func (me *XsdGoPkgHasElems_AvailabilityImpactsequencebaseVectorsCriteriaGroupschema_AvailabilityImpact_TciaEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AvailabilityImpactsequencebaseVectorsCriteriaGroupschema_AvailabilityImpact_TciaEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RemediationLevelsequencetemporalVectorsCriteriaGroupschema_RemediationLevel_TremediationLevelEnumType_ struct {
	RemediationLevels []TremediationLevelEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 remediation-level"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RemediationLevelsequencetemporalVectorsCriteriaGroupschema_RemediationLevel_TremediationLevelEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RemediationLevelsequencetemporalVectorsCriteriaGroupschema_RemediationLevel_TremediationLevelEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RemediationLevelsequencetemporalVectorsCriteriaGroupschema_RemediationLevel_TremediationLevelEnumType_ instance.
func (me *XsdGoPkgHasElems_RemediationLevelsequencetemporalVectorsCriteriaGroupschema_RemediationLevel_TremediationLevelEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RemediationLevelsequencetemporalVectorsCriteriaGroupschema_RemediationLevel_TremediationLevelEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Base type for metrics that defines common attributes of all metrics.
type TmetricsType struct {
	//	Indicates if the metrics have been upgraded from a previous version of CVSS.  If fields that were approximated will have an approximated attribute set to 'true'.
	XsdGoPkgHasAttr_UpgradedFromVersion_XsdtDecimal_
}

//	If the WalkHandlers.TmetricsType function is not nil (ie. was set by outside code), calls it with this TmetricsType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TmetricsType instance.
func (me *TmetricsType) Walk() (err error) {
	if fn := WalkHandlers.TmetricsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The temporal score is the temporal multiplier times the base score.
type XsdGoPkgHasElem_ScoresequenceextensioncomplexContenttemporalMetricsTypeschema_Score_TzeroToTenDecimalType_ struct {
	//	The temporal score is the temporal multiplier times the base score.
	Score TzeroToTenDecimalType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 score"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ScoresequenceextensioncomplexContenttemporalMetricsTypeschema_Score_TzeroToTenDecimalType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ScoresequenceextensioncomplexContenttemporalMetricsTypeschema_Score_TzeroToTenDecimalType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ScoresequenceextensioncomplexContenttemporalMetricsTypeschema_Score_TzeroToTenDecimalType_ instance.
func (me *XsdGoPkgHasElem_ScoresequenceextensioncomplexContenttemporalMetricsTypeschema_Score_TzeroToTenDecimalType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ScoresequenceextensioncomplexContenttemporalMetricsTypeschema_Score_TzeroToTenDecimalType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The temporal multiplier is a number between zero and one.  Reference the CVSS standard for computation.
type XsdGoPkgHasElem_TemporalMultipliersequenceextensioncomplexContenttemporalMetricsTypeschema_TemporalMultiplier_XsdtDecimal_ struct {
	//	The temporal multiplier is a number between zero and one.  Reference the CVSS standard for computation.
	TemporalMultiplier xsdt.Decimal `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 temporal-multiplier"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TemporalMultipliersequenceextensioncomplexContenttemporalMetricsTypeschema_TemporalMultiplier_XsdtDecimal_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TemporalMultipliersequenceextensioncomplexContenttemporalMetricsTypeschema_TemporalMultiplier_XsdtDecimal_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TemporalMultipliersequenceextensioncomplexContenttemporalMetricsTypeschema_TemporalMultiplier_XsdtDecimal_ instance.
func (me *XsdGoPkgHasElem_TemporalMultipliersequenceextensioncomplexContenttemporalMetricsTypeschema_TemporalMultiplier_XsdtDecimal_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TemporalMultipliersequenceextensioncomplexContenttemporalMetricsTypeschema_TemporalMultiplier_XsdtDecimal_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SourcesequenceextensioncomplexContenttemporalMetricsTypeschema_Source_XsdtAnyURI_ struct {
	Source xsdt.AnyURI `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 source"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SourcesequenceextensioncomplexContenttemporalMetricsTypeschema_Source_XsdtAnyURI_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SourcesequenceextensioncomplexContenttemporalMetricsTypeschema_Source_XsdtAnyURI_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SourcesequenceextensioncomplexContenttemporalMetricsTypeschema_Source_XsdtAnyURI_ instance.
func (me *XsdGoPkgHasElem_SourcesequenceextensioncomplexContenttemporalMetricsTypeschema_Source_XsdtAnyURI_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SourcesequenceextensioncomplexContenttemporalMetricsTypeschema_Source_XsdtAnyURI_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtemporalMetricsType struct {
	//	The temporal score is the temporal multiplier times the base score.
	XsdGoPkgHasElem_ScoresequenceextensioncomplexContenttemporalMetricsTypeschema_Score_TzeroToTenDecimalType_

	//	The temporal multiplier is a number between zero and one.  Reference the CVSS standard for computation.
	XsdGoPkgHasElem_TemporalMultipliersequenceextensioncomplexContenttemporalMetricsTypeschema_TemporalMultiplier_XsdtDecimal_

	XsdGoPkgHasElem_SourcesequenceextensioncomplexContenttemporalMetricsTypeschema_Source_XsdtAnyURI_

	XsdGoPkgHasElem_GeneratedOnDatetimesequenceextensioncomplexContentenvironmentalMetricsTypeschema_GeneratedOnDatetime_XsdtDateTime_

	XsdGoPkgHasGroup_TemporalVectorsGroup

	TmetricsType
}

//	If the WalkHandlers.TtemporalMetricsType function is not nil (ie. was set by outside code), calls it with this TtemporalMetricsType instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TtemporalMetricsType instance.
func (me *TtemporalMetricsType) Walk() (err error) {
	if fn := WalkHandlers.TtemporalMetricsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TemporalMultipliersequenceextensioncomplexContenttemporalMetricsTypeschema_TemporalMultiplier_XsdtDecimal_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SourcesequenceextensioncomplexContenttemporalMetricsTypeschema_Source_XsdtAnyURI_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GeneratedOnDatetimesequenceextensioncomplexContentenvironmentalMetricsTypeschema_GeneratedOnDatetime_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroup_TemporalVectorsGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TmetricsType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ScoresequenceextensioncomplexContenttemporalMetricsTypeschema_Score_TzeroToTenDecimalType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TemporalMetricssequencecvssTypeschema_TemporalMetrics_TtemporalMetricsType_ struct {
	TemporalMetrics *TtemporalMetricsType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 temporal_metrics"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TemporalMetricssequencecvssTypeschema_TemporalMetrics_TtemporalMetricsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TemporalMetricssequencecvssTypeschema_TemporalMetrics_TtemporalMetricsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TemporalMetricssequencecvssTypeschema_TemporalMetrics_TtemporalMetricsType_ instance.
func (me *XsdGoPkgHasElem_TemporalMetricssequencecvssTypeschema_TemporalMetrics_TtemporalMetricsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TemporalMetricssequencecvssTypeschema_TemporalMetrics_TtemporalMetricsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TemporalMetrics.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AuthenticationsequencebaseVectorsGroupschema_Authentication_TauthenticationType_ struct {
	Authentications []*TauthenticationType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 authentication"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AuthenticationsequencebaseVectorsGroupschema_Authentication_TauthenticationType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AuthenticationsequencebaseVectorsGroupschema_Authentication_TauthenticationType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AuthenticationsequencebaseVectorsGroupschema_Authentication_TauthenticationType_ instance.
func (me *XsdGoPkgHasElems_AuthenticationsequencebaseVectorsGroupschema_Authentication_TauthenticationType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AuthenticationsequencebaseVectorsGroupschema_Authentication_TauthenticationType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Authentications {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ConfidentialityRequirementsequenceenvironmentalVectorsGroupschema_ConfidentialityRequirement_TciaRequirementType_ struct {
	ConfidentialityRequirements []*TciaRequirementType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 confidentiality-requirement"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ConfidentialityRequirementsequenceenvironmentalVectorsGroupschema_ConfidentialityRequirement_TciaRequirementType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ConfidentialityRequirementsequenceenvironmentalVectorsGroupschema_ConfidentialityRequirement_TciaRequirementType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ConfidentialityRequirementsequenceenvironmentalVectorsGroupschema_ConfidentialityRequirement_TciaRequirementType_ instance.
func (me *XsdGoPkgHasElems_ConfidentialityRequirementsequenceenvironmentalVectorsGroupschema_ConfidentialityRequirement_TciaRequirementType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ConfidentialityRequirementsequenceenvironmentalVectorsGroupschema_ConfidentialityRequirement_TciaRequirementType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ConfidentialityRequirements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Base exploit sub-score assigned to a vulnerability by a source
type XsdGoPkgHasElem_ExploitSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ExploitSubscore_TzeroToTenDecimalType_ struct {
	//	Base exploit sub-score assigned to a vulnerability by a source
	ExploitSubscore TzeroToTenDecimalType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 exploit-subscore"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ExploitSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ExploitSubscore_TzeroToTenDecimalType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExploitSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ExploitSubscore_TzeroToTenDecimalType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ExploitSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ExploitSubscore_TzeroToTenDecimalType_ instance.
func (me *XsdGoPkgHasElem_ExploitSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ExploitSubscore_TzeroToTenDecimalType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ExploitSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ExploitSubscore_TzeroToTenDecimalType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TbaseMetricsType struct {
	XsdGoPkgHasGroup_BaseVectorsGroup

	TmetricsType

	//	Base severity score assigned to a vulnerability by a source
	XsdGoPkgHasElem_ScoresequenceextensioncomplexContenttemporalMetricsTypeschema_Score_TzeroToTenDecimalType_

	//	Base exploit sub-score assigned to a vulnerability by a source
	XsdGoPkgHasElem_ExploitSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ExploitSubscore_TzeroToTenDecimalType_

	//	Base impact sub-score assigned to a vulnerability by a source
	XsdGoPkgHasElem_ImpactSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ImpactSubscore_TzeroToTenDecimalType_

	//	Data source the vector was obtained from.  Example:  http://nvd.nist.gov or com.symantec.deepsight
	XsdGoPkgHasElem_SourcesequenceextensioncomplexContenttemporalMetricsTypeschema_Source_XsdtAnyURI_

	XsdGoPkgHasElem_GeneratedOnDatetimesequenceextensioncomplexContentenvironmentalMetricsTypeschema_GeneratedOnDatetime_XsdtDateTime_
}

//	If the WalkHandlers.TbaseMetricsType function is not nil (ie. was set by outside code), calls it with this TbaseMetricsType instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TbaseMetricsType instance.
func (me *TbaseMetricsType) Walk() (err error) {
	if fn := WalkHandlers.TbaseMetricsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_GeneratedOnDatetimesequenceextensioncomplexContentenvironmentalMetricsTypeschema_GeneratedOnDatetime_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroup_BaseVectorsGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TmetricsType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ScoresequenceextensioncomplexContenttemporalMetricsTypeschema_Score_TzeroToTenDecimalType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ExploitSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ExploitSubscore_TzeroToTenDecimalType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ImpactSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ImpactSubscore_TzeroToTenDecimalType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SourcesequenceextensioncomplexContenttemporalMetricsTypeschema_Source_XsdtAnyURI_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BaseMetricssequencecvssTypeschema_BaseMetrics_TbaseMetricsType_ struct {
	BaseMetricses []*TbaseMetricsType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 base_metrics"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BaseMetricssequencecvssTypeschema_BaseMetrics_TbaseMetricsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BaseMetricssequencecvssTypeschema_BaseMetrics_TbaseMetricsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BaseMetricssequencecvssTypeschema_BaseMetrics_TbaseMetricsType_ instance.
func (me *XsdGoPkgHasElems_BaseMetricssequencecvssTypeschema_BaseMetrics_TbaseMetricsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BaseMetricssequencecvssTypeschema_BaseMetrics_TbaseMetricsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BaseMetricses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ReportConfidencesequencetemporalVectorsCriteriaGroupschema_ReportConfidence_TconfidenceEnumType_ struct {
	ReportConfidences []TconfidenceEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 report-confidence"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReportConfidencesequencetemporalVectorsCriteriaGroupschema_ReportConfidence_TconfidenceEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReportConfidencesequencetemporalVectorsCriteriaGroupschema_ReportConfidence_TconfidenceEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReportConfidencesequencetemporalVectorsCriteriaGroupschema_ReportConfidence_TconfidenceEnumType_ instance.
func (me *XsdGoPkgHasElems_ReportConfidencesequencetemporalVectorsCriteriaGroupschema_ReportConfidence_TconfidenceEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReportConfidencesequencetemporalVectorsCriteriaGroupschema_ReportConfidence_TconfidenceEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IntegrityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_IntegrityRequirement_TciaRequirementEnumType_ struct {
	IntegrityRequirements []TciaRequirementEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 integrity-requirement"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IntegrityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_IntegrityRequirement_TciaRequirementEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IntegrityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_IntegrityRequirement_TciaRequirementEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IntegrityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_IntegrityRequirement_TciaRequirementEnumType_ instance.
func (me *XsdGoPkgHasElems_IntegrityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_IntegrityRequirement_TciaRequirementEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IntegrityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_IntegrityRequirement_TciaRequirementEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TenvironmentalMetricsType struct {
	XsdGoPkgHasElem_ScoresequenceextensioncomplexContenttemporalMetricsTypeschema_Score_TzeroToTenDecimalType_

	//	Data source the vector was obtained from.  Example:  gov.nist.nvd or com.symantec.deepsight
	XsdGoPkgHasElem_SourcesequenceextensioncomplexContenttemporalMetricsTypeschema_Source_XsdtAnyURI_

	XsdGoPkgHasElem_GeneratedOnDatetimesequenceextensioncomplexContentenvironmentalMetricsTypeschema_GeneratedOnDatetime_XsdtDateTime_

	XsdGoPkgHasGroup_EnvironmentalVectorsGroup

	TmetricsType
}

//	If the WalkHandlers.TenvironmentalMetricsType function is not nil (ie. was set by outside code), calls it with this TenvironmentalMetricsType instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TenvironmentalMetricsType instance.
func (me *TenvironmentalMetricsType) Walk() (err error) {
	if fn := WalkHandlers.TenvironmentalMetricsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TmetricsType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ScoresequenceextensioncomplexContenttemporalMetricsTypeschema_Score_TzeroToTenDecimalType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SourcesequenceextensioncomplexContenttemporalMetricsTypeschema_Source_XsdtAnyURI_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GeneratedOnDatetimesequenceextensioncomplexContentenvironmentalMetricsTypeschema_GeneratedOnDatetime_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroup_EnvironmentalVectorsGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EnvironmentalMetricssequencecvssTypeschema_EnvironmentalMetrics_TenvironmentalMetricsType_ struct {
	EnvironmentalMetricses []*TenvironmentalMetricsType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 environmental_metrics"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EnvironmentalMetricssequencecvssTypeschema_EnvironmentalMetrics_TenvironmentalMetricsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EnvironmentalMetricssequencecvssTypeschema_EnvironmentalMetrics_TenvironmentalMetricsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EnvironmentalMetricssequencecvssTypeschema_EnvironmentalMetrics_TenvironmentalMetricsType_ instance.
func (me *XsdGoPkgHasElems_EnvironmentalMetricssequencecvssTypeschema_EnvironmentalMetrics_TenvironmentalMetricsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EnvironmentalMetricssequencecvssTypeschema_EnvironmentalMetrics_TenvironmentalMetricsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EnvironmentalMetricses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SourcesequenceextensioncomplexContenttemporalMetricsTypeschema_Source_XsdtAnyURI_ struct {
	Sources []xsdt.AnyURI `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 source"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SourcesequenceextensioncomplexContenttemporalMetricsTypeschema_Source_XsdtAnyURI_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SourcesequenceextensioncomplexContenttemporalMetricsTypeschema_Source_XsdtAnyURI_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SourcesequenceextensioncomplexContenttemporalMetricsTypeschema_Source_XsdtAnyURI_ instance.
func (me *XsdGoPkgHasElems_SourcesequenceextensioncomplexContenttemporalMetricsTypeschema_Source_XsdtAnyURI_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SourcesequenceextensioncomplexContenttemporalMetricsTypeschema_Source_XsdtAnyURI_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	"This schema was intentionally designed to avoid mixing classes and attributes between CVSS version 1, CVSS version 2, and future versions. Scores in the CVSS system are interdependent.  The temporal score is a multiplier of the base score.  The environmental score, in turn, is a multiplier of the temporal score.  The ability to transfer these scores independently is provided on the assumption that the user understands the business logic. For any given metric, it is preferred that the score, as a minimum is provided, however the score can be re-created from the metrics or the multiplier and any scores they are dependent on."
type XsdGoPkgHasElems_TemporalMetricssequencecvssTypeschema_TemporalMetrics_TtemporalMetricsType_ struct {
	TemporalMetricses []*TtemporalMetricsType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 temporal_metrics"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TemporalMetricssequencecvssTypeschema_TemporalMetrics_TtemporalMetricsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TemporalMetricssequencecvssTypeschema_TemporalMetrics_TtemporalMetricsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TemporalMetricssequencecvssTypeschema_TemporalMetrics_TtemporalMetricsType_ instance.
func (me *XsdGoPkgHasElems_TemporalMetricssequencecvssTypeschema_TemporalMetrics_TtemporalMetricsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TemporalMetricssequencecvssTypeschema_TemporalMetrics_TtemporalMetricsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TemporalMetricses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcvssType struct {
	XsdGoPkgHasElems_TemporalMetricssequencecvssTypeschema_TemporalMetrics_TtemporalMetricsType_

	XsdGoPkgHasElems_BaseMetricssequencecvssTypeschema_BaseMetrics_TbaseMetricsType_

	XsdGoPkgHasElems_EnvironmentalMetricssequencecvssTypeschema_EnvironmentalMetrics_TenvironmentalMetricsType_
}

//	If the WalkHandlers.TcvssType function is not nil (ie. was set by outside code), calls it with this TcvssType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TcvssType instance.
func (me *TcvssType) Walk() (err error) {
	if fn := WalkHandlers.TcvssType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_BaseMetricssequencecvssTypeschema_BaseMetrics_TbaseMetricsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_EnvironmentalMetricssequencecvssTypeschema_EnvironmentalMetrics_TenvironmentalMetricsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_TemporalMetricssequencecvssTypeschema_TemporalMetrics_TtemporalMetricsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_BaseMetricssequencerestrictioncomplexContentcvssImpactTypeschema_BaseMetrics_TbaseMetricsType_ struct {
	BaseMetrics *TbaseMetricsType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 base_metrics"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BaseMetricssequencerestrictioncomplexContentcvssImpactTypeschema_BaseMetrics_TbaseMetricsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BaseMetricssequencerestrictioncomplexContentcvssImpactTypeschema_BaseMetrics_TbaseMetricsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BaseMetricssequencerestrictioncomplexContentcvssImpactTypeschema_BaseMetrics_TbaseMetricsType_ instance.
func (me *XsdGoPkgHasElem_BaseMetricssequencerestrictioncomplexContentcvssImpactTypeschema_BaseMetrics_TbaseMetricsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BaseMetricssequencerestrictioncomplexContentcvssImpactTypeschema_BaseMetrics_TbaseMetricsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BaseMetrics.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EnvironmentalMetricssequencerestrictioncomplexContentcvssImpactTypeschema_EnvironmentalMetrics_TenvironmentalMetricsType_ struct {
	EnvironmentalMetrics *TenvironmentalMetricsType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 environmental_metrics"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EnvironmentalMetricssequencerestrictioncomplexContentcvssImpactTypeschema_EnvironmentalMetrics_TenvironmentalMetricsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EnvironmentalMetricssequencerestrictioncomplexContentcvssImpactTypeschema_EnvironmentalMetrics_TenvironmentalMetricsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EnvironmentalMetricssequencerestrictioncomplexContentcvssImpactTypeschema_EnvironmentalMetrics_TenvironmentalMetricsType_ instance.
func (me *XsdGoPkgHasElem_EnvironmentalMetricssequencerestrictioncomplexContentcvssImpactTypeschema_EnvironmentalMetrics_TenvironmentalMetricsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EnvironmentalMetricssequencerestrictioncomplexContentcvssImpactTypeschema_EnvironmentalMetrics_TenvironmentalMetricsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EnvironmentalMetrics.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcvssImpactType struct {
	XsdGoPkgHasElem_TemporalMetricssequencecvssTypeschema_TemporalMetrics_TtemporalMetricsType_

	TcvssType

	XsdGoPkgHasElem_BaseMetricssequencerestrictioncomplexContentcvssImpactTypeschema_BaseMetrics_TbaseMetricsType_

	XsdGoPkgHasElem_EnvironmentalMetricssequencerestrictioncomplexContentcvssImpactTypeschema_EnvironmentalMetrics_TenvironmentalMetricsType_
}

//	If the WalkHandlers.TcvssImpactType function is not nil (ie. was set by outside code), calls it with this TcvssImpactType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TcvssImpactType instance.
func (me *TcvssImpactType) Walk() (err error) {
	if fn := WalkHandlers.TcvssImpactType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TemporalMetricssequencecvssTypeschema_TemporalMetrics_TtemporalMetricsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TcvssType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_BaseMetricssequencerestrictioncomplexContentcvssImpactTypeschema_BaseMetrics_TbaseMetricsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EnvironmentalMetricssequencerestrictioncomplexContentcvssImpactTypeschema_EnvironmentalMetrics_TenvironmentalMetricsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AvailabilityImpactsequencebaseVectorsGroupschema_AvailabilityImpact_TciaType_ struct {
	AvailabilityImpacts []*TciaType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 availability-impact"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AvailabilityImpactsequencebaseVectorsGroupschema_AvailabilityImpact_TciaType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AvailabilityImpactsequencebaseVectorsGroupschema_AvailabilityImpact_TciaType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AvailabilityImpactsequencebaseVectorsGroupschema_AvailabilityImpact_TciaType_ instance.
func (me *XsdGoPkgHasElems_AvailabilityImpactsequencebaseVectorsGroupschema_AvailabilityImpact_TciaType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AvailabilityImpactsequencebaseVectorsGroupschema_AvailabilityImpact_TciaType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AvailabilityImpacts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AccessVectorsequencebaseVectorsGroupschema_AccessVector_TaccessVectorType_ struct {
	AccessVectors []*TaccessVectorType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 access-vector"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AccessVectorsequencebaseVectorsGroupschema_AccessVector_TaccessVectorType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AccessVectorsequencebaseVectorsGroupschema_AccessVector_TaccessVectorType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AccessVectorsequencebaseVectorsGroupschema_AccessVector_TaccessVectorType_ instance.
func (me *XsdGoPkgHasElems_AccessVectorsequencebaseVectorsGroupschema_AccessVector_TaccessVectorType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AccessVectorsequencebaseVectorsGroupschema_AccessVector_TaccessVectorType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AccessVectors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ReportConfidencesequencetemporalVectorsGroupschema_ReportConfidence_TconfidenceType_ struct {
	ReportConfidences []*TconfidenceType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 report-confidence"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReportConfidencesequencetemporalVectorsGroupschema_ReportConfidence_TconfidenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReportConfidencesequencetemporalVectorsGroupschema_ReportConfidence_TconfidenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReportConfidencesequencetemporalVectorsGroupschema_ReportConfidence_TconfidenceType_ instance.
func (me *XsdGoPkgHasElems_ReportConfidencesequencetemporalVectorsGroupschema_ReportConfidence_TconfidenceType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReportConfidencesequencetemporalVectorsGroupschema_ReportConfidence_TconfidenceType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ReportConfidences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ConfidentialityImpactsequencebaseVectorsCriteriaGroupschema_ConfidentialityImpact_TciaEnumType_ struct {
	ConfidentialityImpacts []TciaEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 confidentiality-impact"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ConfidentialityImpactsequencebaseVectorsCriteriaGroupschema_ConfidentialityImpact_TciaEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ConfidentialityImpactsequencebaseVectorsCriteriaGroupschema_ConfidentialityImpact_TciaEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ConfidentialityImpactsequencebaseVectorsCriteriaGroupschema_ConfidentialityImpact_TciaEnumType_ instance.
func (me *XsdGoPkgHasElems_ConfidentialityImpactsequencebaseVectorsCriteriaGroupschema_ConfidentialityImpact_TciaEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ConfidentialityImpactsequencebaseVectorsCriteriaGroupschema_ConfidentialityImpact_TciaEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The temporal multiplier is a number between zero and one.  Reference the CVSS standard for computation.
type XsdGoPkgHasElems_TemporalMultipliersequenceextensioncomplexContenttemporalMetricsTypeschema_TemporalMultiplier_XsdtDecimal_ struct {
	//	The temporal multiplier is a number between zero and one.  Reference the CVSS standard for computation.
	TemporalMultipliers []xsdt.Decimal `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 temporal-multiplier"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TemporalMultipliersequenceextensioncomplexContenttemporalMetricsTypeschema_TemporalMultiplier_XsdtDecimal_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TemporalMultipliersequenceextensioncomplexContenttemporalMetricsTypeschema_TemporalMultiplier_XsdtDecimal_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TemporalMultipliersequenceextensioncomplexContenttemporalMetricsTypeschema_TemporalMultiplier_XsdtDecimal_ instance.
func (me *XsdGoPkgHasElems_TemporalMultipliersequenceextensioncomplexContenttemporalMetricsTypeschema_TemporalMultiplier_XsdtDecimal_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TemporalMultipliersequenceextensioncomplexContenttemporalMetricsTypeschema_TemporalMultiplier_XsdtDecimal_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Base exploit sub-score assigned to a vulnerability by a source
type XsdGoPkgHasElems_ExploitSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ExploitSubscore_TzeroToTenDecimalType_ struct {
	//	Base exploit sub-score assigned to a vulnerability by a source
	ExploitSubscores []TzeroToTenDecimalType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 exploit-subscore"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ExploitSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ExploitSubscore_TzeroToTenDecimalType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExploitSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ExploitSubscore_TzeroToTenDecimalType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExploitSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ExploitSubscore_TzeroToTenDecimalType_ instance.
func (me *XsdGoPkgHasElems_ExploitSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ExploitSubscore_TzeroToTenDecimalType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ExploitSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ExploitSubscore_TzeroToTenDecimalType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AvailabilityRequirementsequenceenvironmentalVectorsGroupschema_AvailabilityRequirement_TciaRequirementType_ struct {
	AvailabilityRequirements []*TciaRequirementType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 availability-requirement"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AvailabilityRequirementsequenceenvironmentalVectorsGroupschema_AvailabilityRequirement_TciaRequirementType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AvailabilityRequirementsequenceenvironmentalVectorsGroupschema_AvailabilityRequirement_TciaRequirementType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AvailabilityRequirementsequenceenvironmentalVectorsGroupschema_AvailabilityRequirement_TciaRequirementType_ instance.
func (me *XsdGoPkgHasElems_AvailabilityRequirementsequenceenvironmentalVectorsGroupschema_AvailabilityRequirement_TciaRequirementType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AvailabilityRequirementsequenceenvironmentalVectorsGroupschema_AvailabilityRequirement_TciaRequirementType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AvailabilityRequirements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The temporal score is the temporal multiplier times the base score.
type XsdGoPkgHasElems_ScoresequenceextensioncomplexContenttemporalMetricsTypeschema_Score_TzeroToTenDecimalType_ struct {
	//	The temporal score is the temporal multiplier times the base score.
	Scores []TzeroToTenDecimalType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 score"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ScoresequenceextensioncomplexContenttemporalMetricsTypeschema_Score_TzeroToTenDecimalType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ScoresequenceextensioncomplexContenttemporalMetricsTypeschema_Score_TzeroToTenDecimalType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ScoresequenceextensioncomplexContenttemporalMetricsTypeschema_Score_TzeroToTenDecimalType_ instance.
func (me *XsdGoPkgHasElems_ScoresequenceextensioncomplexContenttemporalMetricsTypeschema_Score_TzeroToTenDecimalType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ScoresequenceextensioncomplexContenttemporalMetricsTypeschema_Score_TzeroToTenDecimalType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ConfidentialityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_ConfidentialityRequirement_TciaRequirementEnumType_ struct {
	ConfidentialityRequirements []TciaRequirementEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 confidentiality-requirement"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ConfidentialityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_ConfidentialityRequirement_TciaRequirementEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ConfidentialityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_ConfidentialityRequirement_TciaRequirementEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ConfidentialityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_ConfidentialityRequirement_TciaRequirementEnumType_ instance.
func (me *XsdGoPkgHasElems_ConfidentialityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_ConfidentialityRequirement_TciaRequirementEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ConfidentialityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_ConfidentialityRequirement_TciaRequirementEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IntegrityRequirementsequenceenvironmentalVectorsGroupschema_IntegrityRequirement_TciaRequirementType_ struct {
	IntegrityRequirements []*TciaRequirementType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 integrity-requirement"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IntegrityRequirementsequenceenvironmentalVectorsGroupschema_IntegrityRequirement_TciaRequirementType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IntegrityRequirementsequenceenvironmentalVectorsGroupschema_IntegrityRequirement_TciaRequirementType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IntegrityRequirementsequenceenvironmentalVectorsGroupschema_IntegrityRequirement_TciaRequirementType_ instance.
func (me *XsdGoPkgHasElems_IntegrityRequirementsequenceenvironmentalVectorsGroupschema_IntegrityRequirement_TciaRequirementType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IntegrityRequirementsequenceenvironmentalVectorsGroupschema_IntegrityRequirement_TciaRequirementType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IntegrityRequirements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CollateralDamagePotentialsequenceenvironmentalVectorsCriteriaGroupschema_CollateralDamagePotential_TcollateralDamagePotentialEnumType_ struct {
	CollateralDamagePotentials []TcollateralDamagePotentialEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 collateral-damage-potential"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CollateralDamagePotentialsequenceenvironmentalVectorsCriteriaGroupschema_CollateralDamagePotential_TcollateralDamagePotentialEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CollateralDamagePotentialsequenceenvironmentalVectorsCriteriaGroupschema_CollateralDamagePotential_TcollateralDamagePotentialEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CollateralDamagePotentialsequenceenvironmentalVectorsCriteriaGroupschema_CollateralDamagePotential_TcollateralDamagePotentialEnumType_ instance.
func (me *XsdGoPkgHasElems_CollateralDamagePotentialsequenceenvironmentalVectorsCriteriaGroupschema_CollateralDamagePotential_TcollateralDamagePotentialEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CollateralDamagePotentialsequenceenvironmentalVectorsCriteriaGroupschema_CollateralDamagePotential_TcollateralDamagePotentialEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Base impact sub-score assigned to a vulnerability by a source
type XsdGoPkgHasElems_ImpactSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ImpactSubscore_TzeroToTenDecimalType_ struct {
	//	Base impact sub-score assigned to a vulnerability by a source
	ImpactSubscores []TzeroToTenDecimalType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 impact-subscore"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ImpactSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ImpactSubscore_TzeroToTenDecimalType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ImpactSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ImpactSubscore_TzeroToTenDecimalType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ImpactSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ImpactSubscore_TzeroToTenDecimalType_ instance.
func (me *XsdGoPkgHasElems_ImpactSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ImpactSubscore_TzeroToTenDecimalType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ImpactSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ImpactSubscore_TzeroToTenDecimalType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TargetDistributionsequenceenvironmentalVectorsCriteriaGroupschema_TargetDistribution_TtargetDistributionEnumType_ struct {
	TargetDistributions []TtargetDistributionEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 target-distribution"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TargetDistributionsequenceenvironmentalVectorsCriteriaGroupschema_TargetDistribution_TtargetDistributionEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TargetDistributionsequenceenvironmentalVectorsCriteriaGroupschema_TargetDistribution_TtargetDistributionEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TargetDistributionsequenceenvironmentalVectorsCriteriaGroupschema_TargetDistribution_TtargetDistributionEnumType_ instance.
func (me *XsdGoPkgHasElems_TargetDistributionsequenceenvironmentalVectorsCriteriaGroupschema_TargetDistribution_TtargetDistributionEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TargetDistributionsequenceenvironmentalVectorsCriteriaGroupschema_TargetDistribution_TtargetDistributionEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CollateralDamagePotentialsequenceenvironmentalVectorsGroupschema_CollateralDamagePotential_TcollateralDamagePotentialType_ struct {
	CollateralDamagePotentials []*TcollateralDamagePotentialType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 collateral-damage-potential"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CollateralDamagePotentialsequenceenvironmentalVectorsGroupschema_CollateralDamagePotential_TcollateralDamagePotentialType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CollateralDamagePotentialsequenceenvironmentalVectorsGroupschema_CollateralDamagePotential_TcollateralDamagePotentialType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CollateralDamagePotentialsequenceenvironmentalVectorsGroupschema_CollateralDamagePotential_TcollateralDamagePotentialType_ instance.
func (me *XsdGoPkgHasElems_CollateralDamagePotentialsequenceenvironmentalVectorsGroupschema_CollateralDamagePotential_TcollateralDamagePotentialType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CollateralDamagePotentialsequenceenvironmentalVectorsGroupschema_CollateralDamagePotential_TcollateralDamagePotentialType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CollateralDamagePotentials {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AccessComplexitysequencebaseVectorsGroupschema_AccessComplexity_TaccessComplexityType_ struct {
	AccessComplexities []*TaccessComplexityType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 access-complexity"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AccessComplexitysequencebaseVectorsGroupschema_AccessComplexity_TaccessComplexityType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AccessComplexitysequencebaseVectorsGroupschema_AccessComplexity_TaccessComplexityType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AccessComplexitysequencebaseVectorsGroupschema_AccessComplexity_TaccessComplexityType_ instance.
func (me *XsdGoPkgHasElems_AccessComplexitysequencebaseVectorsGroupschema_AccessComplexity_TaccessComplexityType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AccessComplexitysequencebaseVectorsGroupschema_AccessComplexity_TaccessComplexityType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AccessComplexities {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IntegrityImpactsequencebaseVectorsCriteriaGroupschema_IntegrityImpact_TciaEnumType_ struct {
	IntegrityImpacts []TciaEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 integrity-impact"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IntegrityImpactsequencebaseVectorsCriteriaGroupschema_IntegrityImpact_TciaEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IntegrityImpactsequencebaseVectorsCriteriaGroupschema_IntegrityImpact_TciaEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IntegrityImpactsequencebaseVectorsCriteriaGroupschema_IntegrityImpact_TciaEnumType_ instance.
func (me *XsdGoPkgHasElems_IntegrityImpactsequencebaseVectorsCriteriaGroupschema_IntegrityImpact_TciaEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IntegrityImpactsequencebaseVectorsCriteriaGroupschema_IntegrityImpact_TciaEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AvailabilityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_AvailabilityRequirement_TciaRequirementEnumType_ struct {
	AvailabilityRequirements []TciaRequirementEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 availability-requirement"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AvailabilityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_AvailabilityRequirement_TciaRequirementEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AvailabilityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_AvailabilityRequirement_TciaRequirementEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AvailabilityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_AvailabilityRequirement_TciaRequirementEnumType_ instance.
func (me *XsdGoPkgHasElems_AvailabilityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_AvailabilityRequirement_TciaRequirementEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AvailabilityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_AvailabilityRequirement_TciaRequirementEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AccessVectorsequencebaseVectorsCriteriaGroupschema_AccessVector_TaccessVectorEnumType_ struct {
	AccessVectors []TaccessVectorEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 access-vector"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AccessVectorsequencebaseVectorsCriteriaGroupschema_AccessVector_TaccessVectorEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AccessVectorsequencebaseVectorsCriteriaGroupschema_AccessVector_TaccessVectorEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AccessVectorsequencebaseVectorsCriteriaGroupschema_AccessVector_TaccessVectorEnumType_ instance.
func (me *XsdGoPkgHasElems_AccessVectorsequencebaseVectorsCriteriaGroupschema_AccessVector_TaccessVectorEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AccessVectorsequencebaseVectorsCriteriaGroupschema_AccessVector_TaccessVectorEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AuthenticationsequencebaseVectorsCriteriaGroupschema_Authentication_TauthenticationEnumType_ struct {
	Authentications []TauthenticationEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 authentication"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AuthenticationsequencebaseVectorsCriteriaGroupschema_Authentication_TauthenticationEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AuthenticationsequencebaseVectorsCriteriaGroupschema_Authentication_TauthenticationEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AuthenticationsequencebaseVectorsCriteriaGroupschema_Authentication_TauthenticationEnumType_ instance.
func (me *XsdGoPkgHasElems_AuthenticationsequencebaseVectorsCriteriaGroupschema_Authentication_TauthenticationEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AuthenticationsequencebaseVectorsCriteriaGroupschema_Authentication_TauthenticationEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ExploitabilitysequencetemporalVectorsGroupschema_Exploitability_TexploitabilityType_ struct {
	Exploitabilities []*TexploitabilityType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 exploitability"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ExploitabilitysequencetemporalVectorsGroupschema_Exploitability_TexploitabilityType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExploitabilitysequencetemporalVectorsGroupschema_Exploitability_TexploitabilityType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExploitabilitysequencetemporalVectorsGroupschema_Exploitability_TexploitabilityType_ instance.
func (me *XsdGoPkgHasElems_ExploitabilitysequencetemporalVectorsGroupschema_Exploitability_TexploitabilityType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ExploitabilitysequencetemporalVectorsGroupschema_Exploitability_TexploitabilityType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Exploitabilities {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ConfidentialityImpactsequencebaseVectorsGroupschema_ConfidentialityImpact_TciaType_ struct {
	ConfidentialityImpacts []*TciaType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 confidentiality-impact"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ConfidentialityImpactsequencebaseVectorsGroupschema_ConfidentialityImpact_TciaType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ConfidentialityImpactsequencebaseVectorsGroupschema_ConfidentialityImpact_TciaType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ConfidentialityImpactsequencebaseVectorsGroupschema_ConfidentialityImpact_TciaType_ instance.
func (me *XsdGoPkgHasElems_ConfidentialityImpactsequencebaseVectorsGroupschema_ConfidentialityImpact_TciaType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ConfidentialityImpactsequencebaseVectorsGroupschema_ConfidentialityImpact_TciaType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ConfidentialityImpacts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RemediationLevelsequencetemporalVectorsGroupschema_RemediationLevel_TremediationLevelType_ struct {
	RemediationLevels []*TremediationLevelType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 remediation-level"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RemediationLevelsequencetemporalVectorsGroupschema_RemediationLevel_TremediationLevelType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RemediationLevelsequencetemporalVectorsGroupschema_RemediationLevel_TremediationLevelType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RemediationLevelsequencetemporalVectorsGroupschema_RemediationLevel_TremediationLevelType_ instance.
func (me *XsdGoPkgHasElems_RemediationLevelsequencetemporalVectorsGroupschema_RemediationLevel_TremediationLevelType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RemediationLevelsequencetemporalVectorsGroupschema_RemediationLevel_TremediationLevelType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RemediationLevels {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ExploitabilitysequencetemporalVectorsCriteriaGroupschema_Exploitability_TexploitabilityEnumType_ struct {
	Exploitabilities []TexploitabilityEnumType `xml:"http://scap.nist.gov/schema/cvss-v2/0.2 exploitability"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ExploitabilitysequencetemporalVectorsCriteriaGroupschema_Exploitability_TexploitabilityEnumType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExploitabilitysequencetemporalVectorsCriteriaGroupschema_Exploitability_TexploitabilityEnumType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExploitabilitysequencetemporalVectorsCriteriaGroupschema_Exploitability_TexploitabilityEnumType_ instance.
func (me *XsdGoPkgHasElems_ExploitabilitysequencetemporalVectorsCriteriaGroupschema_Exploitability_TexploitabilityEnumType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ExploitabilitysequencetemporalVectorsCriteriaGroupschema_Exploitability_TexploitabilityEnumType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 97 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 97 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElem_ReportConfidencesequencetemporalVectorsCriteriaGroupschema_ReportConfidence_TconfidenceEnumType_                                        func(*XsdGoPkgHasElem_ReportConfidencesequencetemporalVectorsCriteriaGroupschema_ReportConfidence_TconfidenceEnumType_, bool) error
	XsdGoPkgHasElem_TemporalMetricssequencecvssTypeschema_TemporalMetrics_TtemporalMetricsType_                                                             func(*XsdGoPkgHasElem_TemporalMetricssequencecvssTypeschema_TemporalMetrics_TtemporalMetricsType_, bool) error
	XsdGoPkgHasElems_CollateralDamagePotentialsequenceenvironmentalVectorsGroupschema_CollateralDamagePotential_TcollateralDamagePotentialType_             func(*XsdGoPkgHasElems_CollateralDamagePotentialsequenceenvironmentalVectorsGroupschema_CollateralDamagePotential_TcollateralDamagePotentialType_, bool) error
	XsdGoPkgHasElem_ExploitSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ExploitSubscore_TzeroToTenDecimalType_                              func(*XsdGoPkgHasElem_ExploitSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ExploitSubscore_TzeroToTenDecimalType_, bool) error
	XsdGoPkgHasElems_IntegrityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_IntegrityRequirement_TciaRequirementEnumType_                      func(*XsdGoPkgHasElems_IntegrityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_IntegrityRequirement_TciaRequirementEnumType_, bool) error
	XsdGoPkgHasElem_EnvironmentalMetricssequencerestrictioncomplexContentcvssImpactTypeschema_EnvironmentalMetrics_TenvironmentalMetricsType_               func(*XsdGoPkgHasElem_EnvironmentalMetricssequencerestrictioncomplexContentcvssImpactTypeschema_EnvironmentalMetrics_TenvironmentalMetricsType_, bool) error
	TcvssImpactType                                                                                                                                         func(*TcvssImpactType, bool) error
	XsdGoPkgHasElems_TemporalMultipliersequenceextensioncomplexContenttemporalMetricsTypeschema_TemporalMultiplier_XsdtDecimal_                             func(*XsdGoPkgHasElems_TemporalMultipliersequenceextensioncomplexContenttemporalMetricsTypeschema_TemporalMultiplier_XsdtDecimal_, bool) error
	XsdGoPkgHasElems_AuthenticationsequencebaseVectorsCriteriaGroupschema_Authentication_TauthenticationEnumType_                                           func(*XsdGoPkgHasElems_AuthenticationsequencebaseVectorsCriteriaGroupschema_Authentication_TauthenticationEnumType_, bool) error
	XsdGoPkgHasElem_ReportConfidencesequencetemporalVectorsGroupschema_ReportConfidence_TconfidenceType_                                                    func(*XsdGoPkgHasElem_ReportConfidencesequencetemporalVectorsGroupschema_ReportConfidence_TconfidenceType_, bool) error
	XsdGoPkgHasGroup_TemporalVectorsGroup                                                                                                                   func(*XsdGoPkgHasGroup_TemporalVectorsGroup, bool) error
	XsdGoPkgHasGroup_EnvironmentalVectorsCriteriaGroup                                                                                                      func(*XsdGoPkgHasGroup_EnvironmentalVectorsCriteriaGroup, bool) error
	XsdGoPkgHasElem_SourcesequenceextensioncomplexContenttemporalMetricsTypeschema_Source_XsdtAnyURI_                                                       func(*XsdGoPkgHasElem_SourcesequenceextensioncomplexContenttemporalMetricsTypeschema_Source_XsdtAnyURI_, bool) error
	TcollateralDamagePotentialType                                                                                                                          func(*TcollateralDamagePotentialType, bool) error
	XsdGoPkgHasElem_TargetDistributionsequenceenvironmentalVectorsGroupschema_TargetDistribution_TtargetDistributionType_                                   func(*XsdGoPkgHasElem_TargetDistributionsequenceenvironmentalVectorsGroupschema_TargetDistribution_TtargetDistributionType_, bool) error
	XsdGoPkgHasElems_AccessComplexitysequencebaseVectorsCriteriaGroupschema_AccessComplexity_TaccessComplexityEnumType_                                     func(*XsdGoPkgHasElems_AccessComplexitysequencebaseVectorsCriteriaGroupschema_AccessComplexity_TaccessComplexityEnumType_, bool) error
	XsdGoPkgHasElem_TemporalMultipliersequenceextensioncomplexContenttemporalMetricsTypeschema_TemporalMultiplier_XsdtDecimal_                              func(*XsdGoPkgHasElem_TemporalMultipliersequenceextensioncomplexContenttemporalMetricsTypeschema_TemporalMultiplier_XsdtDecimal_, bool) error
	XsdGoPkgHasElems_EnvironmentalMetricssequencecvssTypeschema_EnvironmentalMetrics_TenvironmentalMetricsType_                                             func(*XsdGoPkgHasElems_EnvironmentalMetricssequencecvssTypeschema_EnvironmentalMetrics_TenvironmentalMetricsType_, bool) error
	XsdGoPkgHasElems_AvailabilityRequirementsequenceenvironmentalVectorsGroupschema_AvailabilityRequirement_TciaRequirementType_                            func(*XsdGoPkgHasElems_AvailabilityRequirementsequenceenvironmentalVectorsGroupschema_AvailabilityRequirement_TciaRequirementType_, bool) error
	XsdGoPkgHasCdata                                                                                                                                        func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElems_ConfidentialityImpactsequencebaseVectorsGroupschema_ConfidentialityImpact_TciaType_                                                    func(*XsdGoPkgHasElems_ConfidentialityImpactsequencebaseVectorsGroupschema_ConfidentialityImpact_TciaType_, bool) error
	XsdGoPkgHasElem_IntegrityImpactsequencebaseVectorsGroupschema_IntegrityImpact_TciaType_                                                                 func(*XsdGoPkgHasElem_IntegrityImpactsequencebaseVectorsGroupschema_IntegrityImpact_TciaType_, bool) error
	XsdGoPkgHasElem_IntegrityRequirementsequenceenvironmentalVectorsGroupschema_IntegrityRequirement_TciaRequirementType_                                   func(*XsdGoPkgHasElem_IntegrityRequirementsequenceenvironmentalVectorsGroupschema_IntegrityRequirement_TciaRequirementType_, bool) error
	XsdGoPkgHasElems_TemporalMetricssequencecvssTypeschema_TemporalMetrics_TtemporalMetricsType_                                                            func(*XsdGoPkgHasElems_TemporalMetricssequencecvssTypeschema_TemporalMetrics_TtemporalMetricsType_, bool) error
	TtargetDistributionType                                                                                                                                 func(*TtargetDistributionType, bool) error
	TexploitabilityType                                                                                                                                     func(*TexploitabilityType, bool) error
	TconfidenceType                                                                                                                                         func(*TconfidenceType, bool) error
	XsdGoPkgHasElems_GeneratedOnDatetimesequenceextensioncomplexContentenvironmentalMetricsTypeschema_GeneratedOnDatetime_XsdtDateTime_                     func(*XsdGoPkgHasElems_GeneratedOnDatetimesequenceextensioncomplexContentenvironmentalMetricsTypeschema_GeneratedOnDatetime_XsdtDateTime_, bool) error
	XsdGoPkgHasElems_RemediationLevelsequencetemporalVectorsCriteriaGroupschema_RemediationLevel_TremediationLevelEnumType_                                 func(*XsdGoPkgHasElems_RemediationLevelsequencetemporalVectorsCriteriaGroupschema_RemediationLevel_TremediationLevelEnumType_, bool) error
	TmetricsType                                                                                                                                            func(*TmetricsType, bool) error
	TtemporalMetricsType                                                                                                                                    func(*TtemporalMetricsType, bool) error
	TbaseMetricsType                                                                                                                                        func(*TbaseMetricsType, bool) error
	XsdGoPkgHasElems_SourcesequenceextensioncomplexContenttemporalMetricsTypeschema_Source_XsdtAnyURI_                                                      func(*XsdGoPkgHasElems_SourcesequenceextensioncomplexContenttemporalMetricsTypeschema_Source_XsdtAnyURI_, bool) error
	XsdGoPkgHasElems_ConfidentialityImpactsequencebaseVectorsCriteriaGroupschema_ConfidentialityImpact_TciaEnumType_                                        func(*XsdGoPkgHasElems_ConfidentialityImpactsequencebaseVectorsCriteriaGroupschema_ConfidentialityImpact_TciaEnumType_, bool) error
	TaccessVectorType                                                                                                                                       func(*TaccessVectorType, bool) error
	XsdGoPkgHasGroup_BaseVectorsGroup                                                                                                                       func(*XsdGoPkgHasGroup_BaseVectorsGroup, bool) error
	XsdGoPkgHasElem_ConfidentialityImpactsequencebaseVectorsCriteriaGroupschema_ConfidentialityImpact_TciaEnumType_                                         func(*XsdGoPkgHasElem_ConfidentialityImpactsequencebaseVectorsCriteriaGroupschema_ConfidentialityImpact_TciaEnumType_, bool) error
	XsdGoPkgHasElems_ReportConfidencesequencetemporalVectorsCriteriaGroupschema_ReportConfidence_TconfidenceEnumType_                                       func(*XsdGoPkgHasElems_ReportConfidencesequencetemporalVectorsCriteriaGroupschema_ReportConfidence_TconfidenceEnumType_, bool) error
	XsdGoPkgHasElems_AvailabilityImpactsequencebaseVectorsGroupschema_AvailabilityImpact_TciaType_                                                          func(*XsdGoPkgHasElems_AvailabilityImpactsequencebaseVectorsGroupschema_AvailabilityImpact_TciaType_, bool) error
	XsdGoPkgHasElems_IntegrityRequirementsequenceenvironmentalVectorsGroupschema_IntegrityRequirement_TciaRequirementType_                                  func(*XsdGoPkgHasElems_IntegrityRequirementsequenceenvironmentalVectorsGroupschema_IntegrityRequirement_TciaRequirementType_, bool) error
	TremediationLevelType                                                                                                                                   func(*TremediationLevelType, bool) error
	XsdGoPkgHasElem_AvailabilityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_AvailabilityRequirement_TciaRequirementEnumType_                 func(*XsdGoPkgHasElem_AvailabilityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_AvailabilityRequirement_TciaRequirementEnumType_, bool) error
	XsdGoPkgHasElem_GeneratedOnDatetimesequenceextensioncomplexContentenvironmentalMetricsTypeschema_GeneratedOnDatetime_XsdtDateTime_                      func(*XsdGoPkgHasElem_GeneratedOnDatetimesequenceextensioncomplexContentenvironmentalMetricsTypeschema_GeneratedOnDatetime_XsdtDateTime_, bool) error
	XsdGoPkgHasElems_AuthenticationsequencebaseVectorsGroupschema_Authentication_TauthenticationType_                                                       func(*XsdGoPkgHasElems_AuthenticationsequencebaseVectorsGroupschema_Authentication_TauthenticationType_, bool) error
	XsdGoPkgHasElems_ExploitabilitysequencetemporalVectorsCriteriaGroupschema_Exploitability_TexploitabilityEnumType_                                       func(*XsdGoPkgHasElems_ExploitabilitysequencetemporalVectorsCriteriaGroupschema_Exploitability_TexploitabilityEnumType_, bool) error
	TaccessComplexityType                                                                                                                                   func(*TaccessComplexityType, bool) error
	XsdGoPkgHasElem_ScoresequenceextensioncomplexContenttemporalMetricsTypeschema_Score_TzeroToTenDecimalType_                                              func(*XsdGoPkgHasElem_ScoresequenceextensioncomplexContenttemporalMetricsTypeschema_Score_TzeroToTenDecimalType_, bool) error
	XsdGoPkgHasElems_AccessComplexitysequencebaseVectorsGroupschema_AccessComplexity_TaccessComplexityType_                                                 func(*XsdGoPkgHasElems_AccessComplexitysequencebaseVectorsGroupschema_AccessComplexity_TaccessComplexityType_, bool) error
	XsdGoPkgHasElems_AccessVectorsequencebaseVectorsCriteriaGroupschema_AccessVector_TaccessVectorEnumType_                                                 func(*XsdGoPkgHasElems_AccessVectorsequencebaseVectorsCriteriaGroupschema_AccessVector_TaccessVectorEnumType_, bool) error
	XsdGoPkgHasElem_ConfidentialityImpactsequencebaseVectorsGroupschema_ConfidentialityImpact_TciaType_                                                     func(*XsdGoPkgHasElem_ConfidentialityImpactsequencebaseVectorsGroupschema_ConfidentialityImpact_TciaType_, bool) error
	XsdGoPkgHasElem_IntegrityImpactsequencebaseVectorsCriteriaGroupschema_IntegrityImpact_TciaEnumType_                                                     func(*XsdGoPkgHasElem_IntegrityImpactsequencebaseVectorsCriteriaGroupschema_IntegrityImpact_TciaEnumType_, bool) error
	TcvssType                                                                                                                                               func(*TcvssType, bool) error
	XsdGoPkgHasElems_AccessVectorsequencebaseVectorsGroupschema_AccessVector_TaccessVectorType_                                                             func(*XsdGoPkgHasElems_AccessVectorsequencebaseVectorsGroupschema_AccessVector_TaccessVectorType_, bool) error
	XsdGoPkgHasElems_IntegrityImpactsequencebaseVectorsCriteriaGroupschema_IntegrityImpact_TciaEnumType_                                                    func(*XsdGoPkgHasElems_IntegrityImpactsequencebaseVectorsCriteriaGroupschema_IntegrityImpact_TciaEnumType_, bool) error
	TciaRequirementType                                                                                                                                     func(*TciaRequirementType, bool) error
	XsdGoPkgHasGroup_EnvironmentalVectorsGroup                                                                                                              func(*XsdGoPkgHasGroup_EnvironmentalVectorsGroup, bool) error
	XsdGoPkgHasElem_AuthenticationsequencebaseVectorsCriteriaGroupschema_Authentication_TauthenticationEnumType_                                            func(*XsdGoPkgHasElem_AuthenticationsequencebaseVectorsCriteriaGroupschema_Authentication_TauthenticationEnumType_, bool) error
	XsdGoPkgHasElem_RemediationLevelsequencetemporalVectorsCriteriaGroupschema_RemediationLevel_TremediationLevelEnumType_                                  func(*XsdGoPkgHasElem_RemediationLevelsequencetemporalVectorsCriteriaGroupschema_RemediationLevel_TremediationLevelEnumType_, bool) error
	XsdGoPkgHasGroup_TemporalVectorsCriteriaGroup                                                                                                           func(*XsdGoPkgHasGroup_TemporalVectorsCriteriaGroup, bool) error
	XsdGoPkgHasElems_ConfidentialityRequirementsequenceenvironmentalVectorsGroupschema_ConfidentialityRequirement_TciaRequirementType_                      func(*XsdGoPkgHasElems_ConfidentialityRequirementsequenceenvironmentalVectorsGroupschema_ConfidentialityRequirement_TciaRequirementType_, bool) error
	XsdGoPkgHasElems_BaseMetricssequencecvssTypeschema_BaseMetrics_TbaseMetricsType_                                                                        func(*XsdGoPkgHasElems_BaseMetricssequencecvssTypeschema_BaseMetrics_TbaseMetricsType_, bool) error
	XsdGoPkgHasElem_AvailabilityImpactsequencebaseVectorsGroupschema_AvailabilityImpact_TciaType_                                                           func(*XsdGoPkgHasElem_AvailabilityImpactsequencebaseVectorsGroupschema_AvailabilityImpact_TciaType_, bool) error
	XsdGoPkgHasElem_ImpactSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ImpactSubscore_TzeroToTenDecimalType_                                func(*XsdGoPkgHasElem_ImpactSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ImpactSubscore_TzeroToTenDecimalType_, bool) error
	XsdGoPkgHasElems_ExploitSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ExploitSubscore_TzeroToTenDecimalType_                             func(*XsdGoPkgHasElems_ExploitSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ExploitSubscore_TzeroToTenDecimalType_, bool) error
	XsdGoPkgHasElems_CollateralDamagePotentialsequenceenvironmentalVectorsCriteriaGroupschema_CollateralDamagePotential_TcollateralDamagePotentialEnumType_ func(*XsdGoPkgHasElems_CollateralDamagePotentialsequenceenvironmentalVectorsCriteriaGroupschema_CollateralDamagePotential_TcollateralDamagePotentialEnumType_, bool) error
	XsdGoPkgHasElems_TargetDistributionsequenceenvironmentalVectorsCriteriaGroupschema_TargetDistribution_TtargetDistributionEnumType_                      func(*XsdGoPkgHasElems_TargetDistributionsequenceenvironmentalVectorsCriteriaGroupschema_TargetDistribution_TtargetDistributionEnumType_, bool) error
	XsdGoPkgHasElems_AvailabilityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_AvailabilityRequirement_TciaRequirementEnumType_                func(*XsdGoPkgHasElems_AvailabilityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_AvailabilityRequirement_TciaRequirementEnumType_, bool) error
	TciaType                                                                                                                                                func(*TciaType, bool) error
	XsdGoPkgHasElem_AccessVectorsequencebaseVectorsGroupschema_AccessVector_TaccessVectorType_                                                              func(*XsdGoPkgHasElem_AccessVectorsequencebaseVectorsGroupschema_AccessVector_TaccessVectorType_, bool) error
	XsdGoPkgHasElem_CollateralDamagePotentialsequenceenvironmentalVectorsGroupschema_CollateralDamagePotential_TcollateralDamagePotentialType_              func(*XsdGoPkgHasElem_CollateralDamagePotentialsequenceenvironmentalVectorsGroupschema_CollateralDamagePotential_TcollateralDamagePotentialType_, bool) error
	XsdGoPkgHasElem_RemediationLevelsequencetemporalVectorsGroupschema_RemediationLevel_TremediationLevelType_                                              func(*XsdGoPkgHasElem_RemediationLevelsequencetemporalVectorsGroupschema_RemediationLevel_TremediationLevelType_, bool) error
	XsdGoPkgHasElem_AccessVectorsequencebaseVectorsCriteriaGroupschema_AccessVector_TaccessVectorEnumType_                                                  func(*XsdGoPkgHasElem_AccessVectorsequencebaseVectorsCriteriaGroupschema_AccessVector_TaccessVectorEnumType_, bool) error
	XsdGoPkgHasElem_AvailabilityImpactsequencebaseVectorsCriteriaGroupschema_AvailabilityImpact_TciaEnumType_                                               func(*XsdGoPkgHasElem_AvailabilityImpactsequencebaseVectorsCriteriaGroupschema_AvailabilityImpact_TciaEnumType_, bool) error
	XsdGoPkgHasGroup_BaseVectorsCriteriaGroup                                                                                                               func(*XsdGoPkgHasGroup_BaseVectorsCriteriaGroup, bool) error
	XsdGoPkgHasElem_ConfidentialityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_ConfidentialityRequirement_TciaRequirementEnumType_           func(*XsdGoPkgHasElem_ConfidentialityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_ConfidentialityRequirement_TciaRequirementEnumType_, bool) error
	XsdGoPkgHasElems_IntegrityImpactsequencebaseVectorsGroupschema_IntegrityImpact_TciaType_                                                                func(*XsdGoPkgHasElems_IntegrityImpactsequencebaseVectorsGroupschema_IntegrityImpact_TciaType_, bool) error
	XsdGoPkgHasElem_AuthenticationsequencebaseVectorsGroupschema_Authentication_TauthenticationType_                                                        func(*XsdGoPkgHasElem_AuthenticationsequencebaseVectorsGroupschema_Authentication_TauthenticationType_, bool) error
	XsdGoPkgHasElem_ConfidentialityRequirementsequenceenvironmentalVectorsGroupschema_ConfidentialityRequirement_TciaRequirementType_                       func(*XsdGoPkgHasElem_ConfidentialityRequirementsequenceenvironmentalVectorsGroupschema_ConfidentialityRequirement_TciaRequirementType_, bool) error
	XsdGoPkgHasElem_ExploitabilitysequencetemporalVectorsGroupschema_Exploitability_TexploitabilityType_                                                    func(*XsdGoPkgHasElem_ExploitabilitysequencetemporalVectorsGroupschema_Exploitability_TexploitabilityType_, bool) error
	XsdGoPkgHasElem_CollateralDamagePotentialsequenceenvironmentalVectorsCriteriaGroupschema_CollateralDamagePotential_TcollateralDamagePotentialEnumType_  func(*XsdGoPkgHasElem_CollateralDamagePotentialsequenceenvironmentalVectorsCriteriaGroupschema_CollateralDamagePotential_TcollateralDamagePotentialEnumType_, bool) error
	XsdGoPkgHasElem_ExploitabilitysequencetemporalVectorsCriteriaGroupschema_Exploitability_TexploitabilityEnumType_                                        func(*XsdGoPkgHasElem_ExploitabilitysequencetemporalVectorsCriteriaGroupschema_Exploitability_TexploitabilityEnumType_, bool) error
	XsdGoPkgHasElems_TargetDistributionsequenceenvironmentalVectorsGroupschema_TargetDistribution_TtargetDistributionType_                                  func(*XsdGoPkgHasElems_TargetDistributionsequenceenvironmentalVectorsGroupschema_TargetDistribution_TtargetDistributionType_, bool) error
	XsdGoPkgHasElems_ImpactSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ImpactSubscore_TzeroToTenDecimalType_                               func(*XsdGoPkgHasElems_ImpactSubscoresequenceextensioncomplexContentbaseMetricsTypeschema_ImpactSubscore_TzeroToTenDecimalType_, bool) error
	XsdGoPkgHasElems_RemediationLevelsequencetemporalVectorsGroupschema_RemediationLevel_TremediationLevelType_                                             func(*XsdGoPkgHasElems_RemediationLevelsequencetemporalVectorsGroupschema_RemediationLevel_TremediationLevelType_, bool) error
	XsdGoPkgHasElem_AccessComplexitysequencebaseVectorsGroupschema_AccessComplexity_TaccessComplexityType_                                                  func(*XsdGoPkgHasElem_AccessComplexitysequencebaseVectorsGroupschema_AccessComplexity_TaccessComplexityType_, bool) error
	TauthenticationType                                                                                                                                     func(*TauthenticationType, bool) error
	XsdGoPkgHasElem_AvailabilityRequirementsequenceenvironmentalVectorsGroupschema_AvailabilityRequirement_TciaRequirementType_                             func(*XsdGoPkgHasElem_AvailabilityRequirementsequenceenvironmentalVectorsGroupschema_AvailabilityRequirement_TciaRequirementType_, bool) error
	XsdGoPkgHasElem_AccessComplexitysequencebaseVectorsCriteriaGroupschema_AccessComplexity_TaccessComplexityEnumType_                                      func(*XsdGoPkgHasElem_AccessComplexitysequencebaseVectorsCriteriaGroupschema_AccessComplexity_TaccessComplexityEnumType_, bool) error
	XsdGoPkgHasElem_BaseMetricssequencerestrictioncomplexContentcvssImpactTypeschema_BaseMetrics_TbaseMetricsType_                                          func(*XsdGoPkgHasElem_BaseMetricssequencerestrictioncomplexContentcvssImpactTypeschema_BaseMetrics_TbaseMetricsType_, bool) error
	XsdGoPkgHasElems_ReportConfidencesequencetemporalVectorsGroupschema_ReportConfidence_TconfidenceType_                                                   func(*XsdGoPkgHasElems_ReportConfidencesequencetemporalVectorsGroupschema_ReportConfidence_TconfidenceType_, bool) error
	XsdGoPkgHasElems_ScoresequenceextensioncomplexContenttemporalMetricsTypeschema_Score_TzeroToTenDecimalType_                                             func(*XsdGoPkgHasElems_ScoresequenceextensioncomplexContenttemporalMetricsTypeschema_Score_TzeroToTenDecimalType_, bool) error
	XsdGoPkgHasElems_ExploitabilitysequencetemporalVectorsGroupschema_Exploitability_TexploitabilityType_                                                   func(*XsdGoPkgHasElems_ExploitabilitysequencetemporalVectorsGroupschema_Exploitability_TexploitabilityType_, bool) error
	XsdGoPkgHasElem_TargetDistributionsequenceenvironmentalVectorsCriteriaGroupschema_TargetDistribution_TtargetDistributionEnumType_                       func(*XsdGoPkgHasElem_TargetDistributionsequenceenvironmentalVectorsCriteriaGroupschema_TargetDistribution_TtargetDistributionEnumType_, bool) error
	XsdGoPkgHasElem_IntegrityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_IntegrityRequirement_TciaRequirementEnumType_                       func(*XsdGoPkgHasElem_IntegrityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_IntegrityRequirement_TciaRequirementEnumType_, bool) error
	XsdGoPkgHasElems_AvailabilityImpactsequencebaseVectorsCriteriaGroupschema_AvailabilityImpact_TciaEnumType_                                              func(*XsdGoPkgHasElems_AvailabilityImpactsequencebaseVectorsCriteriaGroupschema_AvailabilityImpact_TciaEnumType_, bool) error
	TenvironmentalMetricsType                                                                                                                               func(*TenvironmentalMetricsType, bool) error
	XsdGoPkgHasElems_ConfidentialityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_ConfidentialityRequirement_TciaRequirementEnumType_          func(*XsdGoPkgHasElems_ConfidentialityRequirementsequenceenvironmentalVectorsCriteriaGroupschema_ConfidentialityRequirement_TciaRequirementEnumType_, bool) error
}
