//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		nvd.nist.gov/schema/nvd-cve-feed_2.0.xsd
package go_NvdCveFeed20

//	TODO: address distributed with for APP->OS resolution
//	This schema defines the structure of the National
//	Vulnerability Database XML feed files version: 1.2. The elements and
//	attribute in this document are described by xsd:annotation tags. This
//	file is kept at http://nvd.nist.gov/schema/nvdcve.xsd. The NVD XML
//	feeds are available at http://nvd.nist.gov/download.cfm.
//	Release Notes:
//	Version 2.1:
//	* Modified to use new CVE-ID format
//	Version 2.0:
//	* Redesign of the feed to integrate with the new vulnerability data
//	model schema.
//	Version 1.2:
//	* CVSS version 2 scores and vectors have been added.  Please see
//	http://nvd.nist.gov/cvss.cfm?vectorinfo and
//	http://www.first.org/cvss/cvss-guide.html for more information on
//	how to interpret this data.

import (
	xsdt "github.com/metaleap/go-xsd/types"
	vuln "github.com/shift/nvd_structs/nvd.nist.gov/schema/vulnerability_0.4.1.xsd_go"
)

//	The root element of the NVD CVE feed. Multiple "entry" child elements describe specific NVD CVE entries.
//	A CVE entry.
type XsdGoPkgHasElems_Entry struct {
	//	A CVE entry.
	Entries []vuln.TvulnerabilityType `xml:"http://scap.nist.gov/schema/feed/vulnerability/2.0 entry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Entry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Entry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Entry instance.
func (me *XsdGoPkgHasElems_Entry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Entry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The schema version number supported by the feed.
type XsdGoPkgHasAttr_NvdXmlVersion_XsdtDecimal_ struct {
	//	The schema version number supported by the feed.
	NvdXmlVersion xsdt.Decimal `xml:"http://scap.nist.gov/schema/feed/vulnerability/2.0 nvd_xml_version,attr"`
}

//	The date the feed was generated.
type XsdGoPkgHasAttr_PubDate_XsdtDateTime_ struct {
	//	The date the feed was generated.
	PubDate xsdt.DateTime `xml:"http://scap.nist.gov/schema/feed/vulnerability/2.0 pub_date,attr"`
}

type TxsdNvd struct {
	//	A CVE entry.
	XsdGoPkgHasElems_Entry

	//	The schema version number supported by the feed.
	XsdGoPkgHasAttr_NvdXmlVersion_XsdtDecimal_

	//	The date the feed was generated.
	XsdGoPkgHasAttr_PubDate_XsdtDateTime_
}

//	If the WalkHandlers.TxsdNvd function is not nil (ie. was set by outside code), calls it with this TxsdNvd instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TxsdNvd instance.
func (me *TxsdNvd) Walk() (err error) {
	if fn := WalkHandlers.TxsdNvd; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Entry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Nvd struct {
	//	The root element of the NVD CVE feed. Multiple "entry" child elements describe specific NVD CVE entries.
	Nvd *TxsdNvd `xml:"http://scap.nist.gov/schema/feed/vulnerability/2.0 nvd"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Nvd function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Nvd instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Nvd instance.
func (me *XsdGoPkgHasElem_Nvd) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Nvd; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Nvd.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The root element of the NVD CVE feed. Multiple "entry" child elements describe specific NVD CVE entries.
type XsdGoPkgHasElems_Nvd struct {
	//	The root element of the NVD CVE feed. Multiple "entry" child elements describe specific NVD CVE entries.
	Nvds []*TxsdNvd `xml:"http://scap.nist.gov/schema/feed/vulnerability/2.0 nvd"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Nvd function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Nvd instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Nvd instance.
func (me *XsdGoPkgHasElems_Nvd) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Nvd; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Nvds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A CVE entry.
type XsdGoPkgHasElem_Entry struct {
	//	A CVE entry.
	Entry vuln.TvulnerabilityType `xml:"http://scap.nist.gov/schema/feed/vulnerability/2.0 entry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Entry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Entry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Entry instance.
func (me *XsdGoPkgHasElem_Entry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Entry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 6 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 6 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElem_Nvd    func(*XsdGoPkgHasElem_Nvd, bool) error
	XsdGoPkgHasElems_Nvd   func(*XsdGoPkgHasElems_Nvd, bool) error
	XsdGoPkgHasElem_Entry  func(*XsdGoPkgHasElem_Entry, bool) error
	XsdGoPkgHasCdata       func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElems_Entry func(*XsdGoPkgHasElems_Entry, bool) error
	TxsdNvd                func(*TxsdNvd, bool) error
}
