//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		nvd.nist.gov/schema/patch_0.1.xsd
package go_Patch01

import (
	xsdt "github.com/metaleap/go-xsd/types"
	scap_core "github.com/shift/nvd_structs/nvd.nist.gov/schema/scap-core_0.1.xsd_go"
)

//	Indicates that a patch should not be used -- regardless of supersession.
type XsdGoPkgHasAttr_Deprecated_XsdtBoolean_ struct {
	//	Indicates that a patch should not be used -- regardless of supersession.
	Deprecated xsdt.Boolean `xml:"http://scap.nist.gov/schema/patch/0.1 deprecated,attr"`
}

type XsdGoPkgHasElems_ReferencesequenceTxsdPatchTypeSequenceReferencesreferencessequencepatchTypeschema_Reference_ScapCoreTreferenceType_ struct {
	References []scap_core.TreferenceType `xml:"http://scap.nist.gov/schema/patch/0.1 reference"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReferencesequenceTxsdPatchTypeSequenceReferencesreferencessequencepatchTypeschema_Reference_ScapCoreTreferenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReferencesequenceTxsdPatchTypeSequenceReferencesreferencessequencepatchTypeschema_Reference_ScapCoreTreferenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReferencesequenceTxsdPatchTypeSequenceReferencesreferencessequencepatchTypeschema_Reference_ScapCoreTreferenceType_ instance.
func (me *XsdGoPkgHasElems_ReferencesequenceTxsdPatchTypeSequenceReferencesreferencessequencepatchTypeschema_Reference_ScapCoreTreferenceType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReferencesequenceTxsdPatchTypeSequenceReferencesreferencessequencepatchTypeschema_Reference_ScapCoreTreferenceType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPatchTypeSequenceReferences struct {
	XsdGoPkgHasElems_ReferencesequenceTxsdPatchTypeSequenceReferencesreferencessequencepatchTypeschema_Reference_ScapCoreTreferenceType_
}

//	If the WalkHandlers.TxsdPatchTypeSequenceReferences function is not nil (ie. was set by outside code), calls it with this TxsdPatchTypeSequenceReferences instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdPatchTypeSequenceReferences instance.
func (me *TxsdPatchTypeSequenceReferences) Walk() (err error) {
	if fn := WalkHandlers.TxsdPatchTypeSequenceReferences; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ReferencesequenceTxsdPatchTypeSequenceReferencesreferencessequencepatchTypeschema_Reference_ScapCoreTreferenceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ReferencessequencepatchTypeschema_References_TxsdPatchTypeSequenceReferences_ struct {
	References *TxsdPatchTypeSequenceReferences `xml:"http://scap.nist.gov/schema/patch/0.1 references"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReferencessequencepatchTypeschema_References_TxsdPatchTypeSequenceReferences_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReferencessequencepatchTypeschema_References_TxsdPatchTypeSequenceReferences_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ReferencessequencepatchTypeschema_References_TxsdPatchTypeSequenceReferences_ instance.
func (me *XsdGoPkgHasElem_ReferencessequencepatchTypeschema_References_TxsdPatchTypeSequenceReferences_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReferencessequencepatchTypeschema_References_TxsdPatchTypeSequenceReferences_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.References.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Identifier unique within the XML document for the given patch.
type XsdGoPkgHasAttr_Identifier_XsdtDouble_ struct {
	//	Identifier unique within the XML document for the given patch.
	Identifier xsdt.Double `xml:"http://scap.nist.gov/schema/patch/0.1 identifier,attr"`
}

//	Vendor supplied name for the patch.  Will use lower case and underscores for spaces, consistent with CPE naming conventions.
type XsdGoPkgHasAttr_Name_XsdtString_ struct {
	//	Vendor supplied name for the patch.  Will use lower case and underscores for spaces, consistent with CPE naming conventions.
	Name xsdt.String `xml:"http://scap.nist.gov/schema/patch/0.1 name,attr"`
}

//	Patches that superceded by the referenced patch.
type XsdGoPkgHasElems_SupersedessequencepatchTypeschema_Supersedes_TpatchType_ struct {
	//	Patches that superceded by the referenced patch.
	Supersedeses []*TpatchType `xml:"http://scap.nist.gov/schema/patch/0.1 supersedes"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SupersedessequencepatchTypeschema_Supersedes_TpatchType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SupersedessequencepatchTypeschema_Supersedes_TpatchType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SupersedessequencepatchTypeschema_Supersedes_TpatchType_ instance.
func (me *XsdGoPkgHasElems_SupersedessequencepatchTypeschema_Supersedes_TpatchType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SupersedessequencepatchTypeschema_Supersedes_TpatchType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Patches that supersede the patch comprising the current XML document.
type XsdGoPkgHasElems_SupersededBysequencepatchTypeschema_SupersededBy_TpatchType_ struct {
	//	Patches that supersede the patch comprising the current XML document.
	SupersededBies []*TpatchType `xml:"http://scap.nist.gov/schema/patch/0.1 superseded-by"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SupersededBysequencepatchTypeschema_SupersededBy_TpatchType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SupersededBysequencepatchTypeschema_SupersededBy_TpatchType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SupersededBysequencepatchTypeschema_SupersededBy_TpatchType_ instance.
func (me *XsdGoPkgHasElems_SupersededBysequencepatchTypeschema_SupersededBy_TpatchType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SupersededBysequencepatchTypeschema_SupersededBy_TpatchType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Boolean value.  True of patch is superseded.  False if not.
type XsdGoPkgHasAttr_Superseded_XsdtBoolean_ struct {
	//	Boolean value.  True of patch is superseded.  False if not.
	Superseded xsdt.Boolean `xml:"http://scap.nist.gov/schema/patch/0.1 superseded,attr"`
}

//	Human-formatted title for the patch.  If none given, then duplicate of the name.
type XsdGoPkgHasElem_TitlesequencepatchTypeschema_Title_ScapCoreTtextType_ struct {
	//	Human-formatted title for the patch.  If none given, then duplicate of the name.
	Title scap_core.TtextType `xml:"http://scap.nist.gov/schema/patch/0.1 title"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TitlesequencepatchTypeschema_Title_ScapCoreTtextType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TitlesequencepatchTypeschema_Title_ScapCoreTtextType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TitlesequencepatchTypeschema_Title_ScapCoreTtextType_ instance.
func (me *XsdGoPkgHasElem_TitlesequencepatchTypeschema_Title_ScapCoreTtextType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TitlesequencepatchTypeschema_Title_ScapCoreTtextType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NotessequencepatchTypeschema_Notes_ScapCoreTnotesType_ struct {
	Noteses []scap_core.TnotesType `xml:"http://scap.nist.gov/schema/patch/0.1 notes"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NotessequencepatchTypeschema_Notes_ScapCoreTnotesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NotessequencepatchTypeschema_Notes_ScapCoreTnotesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NotessequencepatchTypeschema_Notes_ScapCoreTnotesType_ instance.
func (me *XsdGoPkgHasElems_NotessequencepatchTypeschema_Notes_ScapCoreTnotesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NotessequencepatchTypeschema_Notes_ScapCoreTnotesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ChecksequencepatchTypeschema_Check_ScapCoreTcheckReferenceType_ struct {
	Checks []scap_core.TcheckReferenceType `xml:"http://scap.nist.gov/schema/patch/0.1 check"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ChecksequencepatchTypeschema_Check_ScapCoreTcheckReferenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ChecksequencepatchTypeschema_Check_ScapCoreTcheckReferenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ChecksequencepatchTypeschema_Check_ScapCoreTcheckReferenceType_ instance.
func (me *XsdGoPkgHasElems_ChecksequencepatchTypeschema_Check_ScapCoreTcheckReferenceType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ChecksequencepatchTypeschema_Check_ScapCoreTcheckReferenceType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TpatchType struct {
	XsdGoPkgHasElems_ChecksequencepatchTypeschema_Check_ScapCoreTcheckReferenceType_

	//	Patches that superceded by the referenced patch.
	XsdGoPkgHasElems_SupersedessequencepatchTypeschema_Supersedes_TpatchType_

	//	Patches that supersede the patch comprising the current XML document.
	XsdGoPkgHasElems_SupersededBysequencepatchTypeschema_SupersededBy_TpatchType_

	//	Boolean value.  True of patch is superseded.  False if not.
	XsdGoPkgHasAttr_Superseded_XsdtBoolean_

	//	Human-formatted title for the patch.  If none given, then duplicate of the name.
	XsdGoPkgHasElem_TitlesequencepatchTypeschema_Title_ScapCoreTtextType_

	XsdGoPkgHasElems_NotessequencepatchTypeschema_Notes_ScapCoreTnotesType_

	//	Vendor supplied name for the patch.  Will use lower case and underscores for spaces, consistent with CPE naming conventions.
	XsdGoPkgHasAttr_Name_XsdtString_

	//	Indicates that a patch should not be used -- regardless of supersession.
	XsdGoPkgHasAttr_Deprecated_XsdtBoolean_

	XsdGoPkgHasElem_ReferencessequencepatchTypeschema_References_TxsdPatchTypeSequenceReferences_

	//	Identifier unique within the XML document for the given patch.
	XsdGoPkgHasAttr_Identifier_XsdtDouble_
}

//	If the WalkHandlers.TpatchType function is not nil (ie. was set by outside code), calls it with this TpatchType instance as the single argument. Then calls the Walk() method on 6/10 embed(s) and 0/0 field(s) belonging to this TpatchType instance.
func (me *TpatchType) Walk() (err error) {
	if fn := WalkHandlers.TpatchType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ReferencessequencepatchTypeschema_References_TxsdPatchTypeSequenceReferences_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ChecksequencepatchTypeschema_Check_ScapCoreTcheckReferenceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SupersedessequencepatchTypeschema_Supersedes_TpatchType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SupersededBysequencepatchTypeschema_SupersededBy_TpatchType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TitlesequencepatchTypeschema_Title_ScapCoreTtextType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_NotessequencepatchTypeschema_Notes_ScapCoreTnotesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Patch struct {
	Patch *TpatchType `xml:"http://scap.nist.gov/schema/patch/0.1 patch"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Patch function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Patch instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Patch instance.
func (me *XsdGoPkgHasElem_Patch) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Patch; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Patch.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Patch struct {
	Patchs []*TpatchType `xml:"http://scap.nist.gov/schema/patch/0.1 patch"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Patch function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Patch instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Patch instance.
func (me *XsdGoPkgHasElems_Patch) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Patch; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Patchs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ReferencesequenceTxsdPatchTypeSequenceReferencesreferencessequencepatchTypeschema_Reference_ScapCoreTreferenceType_ struct {
	Reference scap_core.TreferenceType `xml:"http://scap.nist.gov/schema/patch/0.1 reference"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReferencesequenceTxsdPatchTypeSequenceReferencesreferencessequencepatchTypeschema_Reference_ScapCoreTreferenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReferencesequenceTxsdPatchTypeSequenceReferencesreferencessequencepatchTypeschema_Reference_ScapCoreTreferenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ReferencesequenceTxsdPatchTypeSequenceReferencesreferencessequencepatchTypeschema_Reference_ScapCoreTreferenceType_ instance.
func (me *XsdGoPkgHasElem_ReferencesequenceTxsdPatchTypeSequenceReferencesreferencessequencepatchTypeschema_Reference_ScapCoreTreferenceType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReferencesequenceTxsdPatchTypeSequenceReferencesreferencessequencepatchTypeschema_Reference_ScapCoreTreferenceType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ReferencessequencepatchTypeschema_References_TxsdPatchTypeSequenceReferences_ struct {
	Referenceses []*TxsdPatchTypeSequenceReferences `xml:"http://scap.nist.gov/schema/patch/0.1 references"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReferencessequencepatchTypeschema_References_TxsdPatchTypeSequenceReferences_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReferencessequencepatchTypeschema_References_TxsdPatchTypeSequenceReferences_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReferencessequencepatchTypeschema_References_TxsdPatchTypeSequenceReferences_ instance.
func (me *XsdGoPkgHasElems_ReferencessequencepatchTypeschema_References_TxsdPatchTypeSequenceReferences_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReferencessequencepatchTypeschema_References_TxsdPatchTypeSequenceReferences_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Referenceses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NotessequencepatchTypeschema_Notes_ScapCoreTnotesType_ struct {
	Notes scap_core.TnotesType `xml:"http://scap.nist.gov/schema/patch/0.1 notes"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NotessequencepatchTypeschema_Notes_ScapCoreTnotesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NotessequencepatchTypeschema_Notes_ScapCoreTnotesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NotessequencepatchTypeschema_Notes_ScapCoreTnotesType_ instance.
func (me *XsdGoPkgHasElem_NotessequencepatchTypeschema_Notes_ScapCoreTnotesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NotessequencepatchTypeschema_Notes_ScapCoreTnotesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Human-formatted title for the patch.  If none given, then duplicate of the name.
type XsdGoPkgHasElems_TitlesequencepatchTypeschema_Title_ScapCoreTtextType_ struct {
	//	Human-formatted title for the patch.  If none given, then duplicate of the name.
	Titles []scap_core.TtextType `xml:"http://scap.nist.gov/schema/patch/0.1 title"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TitlesequencepatchTypeschema_Title_ScapCoreTtextType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TitlesequencepatchTypeschema_Title_ScapCoreTtextType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TitlesequencepatchTypeschema_Title_ScapCoreTtextType_ instance.
func (me *XsdGoPkgHasElems_TitlesequencepatchTypeschema_Title_ScapCoreTtextType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TitlesequencepatchTypeschema_Title_ScapCoreTtextType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ChecksequencepatchTypeschema_Check_ScapCoreTcheckReferenceType_ struct {
	Check scap_core.TcheckReferenceType `xml:"http://scap.nist.gov/schema/patch/0.1 check"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ChecksequencepatchTypeschema_Check_ScapCoreTcheckReferenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ChecksequencepatchTypeschema_Check_ScapCoreTcheckReferenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ChecksequencepatchTypeschema_Check_ScapCoreTcheckReferenceType_ instance.
func (me *XsdGoPkgHasElem_ChecksequencepatchTypeschema_Check_ScapCoreTcheckReferenceType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ChecksequencepatchTypeschema_Check_ScapCoreTcheckReferenceType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Patches that superceded by the referenced patch.
type XsdGoPkgHasElem_SupersedessequencepatchTypeschema_Supersedes_TpatchType_ struct {
	//	Patches that superceded by the referenced patch.
	Supersedes *TpatchType `xml:"http://scap.nist.gov/schema/patch/0.1 supersedes"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SupersedessequencepatchTypeschema_Supersedes_TpatchType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SupersedessequencepatchTypeschema_Supersedes_TpatchType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SupersedessequencepatchTypeschema_Supersedes_TpatchType_ instance.
func (me *XsdGoPkgHasElem_SupersedessequencepatchTypeschema_Supersedes_TpatchType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SupersedessequencepatchTypeschema_Supersedes_TpatchType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Supersedes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Patches that supersede the patch comprising the current XML document.
type XsdGoPkgHasElem_SupersededBysequencepatchTypeschema_SupersededBy_TpatchType_ struct {
	//	Patches that supersede the patch comprising the current XML document.
	SupersededBy *TpatchType `xml:"http://scap.nist.gov/schema/patch/0.1 superseded-by"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SupersededBysequencepatchTypeschema_SupersededBy_TpatchType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SupersededBysequencepatchTypeschema_SupersededBy_TpatchType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SupersededBysequencepatchTypeschema_SupersededBy_TpatchType_ instance.
func (me *XsdGoPkgHasElem_SupersededBysequencepatchTypeschema_SupersededBy_TpatchType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SupersededBysequencepatchTypeschema_SupersededBy_TpatchType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SupersededBy.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 19 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 19 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasCdata                                                                                                                     func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElems_ReferencesequenceTxsdPatchTypeSequenceReferencesreferencessequencepatchTypeschema_Reference_ScapCoreTreferenceType_ func(*XsdGoPkgHasElems_ReferencesequenceTxsdPatchTypeSequenceReferencesreferencessequencepatchTypeschema_Reference_ScapCoreTreferenceType_, bool) error
	TxsdPatchTypeSequenceReferences                                                                                                      func(*TxsdPatchTypeSequenceReferences, bool) error
	XsdGoPkgHasElems_SupersedessequencepatchTypeschema_Supersedes_TpatchType_                                                            func(*XsdGoPkgHasElems_SupersedessequencepatchTypeschema_Supersedes_TpatchType_, bool) error
	XsdGoPkgHasElem_ChecksequencepatchTypeschema_Check_ScapCoreTcheckReferenceType_                                                      func(*XsdGoPkgHasElem_ChecksequencepatchTypeschema_Check_ScapCoreTcheckReferenceType_, bool) error
	XsdGoPkgHasElem_SupersedessequencepatchTypeschema_Supersedes_TpatchType_                                                             func(*XsdGoPkgHasElem_SupersedessequencepatchTypeschema_Supersedes_TpatchType_, bool) error
	XsdGoPkgHasElems_ReferencessequencepatchTypeschema_References_TxsdPatchTypeSequenceReferences_                                       func(*XsdGoPkgHasElems_ReferencessequencepatchTypeschema_References_TxsdPatchTypeSequenceReferences_, bool) error
	XsdGoPkgHasElems_TitlesequencepatchTypeschema_Title_ScapCoreTtextType_                                                               func(*XsdGoPkgHasElems_TitlesequencepatchTypeschema_Title_ScapCoreTtextType_, bool) error
	XsdGoPkgHasElem_SupersededBysequencepatchTypeschema_SupersededBy_TpatchType_                                                         func(*XsdGoPkgHasElem_SupersededBysequencepatchTypeschema_SupersededBy_TpatchType_, bool) error
	XsdGoPkgHasElems_SupersededBysequencepatchTypeschema_SupersededBy_TpatchType_                                                        func(*XsdGoPkgHasElems_SupersededBysequencepatchTypeschema_SupersededBy_TpatchType_, bool) error
	XsdGoPkgHasElem_TitlesequencepatchTypeschema_Title_ScapCoreTtextType_                                                                func(*XsdGoPkgHasElem_TitlesequencepatchTypeschema_Title_ScapCoreTtextType_, bool) error
	XsdGoPkgHasElems_NotessequencepatchTypeschema_Notes_ScapCoreTnotesType_                                                              func(*XsdGoPkgHasElems_NotessequencepatchTypeschema_Notes_ScapCoreTnotesType_, bool) error
	XsdGoPkgHasElem_Patch                                                                                                                func(*XsdGoPkgHasElem_Patch, bool) error
	XsdGoPkgHasElems_Patch                                                                                                               func(*XsdGoPkgHasElems_Patch, bool) error
	TpatchType                                                                                                                           func(*TpatchType, bool) error
	XsdGoPkgHasElem_ReferencessequencepatchTypeschema_References_TxsdPatchTypeSequenceReferences_                                        func(*XsdGoPkgHasElem_ReferencessequencepatchTypeschema_References_TxsdPatchTypeSequenceReferences_, bool) error
	XsdGoPkgHasElems_ChecksequencepatchTypeschema_Check_ScapCoreTcheckReferenceType_                                                     func(*XsdGoPkgHasElems_ChecksequencepatchTypeschema_Check_ScapCoreTcheckReferenceType_, bool) error
	XsdGoPkgHasElem_ReferencesequenceTxsdPatchTypeSequenceReferencesreferencessequencepatchTypeschema_Reference_ScapCoreTreferenceType_  func(*XsdGoPkgHasElem_ReferencesequenceTxsdPatchTypeSequenceReferencesreferencessequencepatchTypeschema_Reference_ScapCoreTreferenceType_, bool) error
	XsdGoPkgHasElem_NotessequencepatchTypeschema_Notes_ScapCoreTnotesType_                                                               func(*XsdGoPkgHasElem_NotessequencepatchTypeschema_Notes_ScapCoreTnotesType_, bool) error
}
